-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stereolbm_axis_cambm_xFSobelFilter3x3_Pipeline_Col_Loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rightRemappedMat_data_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    rightRemappedMat_data_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    rightRemappedMat_data_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    rightRemappedMat_data_empty_n : IN STD_LOGIC;
    rightRemappedMat_data_read : OUT STD_LOGIC;
    in_sobel_x_i_data_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    in_sobel_x_i_data_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    in_sobel_x_i_data_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    in_sobel_x_i_data_full_n : IN STD_LOGIC;
    in_sobel_x_i_data_write : OUT STD_LOGIC;
    in_sobel_y_i_data_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    in_sobel_y_i_data_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    in_sobel_y_i_data_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    in_sobel_y_i_data_full_n : IN STD_LOGIC;
    in_sobel_y_i_data_write : OUT STD_LOGIC;
    img_width : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buf_r_ce0 : OUT STD_LOGIC;
    buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buf_r_ce1 : OUT STD_LOGIC;
    buf_r_we1 : OUT STD_LOGIC;
    buf_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buf_1_ce0 : OUT STD_LOGIC;
    buf_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buf_1_ce1 : OUT STD_LOGIC;
    buf_1_we1 : OUT STD_LOGIC;
    buf_1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buf_2_ce0 : OUT STD_LOGIC;
    buf_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buf_2_ce1 : OUT STD_LOGIC;
    buf_2_we1 : OUT STD_LOGIC;
    buf_2_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tp_1 : IN STD_LOGIC_VECTOR (1 downto 0);
    mid_1 : IN STD_LOGIC_VECTOR (1 downto 0);
    bottom_1 : IN STD_LOGIC_VECTOR (1 downto 0);
    trunc_ln : IN STD_LOGIC_VECTOR (1 downto 0);
    cmp_i_i633_i : IN STD_LOGIC_VECTOR (0 downto 0);
    src_buf3_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    src_buf3_1_out_ap_vld : OUT STD_LOGIC;
    src_buf2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    src_buf2_out_ap_vld : OUT STD_LOGIC;
    src_buf3_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    src_buf3_out_ap_vld : OUT STD_LOGIC;
    src_buf1_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    src_buf1_1_out_ap_vld : OUT STD_LOGIC;
    src_buf1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    src_buf1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of stereolbm_axis_cambm_xFSobelFilter3x3_Pipeline_Col_Loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln225_reg_596 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i633_i_read_reg_565 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op61_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal icmp_ln250_reg_615 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln250_reg_615_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln225_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal rightRemappedMat_data_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal in_sobel_x_i_data_blk_n : STD_LOGIC;
    signal in_sobel_y_i_data_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln_read_reg_569 : STD_LOGIC_VECTOR (1 downto 0);
    signal bottom_1_read_reg_573 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_1_reg_588 : STD_LOGIC_VECTOR (12 downto 0);
    signal col_1_reg_588_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln225_reg_596_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln225_reg_596_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln225_reg_596_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln225_reg_596_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln250_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln250_reg_615_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln250_reg_615_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal src_buf1_2_fu_410_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf1_2_reg_619 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf2_2_fu_421_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf2_2_reg_625 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf3_2_fu_432_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf3_2_reg_631 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf1_3_reg_637 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf3_3_reg_643 : STD_LOGIC_VECTOR (7 downto 0);
    signal GradientValuesX_reg_649 : STD_LOGIC_VECTOR (15 downto 0);
    signal GradientValuesY_reg_654 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_exit_pp0_iter4_stage0 : STD_LOGIC;
    signal grp_xFSobel3x3_1_1_0_4_s_fu_316_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_xFSobel3x3_1_1_0_4_s_fu_316_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_xFSobel3x3_1_1_0_4_s_fu_316_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call13 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call13 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call13 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call13 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call13 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call13 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call13 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp93 : BOOLEAN;
    signal zext_ln233_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln231_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln234_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_fu_92 : STD_LOGIC_VECTOR (12 downto 0);
    signal col_2_fu_376_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_col_1 : STD_LOGIC_VECTOR (12 downto 0);
    signal src_buf1_fu_96 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf2_fu_100 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf3_1_fu_104 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf2_1_fu_108 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf1_1_fu_112 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf3_fu_116 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln225_fu_366_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_492 : BOOLEAN;
    signal ap_condition_498 : BOOLEAN;
    signal ap_condition_502 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component stereolbm_axis_cambm_xFSobel3x3_1_1_0_4_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        src_buf1_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
        src_buf1_1_val : IN STD_LOGIC_VECTOR (7 downto 0);
        src_buf1_2_val : IN STD_LOGIC_VECTOR (7 downto 0);
        src_buf2_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
        src_buf2_2_val : IN STD_LOGIC_VECTOR (7 downto 0);
        src_buf3_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
        src_buf3_1_val : IN STD_LOGIC_VECTOR (7 downto 0);
        src_buf3_2_val : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component stereolbm_axis_cambm_mux_3_2_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component stereolbm_axis_cambm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    grp_xFSobel3x3_1_1_0_4_s_fu_316 : component stereolbm_axis_cambm_xFSobel3x3_1_1_0_4_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        src_buf1_0_val => src_buf1_fu_96,
        src_buf1_1_val => src_buf1_1_fu_112,
        src_buf1_2_val => src_buf1_2_reg_619,
        src_buf2_0_val => src_buf2_fu_100,
        src_buf2_2_val => src_buf2_2_reg_625,
        src_buf3_0_val => src_buf3_1_fu_104,
        src_buf3_1_val => src_buf3_fu_116,
        src_buf3_2_val => src_buf3_2_reg_631,
        ap_return_0 => grp_xFSobel3x3_1_1_0_4_s_fu_316_ap_return_0,
        ap_return_1 => grp_xFSobel3x3_1_1_0_4_s_fu_316_ap_return_1,
        ap_ce => grp_xFSobel3x3_1_1_0_4_s_fu_316_ap_ce);

    mux_3_2_8_1_1_U388 : component stereolbm_axis_cambm_mux_3_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => buf_r_q0,
        din1 => buf_1_q0,
        din2 => buf_2_q0,
        din3 => tp_1,
        dout => src_buf1_2_fu_410_p5);

    mux_3_2_8_1_1_U389 : component stereolbm_axis_cambm_mux_3_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => buf_r_q0,
        din1 => buf_1_q0,
        din2 => buf_2_q0,
        din3 => mid_1,
        dout => src_buf2_2_fu_421_p5);

    mux_3_2_8_1_1_U390 : component stereolbm_axis_cambm_mux_3_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => buf_r_q0,
        din1 => buf_1_q0,
        din2 => buf_2_q0,
        din3 => bottom_1,
        dout => src_buf3_2_fu_432_p5);

    flow_control_loop_pipe_sequential_init_U : component stereolbm_axis_cambm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    col_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln225_fu_370_p2 = ap_const_lv1_1))) then 
                    col_fu_92 <= col_2_fu_376_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    col_fu_92 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    src_buf1_1_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    src_buf1_1_fu_112 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln225_reg_596_pp0_iter3_reg = ap_const_lv1_1))) then 
                    src_buf1_1_fu_112 <= src_buf1_2_reg_619;
                end if;
            end if; 
        end if;
    end process;

    src_buf1_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    src_buf1_fu_96 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln225_reg_596_pp0_iter3_reg = ap_const_lv1_1))) then 
                    src_buf1_fu_96 <= src_buf1_1_fu_112;
                end if;
            end if; 
        end if;
    end process;

    src_buf2_1_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    src_buf2_1_fu_108 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln225_reg_596_pp0_iter3_reg = ap_const_lv1_1))) then 
                    src_buf2_1_fu_108 <= src_buf2_2_reg_625;
                end if;
            end if; 
        end if;
    end process;

    src_buf2_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    src_buf2_fu_100 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln225_reg_596_pp0_iter3_reg = ap_const_lv1_1))) then 
                    src_buf2_fu_100 <= src_buf2_1_fu_108;
                end if;
            end if; 
        end if;
    end process;

    src_buf3_1_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    src_buf3_1_fu_104 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln225_reg_596_pp0_iter3_reg = ap_const_lv1_1))) then 
                    src_buf3_1_fu_104 <= src_buf3_fu_116;
                end if;
            end if; 
        end if;
    end process;

    src_buf3_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    src_buf3_fu_116 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln225_reg_596_pp0_iter3_reg = ap_const_lv1_1))) then 
                    src_buf3_fu_116 <= src_buf3_2_reg_631;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                GradientValuesX_reg_649 <= grp_xFSobel3x3_1_1_0_4_s_fu_316_ap_return_0;
                GradientValuesY_reg_654 <= grp_xFSobel3x3_1_1_0_4_s_fu_316_ap_return_1;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                icmp_ln225_reg_596_pp0_iter2_reg <= icmp_ln225_reg_596_pp0_iter1_reg;
                icmp_ln225_reg_596_pp0_iter3_reg <= icmp_ln225_reg_596_pp0_iter2_reg;
                icmp_ln225_reg_596_pp0_iter4_reg <= icmp_ln225_reg_596_pp0_iter3_reg;
                icmp_ln250_reg_615_pp0_iter3_reg <= icmp_ln250_reg_615;
                icmp_ln250_reg_615_pp0_iter4_reg <= icmp_ln250_reg_615_pp0_iter3_reg;
                icmp_ln250_reg_615_pp0_iter5_reg <= icmp_ln250_reg_615_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                col_1_reg_588 <= ap_sig_allocacmp_col_1;
                col_1_reg_588_pp0_iter1_reg <= col_1_reg_588;
                icmp_ln225_reg_596 <= icmp_ln225_fu_370_p2;
                icmp_ln225_reg_596_pp0_iter1_reg <= icmp_ln225_reg_596;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln225_reg_596_pp0_iter1_reg = ap_const_lv1_1))) then
                icmp_ln250_reg_615 <= icmp_ln250_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln225_reg_596_pp0_iter2_reg = ap_const_lv1_1))) then
                src_buf1_2_reg_619 <= src_buf1_2_fu_410_p5;
                src_buf2_2_reg_625 <= src_buf2_2_fu_421_p5;
                src_buf3_2_reg_631 <= src_buf3_2_fu_432_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                src_buf1_3_reg_637 <= src_buf1_1_fu_112;
                src_buf3_3_reg_643 <= src_buf3_fu_116;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, rightRemappedMat_data_empty_n, ap_predicate_op61_read_state2, in_sobel_x_i_data_full_n, icmp_ln250_reg_615_pp0_iter5_reg, in_sobel_y_i_data_full_n)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (((in_sobel_y_i_data_full_n = ap_const_logic_0) and (icmp_ln250_reg_615_pp0_iter5_reg = ap_const_lv1_0)) or ((icmp_ln250_reg_615_pp0_iter5_reg = ap_const_lv1_0) and (in_sobel_x_i_data_full_n = ap_const_logic_0)))) or ((ap_predicate_op61_read_state2 = ap_const_boolean_1) and (rightRemappedMat_data_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, rightRemappedMat_data_empty_n, ap_predicate_op61_read_state2, in_sobel_x_i_data_full_n, icmp_ln250_reg_615_pp0_iter5_reg, in_sobel_y_i_data_full_n)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (((in_sobel_y_i_data_full_n = ap_const_logic_0) and (icmp_ln250_reg_615_pp0_iter5_reg = ap_const_lv1_0)) or ((icmp_ln250_reg_615_pp0_iter5_reg = ap_const_lv1_0) and (in_sobel_x_i_data_full_n = ap_const_logic_0)))) or ((ap_predicate_op61_read_state2 = ap_const_boolean_1) and (rightRemappedMat_data_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp93_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, rightRemappedMat_data_empty_n, ap_predicate_op61_read_state2, in_sobel_x_i_data_full_n, icmp_ln250_reg_615_pp0_iter5_reg, in_sobel_y_i_data_full_n)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp93 <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (((in_sobel_y_i_data_full_n = ap_const_logic_0) and (icmp_ln250_reg_615_pp0_iter5_reg = ap_const_lv1_0)) or ((icmp_ln250_reg_615_pp0_iter5_reg = ap_const_lv1_0) and (in_sobel_x_i_data_full_n = ap_const_logic_0)))) or ((ap_predicate_op61_read_state2 = ap_const_boolean_1) and (rightRemappedMat_data_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, rightRemappedMat_data_empty_n, ap_predicate_op61_read_state2, in_sobel_x_i_data_full_n, icmp_ln250_reg_615_pp0_iter5_reg, in_sobel_y_i_data_full_n)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (((in_sobel_y_i_data_full_n = ap_const_logic_0) and (icmp_ln250_reg_615_pp0_iter5_reg = ap_const_lv1_0)) or ((icmp_ln250_reg_615_pp0_iter5_reg = ap_const_lv1_0) and (in_sobel_x_i_data_full_n = ap_const_logic_0)))) or ((ap_predicate_op61_read_state2 = ap_const_boolean_1) and (rightRemappedMat_data_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(rightRemappedMat_data_empty_n, ap_predicate_op61_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op61_read_state2 = ap_const_boolean_1) and (rightRemappedMat_data_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_ignore_call13_assign_proc : process(rightRemappedMat_data_empty_n, ap_predicate_op61_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1_ignore_call13 <= ((ap_predicate_op61_read_state2 = ap_const_boolean_1) and (rightRemappedMat_data_empty_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter6_assign_proc : process(in_sobel_x_i_data_full_n, icmp_ln250_reg_615_pp0_iter5_reg, in_sobel_y_i_data_full_n)
    begin
                ap_block_state7_pp0_stage0_iter6 <= (((in_sobel_y_i_data_full_n = ap_const_logic_0) and (icmp_ln250_reg_615_pp0_iter5_reg = ap_const_lv1_0)) or ((icmp_ln250_reg_615_pp0_iter5_reg = ap_const_lv1_0) and (in_sobel_x_i_data_full_n = ap_const_logic_0)));
    end process;


    ap_block_state7_pp0_stage0_iter6_ignore_call13_assign_proc : process(in_sobel_x_i_data_full_n, icmp_ln250_reg_615_pp0_iter5_reg, in_sobel_y_i_data_full_n)
    begin
                ap_block_state7_pp0_stage0_iter6_ignore_call13 <= (((in_sobel_y_i_data_full_n = ap_const_logic_0) and (icmp_ln250_reg_615_pp0_iter5_reg = ap_const_lv1_0)) or ((icmp_ln250_reg_615_pp0_iter5_reg = ap_const_lv1_0) and (in_sobel_x_i_data_full_n = ap_const_logic_0)));
    end process;


    ap_condition_492_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln225_reg_596, ap_block_pp0_stage0)
    begin
                ap_condition_492 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln225_reg_596 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_498_assign_proc : process(cmp_i_i633_i_read_reg_565, bottom_1_read_reg_573)
    begin
                ap_condition_498 <= (not((bottom_1_read_reg_573 = ap_const_lv2_0)) and not((bottom_1_read_reg_573 = ap_const_lv2_1)) and (cmp_i_i633_i_read_reg_565 = ap_const_lv1_0));
    end process;


    ap_condition_502_assign_proc : process(cmp_i_i633_i, trunc_ln_read_reg_569)
    begin
                ap_condition_502 <= (not((trunc_ln_read_reg_569 = ap_const_lv2_0)) and not((trunc_ln_read_reg_569 = ap_const_lv2_1)) and (cmp_i_i633_i = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln225_fu_370_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln225_fu_370_p2 = ap_const_lv1_0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter4_stage0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone, icmp_ln225_reg_596_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln225_reg_596_pp0_iter3_reg = ap_const_lv1_0))) then 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op61_read_state2_assign_proc : process(icmp_ln225_reg_596, cmp_i_i633_i)
    begin
                ap_predicate_op61_read_state2 <= ((cmp_i_i633_i = ap_const_lv1_1) and (icmp_ln225_reg_596 = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_col_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, col_fu_92, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_col_1 <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_col_1 <= col_fu_92;
        end if; 
    end process;

    bottom_1_read_reg_573 <= bottom_1;
    buf_1_address0 <= zext_ln234_fu_399_p1(10 - 1 downto 0);

    buf_1_address1_assign_proc : process(cmp_i_i633_i_read_reg_565, cmp_i_i633_i, trunc_ln_read_reg_569, bottom_1_read_reg_573, zext_ln233_fu_387_p1, zext_ln231_fu_393_p1, ap_condition_492)
    begin
        if ((ap_const_boolean_1 = ap_condition_492)) then
            if (((cmp_i_i633_i = ap_const_lv1_1) and (trunc_ln_read_reg_569 = ap_const_lv2_1))) then 
                buf_1_address1 <= zext_ln231_fu_393_p1(10 - 1 downto 0);
            elsif (((cmp_i_i633_i_read_reg_565 = ap_const_lv1_0) and (bottom_1_read_reg_573 = ap_const_lv2_1))) then 
                buf_1_address1 <= zext_ln233_fu_387_p1(10 - 1 downto 0);
            else 
                buf_1_address1 <= "XXXXXXXXXX";
            end if;
        else 
            buf_1_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    buf_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_1_ce0 <= ap_const_logic_1;
        else 
            buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln225_reg_596, cmp_i_i633_i_read_reg_565, cmp_i_i633_i, ap_block_pp0_stage0_11001, trunc_ln_read_reg_569, bottom_1_read_reg_573)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i633_i = ap_const_lv1_1) and (icmp_ln225_reg_596 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln_read_reg_569 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i633_i_read_reg_565 = ap_const_lv1_0) and (icmp_ln225_reg_596 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (bottom_1_read_reg_573 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_1_ce1 <= ap_const_logic_1;
        else 
            buf_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_d1_assign_proc : process(rightRemappedMat_data_dout, cmp_i_i633_i_read_reg_565, cmp_i_i633_i, trunc_ln_read_reg_569, bottom_1_read_reg_573, ap_condition_492)
    begin
        if ((ap_const_boolean_1 = ap_condition_492)) then
            if (((cmp_i_i633_i = ap_const_lv1_1) and (trunc_ln_read_reg_569 = ap_const_lv2_1))) then 
                buf_1_d1 <= rightRemappedMat_data_dout;
            elsif (((cmp_i_i633_i_read_reg_565 = ap_const_lv1_0) and (bottom_1_read_reg_573 = ap_const_lv2_1))) then 
                buf_1_d1 <= ap_const_lv8_0;
            else 
                buf_1_d1 <= "XXXXXXXX";
            end if;
        else 
            buf_1_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln225_reg_596, cmp_i_i633_i_read_reg_565, cmp_i_i633_i, ap_block_pp0_stage0_11001, trunc_ln_read_reg_569, bottom_1_read_reg_573)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i633_i = ap_const_lv1_1) and (icmp_ln225_reg_596 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln_read_reg_569 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i633_i_read_reg_565 = ap_const_lv1_0) and (icmp_ln225_reg_596 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (bottom_1_read_reg_573 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_1_we1 <= ap_const_logic_1;
        else 
            buf_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2_address0 <= zext_ln234_fu_399_p1(10 - 1 downto 0);

    buf_2_address1_assign_proc : process(zext_ln233_fu_387_p1, zext_ln231_fu_393_p1, ap_condition_492, ap_condition_498, ap_condition_502)
    begin
        if ((ap_const_boolean_1 = ap_condition_492)) then
            if ((ap_const_boolean_1 = ap_condition_502)) then 
                buf_2_address1 <= zext_ln231_fu_393_p1(10 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_498)) then 
                buf_2_address1 <= zext_ln233_fu_387_p1(10 - 1 downto 0);
            else 
                buf_2_address1 <= "XXXXXXXXXX";
            end if;
        else 
            buf_2_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    buf_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_2_ce0 <= ap_const_logic_1;
        else 
            buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln225_reg_596, cmp_i_i633_i_read_reg_565, cmp_i_i633_i, ap_block_pp0_stage0_11001, trunc_ln_read_reg_569, bottom_1_read_reg_573)
    begin
        if (((not((trunc_ln_read_reg_569 = ap_const_lv2_0)) and not((trunc_ln_read_reg_569 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i633_i = ap_const_lv1_1) and (icmp_ln225_reg_596 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not((bottom_1_read_reg_573 = ap_const_lv2_0)) and not((bottom_1_read_reg_573 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i633_i_read_reg_565 = ap_const_lv1_0) and (icmp_ln225_reg_596 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_2_ce1 <= ap_const_logic_1;
        else 
            buf_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2_d1_assign_proc : process(rightRemappedMat_data_dout, ap_condition_492, ap_condition_498, ap_condition_502)
    begin
        if ((ap_const_boolean_1 = ap_condition_492)) then
            if ((ap_const_boolean_1 = ap_condition_502)) then 
                buf_2_d1 <= rightRemappedMat_data_dout;
            elsif ((ap_const_boolean_1 = ap_condition_498)) then 
                buf_2_d1 <= ap_const_lv8_0;
            else 
                buf_2_d1 <= "XXXXXXXX";
            end if;
        else 
            buf_2_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_2_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln225_reg_596, cmp_i_i633_i_read_reg_565, cmp_i_i633_i, ap_block_pp0_stage0_11001, trunc_ln_read_reg_569, bottom_1_read_reg_573)
    begin
        if (((not((trunc_ln_read_reg_569 = ap_const_lv2_0)) and not((trunc_ln_read_reg_569 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i633_i = ap_const_lv1_1) and (icmp_ln225_reg_596 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not((bottom_1_read_reg_573 = ap_const_lv2_0)) and not((bottom_1_read_reg_573 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i633_i_read_reg_565 = ap_const_lv1_0) and (icmp_ln225_reg_596 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_2_we1 <= ap_const_logic_1;
        else 
            buf_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_address0 <= zext_ln234_fu_399_p1(10 - 1 downto 0);

    buf_r_address1_assign_proc : process(cmp_i_i633_i_read_reg_565, cmp_i_i633_i, trunc_ln_read_reg_569, bottom_1_read_reg_573, zext_ln233_fu_387_p1, zext_ln231_fu_393_p1, ap_condition_492)
    begin
        if ((ap_const_boolean_1 = ap_condition_492)) then
            if (((cmp_i_i633_i = ap_const_lv1_1) and (trunc_ln_read_reg_569 = ap_const_lv2_0))) then 
                buf_r_address1 <= zext_ln231_fu_393_p1(10 - 1 downto 0);
            elsif (((cmp_i_i633_i_read_reg_565 = ap_const_lv1_0) and (bottom_1_read_reg_573 = ap_const_lv2_0))) then 
                buf_r_address1 <= zext_ln233_fu_387_p1(10 - 1 downto 0);
            else 
                buf_r_address1 <= "XXXXXXXXXX";
            end if;
        else 
            buf_r_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    buf_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_r_ce0 <= ap_const_logic_1;
        else 
            buf_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln225_reg_596, cmp_i_i633_i_read_reg_565, cmp_i_i633_i, ap_block_pp0_stage0_11001, trunc_ln_read_reg_569, bottom_1_read_reg_573)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i633_i = ap_const_lv1_1) and (icmp_ln225_reg_596 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln_read_reg_569 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i633_i_read_reg_565 = ap_const_lv1_0) and (icmp_ln225_reg_596 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (bottom_1_read_reg_573 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_r_ce1 <= ap_const_logic_1;
        else 
            buf_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_d1_assign_proc : process(rightRemappedMat_data_dout, cmp_i_i633_i_read_reg_565, cmp_i_i633_i, trunc_ln_read_reg_569, bottom_1_read_reg_573, ap_condition_492)
    begin
        if ((ap_const_boolean_1 = ap_condition_492)) then
            if (((cmp_i_i633_i = ap_const_lv1_1) and (trunc_ln_read_reg_569 = ap_const_lv2_0))) then 
                buf_r_d1 <= rightRemappedMat_data_dout;
            elsif (((cmp_i_i633_i_read_reg_565 = ap_const_lv1_0) and (bottom_1_read_reg_573 = ap_const_lv2_0))) then 
                buf_r_d1 <= ap_const_lv8_0;
            else 
                buf_r_d1 <= "XXXXXXXX";
            end if;
        else 
            buf_r_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_r_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln225_reg_596, cmp_i_i633_i_read_reg_565, cmp_i_i633_i, ap_block_pp0_stage0_11001, trunc_ln_read_reg_569, bottom_1_read_reg_573)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i633_i = ap_const_lv1_1) and (icmp_ln225_reg_596 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln_read_reg_569 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp_i_i633_i_read_reg_565 = ap_const_lv1_0) and (icmp_ln225_reg_596 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (bottom_1_read_reg_573 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_r_we1 <= ap_const_logic_1;
        else 
            buf_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    cmp_i_i633_i_read_reg_565 <= cmp_i_i633_i;
    col_2_fu_376_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_col_1) + unsigned(ap_const_lv13_1));

    grp_xFSobel3x3_1_1_0_4_s_fu_316_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp93)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp93) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_xFSobel3x3_1_1_0_4_s_fu_316_ap_ce <= ap_const_logic_1;
        else 
            grp_xFSobel3x3_1_1_0_4_s_fu_316_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln225_fu_370_p2 <= "1" when (unsigned(zext_ln225_fu_366_p1) < unsigned(img_width)) else "0";
    icmp_ln250_fu_405_p2 <= "1" when (col_1_reg_588_pp0_iter1_reg = ap_const_lv13_0) else "0";

    in_sobel_x_i_data_blk_n_assign_proc : process(ap_enable_reg_pp0_iter6, in_sobel_x_i_data_full_n, icmp_ln250_reg_615_pp0_iter5_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln250_reg_615_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            in_sobel_x_i_data_blk_n <= in_sobel_x_i_data_full_n;
        else 
            in_sobel_x_i_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_sobel_x_i_data_din <= GradientValuesX_reg_649;

    in_sobel_x_i_data_write_assign_proc : process(ap_enable_reg_pp0_iter6, icmp_ln250_reg_615_pp0_iter5_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln250_reg_615_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            in_sobel_x_i_data_write <= ap_const_logic_1;
        else 
            in_sobel_x_i_data_write <= ap_const_logic_0;
        end if; 
    end process;


    in_sobel_y_i_data_blk_n_assign_proc : process(ap_enable_reg_pp0_iter6, icmp_ln250_reg_615_pp0_iter5_reg, in_sobel_y_i_data_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln250_reg_615_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            in_sobel_y_i_data_blk_n <= in_sobel_y_i_data_full_n;
        else 
            in_sobel_y_i_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_sobel_y_i_data_din <= GradientValuesY_reg_654;

    in_sobel_y_i_data_write_assign_proc : process(ap_enable_reg_pp0_iter6, icmp_ln250_reg_615_pp0_iter5_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln250_reg_615_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            in_sobel_y_i_data_write <= ap_const_logic_1;
        else 
            in_sobel_y_i_data_write <= ap_const_logic_0;
        end if; 
    end process;


    rightRemappedMat_data_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, rightRemappedMat_data_empty_n, ap_predicate_op61_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op61_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rightRemappedMat_data_blk_n <= rightRemappedMat_data_empty_n;
        else 
            rightRemappedMat_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rightRemappedMat_data_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op61_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op61_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rightRemappedMat_data_read <= ap_const_logic_1;
        else 
            rightRemappedMat_data_read <= ap_const_logic_0;
        end if; 
    end process;

    src_buf1_1_out <= src_buf1_3_reg_637;

    src_buf1_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln225_reg_596_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln225_reg_596_pp0_iter4_reg = ap_const_lv1_0))) then 
            src_buf1_1_out_ap_vld <= ap_const_logic_1;
        else 
            src_buf1_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    src_buf1_out <= src_buf1_fu_96;

    src_buf1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln225_reg_596_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln225_reg_596_pp0_iter4_reg = ap_const_lv1_0))) then 
            src_buf1_out_ap_vld <= ap_const_logic_1;
        else 
            src_buf1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    src_buf2_out <= src_buf2_fu_100;

    src_buf2_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln225_reg_596_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln225_reg_596_pp0_iter4_reg = ap_const_lv1_0))) then 
            src_buf2_out_ap_vld <= ap_const_logic_1;
        else 
            src_buf2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    src_buf3_1_out <= src_buf3_1_fu_104;

    src_buf3_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln225_reg_596_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln225_reg_596_pp0_iter4_reg = ap_const_lv1_0))) then 
            src_buf3_1_out_ap_vld <= ap_const_logic_1;
        else 
            src_buf3_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    src_buf3_out <= src_buf3_3_reg_643;

    src_buf3_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln225_reg_596_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln225_reg_596_pp0_iter4_reg = ap_const_lv1_0))) then 
            src_buf3_out_ap_vld <= ap_const_logic_1;
        else 
            src_buf3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln_read_reg_569 <= trunc_ln;
    zext_ln225_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_col_1),16));
    zext_ln231_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_1_reg_588),64));
    zext_ln233_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_1_reg_588),64));
    zext_ln234_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_1_reg_588_pp0_iter1_reg),64));
end behav;
