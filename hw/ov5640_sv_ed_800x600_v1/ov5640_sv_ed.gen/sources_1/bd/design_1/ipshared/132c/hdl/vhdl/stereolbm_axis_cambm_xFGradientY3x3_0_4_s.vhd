-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stereolbm_axis_cambm_xFGradientY3x3_0_4_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    t0_val : IN STD_LOGIC_VECTOR (7 downto 0);
    t1_val : IN STD_LOGIC_VECTOR (7 downto 0);
    t2_val : IN STD_LOGIC_VECTOR (7 downto 0);
    b0_val : IN STD_LOGIC_VECTOR (7 downto 0);
    b1_val : IN STD_LOGIC_VECTOR (7 downto 0);
    b2_val : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (10 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of stereolbm_axis_cambm_xFGradientY3x3_0_4_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

attribute shreg_extract : string;
    signal b1_val_read_reg_133 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal A00_fu_74_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal A00_reg_138 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln113_fu_98_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln113_reg_143 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal M00_fu_54_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln109_1_fu_70_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln109_fu_66_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln110_1_fu_84_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln110_fu_80_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal S00_fu_88_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln110_2_fu_94_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln107_fu_62_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal M01_fu_104_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln108_fu_111_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln114_fu_118_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_pix_2_fu_121_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln109_2_fu_115_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_pix_fu_127_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal ap_return_int_reg : STD_LOGIC_VECTOR (10 downto 0);


begin




    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                A00_reg_138 <= A00_fu_74_p2;
                add_ln113_reg_143 <= add_ln113_fu_98_p2;
                b1_val_read_reg_133 <= b1_val;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= out_pix_fu_127_p2;
            end if;
        end if;
    end process;
    A00_fu_74_p2 <= std_logic_vector(unsigned(zext_ln109_1_fu_70_p1) + unsigned(zext_ln109_fu_66_p1));
    M00_fu_54_p3 <= (t1_val & ap_const_lv1_0);
    M01_fu_104_p3 <= (b1_val_read_reg_133 & ap_const_lv1_0);
    S00_fu_88_p2 <= std_logic_vector(unsigned(zext_ln110_1_fu_84_p1) + unsigned(zext_ln110_fu_80_p1));
    add_ln113_fu_98_p2 <= std_logic_vector(unsigned(zext_ln110_2_fu_94_p1) + unsigned(zext_ln107_fu_62_p1));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(out_pix_fu_127_p2, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= out_pix_fu_127_p2;
        else 
            ap_return <= "XXXXXXXXXXX";
        end if; 
    end process;

    out_pix_2_fu_121_p2 <= std_logic_vector(unsigned(zext_ln108_fu_111_p1) - unsigned(zext_ln114_fu_118_p1));
    out_pix_fu_127_p2 <= std_logic_vector(unsigned(out_pix_2_fu_121_p2) + unsigned(zext_ln109_2_fu_115_p1));
    zext_ln107_fu_62_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(M00_fu_54_p3),10));
    zext_ln108_fu_111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(M01_fu_104_p3),11));
    zext_ln109_1_fu_70_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b2_val),9));
    zext_ln109_2_fu_115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A00_reg_138),11));
    zext_ln109_fu_66_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b0_val),9));
    zext_ln110_1_fu_84_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t2_val),9));
    zext_ln110_2_fu_94_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(S00_fu_88_p2),10));
    zext_ln110_fu_80_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t0_val),9));
    zext_ln114_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_reg_143),11));
end behav;
