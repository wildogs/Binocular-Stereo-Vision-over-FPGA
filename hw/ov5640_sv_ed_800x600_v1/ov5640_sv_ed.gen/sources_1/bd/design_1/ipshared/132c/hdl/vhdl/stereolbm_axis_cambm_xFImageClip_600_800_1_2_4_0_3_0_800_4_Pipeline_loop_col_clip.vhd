-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stereolbm_axis_cambm_xFImageClip_600_800_1_2_4_0_3_0_800_4_Pipeline_loop_col_clip is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_sobel_x_data_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_sobel_x_data_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    in_sobel_x_data_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    in_sobel_x_data_empty_n : IN STD_LOGIC;
    in_sobel_x_data_read : OUT STD_LOGIC;
    left_clipped_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    left_clipped_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    left_clipped_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    left_clipped_full_n : IN STD_LOGIC;
    left_clipped_write : OUT STD_LOGIC;
    width_load : IN STD_LOGIC_VECTOR (15 downto 0);
    i : IN STD_LOGIC_VECTOR (14 downto 0);
    height_load : IN STD_LOGIC_VECTOR (15 downto 0);
    sub25_i : IN STD_LOGIC_VECTOR (31 downto 0);
    sbmstate_preFilterCap_load : IN STD_LOGIC_VECTOR (31 downto 0);
    cap_cast_i : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of stereolbm_axis_cambm_xFImageClip_600_800_1_2_4_0_3_0_800_4_Pipeline_loop_col_clip is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln630_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_sobel_x_data_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal left_clipped_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_9_reg_239 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_9_reg_239_pp0_iter1_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln630_reg_244 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln630_reg_244_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_248 : STD_LOGIC_VECTOR (15 downto 0);
    signal pix_1_xFImageClipUtility_1_s_fu_115_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal pix_1_reg_253 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln645_fu_157_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln645_reg_258 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_fu_193_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_reg_263 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_1_xFImageClipUtility_1_s_fu_115_ap_ready : STD_LOGIC;
    signal j_fu_62 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln630_fu_142_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_9 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln630_fu_132_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln645_fu_153_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln645_fu_153_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln643_fu_162_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln645_2_fu_175_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln645_1_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_178_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln645_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln645_fu_186_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component stereolbm_axis_cambm_xFImageClipUtility_1_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        i : IN STD_LOGIC_VECTOR (14 downto 0);
        j : IN STD_LOGIC_VECTOR (14 downto 0);
        height : IN STD_LOGIC_VECTOR (15 downto 0);
        width : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component stereolbm_axis_cambm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    pix_1_xFImageClipUtility_1_s_fu_115 : component stereolbm_axis_cambm_xFImageClipUtility_1_s
    port map (
        ap_ready => pix_1_xFImageClipUtility_1_s_fu_115_ap_ready,
        i => i,
        j => j_9_reg_239_pp0_iter1_reg,
        height => height_load,
        width => width_load,
        p_read => tmp_reg_248,
        ap_return => pix_1_xFImageClipUtility_1_s_fu_115_ap_return);

    flow_control_loop_pipe_sequential_init_U : component stereolbm_axis_cambm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    j_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln630_fu_136_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_62 <= add_ln630_fu_142_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_62 <= ap_const_lv15_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln645_reg_258 <= add_ln645_fu_157_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                p_reg_263 <= p_fu_193_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln630_reg_244 <= icmp_ln630_fu_136_p2;
                icmp_ln630_reg_244_pp0_iter1_reg <= icmp_ln630_reg_244;
                j_9_reg_239 <= ap_sig_allocacmp_j_9;
                j_9_reg_239_pp0_iter1_reg <= j_9_reg_239;
                tmp_reg_248 <= in_sobel_x_data_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln630_reg_244_pp0_iter1_reg = ap_const_lv1_1))) then
                pix_1_reg_253 <= pix_1_xFImageClipUtility_1_s_fu_115_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln630_fu_142_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_9) + unsigned(ap_const_lv15_1));
    add_ln645_fu_157_p2 <= std_logic_vector(unsigned(trunc_ln645_fu_153_p1) + unsigned(cap_cast_i));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, in_sobel_x_data_empty_n, left_clipped_full_n)
    begin
                ap_block_pp0_stage0_01001 <= (((left_clipped_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((in_sobel_x_data_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, in_sobel_x_data_empty_n, left_clipped_full_n)
    begin
                ap_block_pp0_stage0_11001 <= (((left_clipped_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((in_sobel_x_data_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, in_sobel_x_data_empty_n, left_clipped_full_n)
    begin
                ap_block_pp0_stage0_subdone <= (((left_clipped_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((in_sobel_x_data_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(in_sobel_x_data_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (in_sobel_x_data_empty_n = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter4_assign_proc : process(left_clipped_full_n)
    begin
                ap_block_state5_pp0_stage0_iter4 <= (left_clipped_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln630_fu_136_p2)
    begin
        if (((icmp_ln630_fu_136_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_9_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_62, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_9 <= ap_const_lv15_0;
        else 
            ap_sig_allocacmp_j_9 <= j_fu_62;
        end if; 
    end process;

    icmp_ln630_fu_136_p2 <= "1" when (signed(zext_ln630_fu_132_p1) < signed(width_load)) else "0";
    icmp_ln645_1_fu_170_p2 <= "1" when (signed(sext_ln643_fu_162_p1) > signed(sbmstate_preFilterCap_load)) else "0";
    icmp_ln645_fu_165_p2 <= "1" when (signed(sext_ln643_fu_162_p1) < signed(sub25_i)) else "0";

    in_sobel_x_data_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, in_sobel_x_data_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_sobel_x_data_blk_n <= in_sobel_x_data_empty_n;
        else 
            in_sobel_x_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_sobel_x_data_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_sobel_x_data_read <= ap_const_logic_1;
        else 
            in_sobel_x_data_read <= ap_const_logic_0;
        end if; 
    end process;


    left_clipped_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, left_clipped_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            left_clipped_blk_n <= left_clipped_full_n;
        else 
            left_clipped_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    left_clipped_din <= p_reg_263;

    left_clipped_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            left_clipped_write <= ap_const_logic_1;
        else 
            left_clipped_write <= ap_const_logic_0;
        end if; 
    end process;

    p_fu_193_p3 <= 
        ap_const_lv8_0 when (icmp_ln645_fu_165_p2(0) = '1') else 
        select_ln645_fu_186_p3;
    select_ln645_fu_186_p3 <= 
        shl_ln_fu_178_p3 when (icmp_ln645_1_fu_170_p2(0) = '1') else 
        add_ln645_reg_258;
        sext_ln643_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pix_1_reg_253),32));

    shl_ln_fu_178_p3 <= (trunc_ln645_2_fu_175_p1 & ap_const_lv1_0);
    trunc_ln645_2_fu_175_p1 <= sbmstate_preFilterCap_load(7 - 1 downto 0);
    trunc_ln645_fu_153_p0 <= pix_1_xFImageClipUtility_1_s_fu_115_ap_return;
    trunc_ln645_fu_153_p1 <= trunc_ln645_fu_153_p0(8 - 1 downto 0);
    zext_ln630_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_9),16));
end behav;
