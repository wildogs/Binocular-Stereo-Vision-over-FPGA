-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stereolbm_axis_cambm_Loop_VITIS_LOOP_70_2_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    distC_r_fix_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    distC_r_fix_ce0 : OUT STD_LOGIC;
    distC_r_fix_we0 : OUT STD_LOGIC;
    distC_r_fix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    distC_l_fix_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    distC_l_fix_ce0 : OUT STD_LOGIC;
    distC_l_fix_we0 : OUT STD_LOGIC;
    distC_l_fix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of stereolbm_axis_cambm_Loop_VITIS_LOOP_70_2_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_14 : STD_LOGIC_VECTOR (11 downto 0) := "000000010100";
    constant ap_const_lv12_FEC : STD_LOGIC_VECTOR (11 downto 0) := "111111101100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln70_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal distC_l_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal distC_l_ce0 : STD_LOGIC;
    signal distC_l_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal distC_r_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal distC_r_ce0 : STD_LOGIC;
    signal distC_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln70_fu_156_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_632 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_632_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_632_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_632_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_632_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal distC_l_load_reg_648 : STD_LOGIC_VECTOR (31 downto 0);
    signal distC_l_load_reg_648_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal distC_l_load_reg_648_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal distC_r_load_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal distC_r_load_reg_654_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal distC_r_load_reg_654_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln74_fu_171_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln74_reg_660 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_reg_665 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_670 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln74_1_fu_193_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln74_1_reg_675 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln75_fu_201_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln75_reg_680 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_306_reg_685 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_690 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln75_1_fu_223_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln75_1_reg_695 : STD_LOGIC_VECTOR (51 downto 0);
    signal select_ln74_fu_247_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln74_reg_700 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln74_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_reg_705 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_1_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_1_reg_712 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln74_1_fu_283_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln74_1_reg_717 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln74_2_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_2_reg_723 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln74_2_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln74_2_reg_729 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln74_4_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_4_reg_735 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln75_fu_337_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln75_reg_740 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln75_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_745 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_1_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_1_reg_752 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln75_1_fu_373_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln75_1_reg_757 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln75_2_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_2_reg_763 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln75_2_fu_387_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln75_2_reg_769 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln75_4_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_4_reg_775 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln74_6_fu_506_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln74_6_reg_780 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln75_6_fu_613_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln75_6_reg_785 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_72 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln70_fu_150_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_13 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln724_fu_167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln724_2_fu_197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln74_1_cast_fu_230_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln74_1_fu_237_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sub_ln74_fu_241_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln74_fu_227_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln74_1_fu_259_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln74_fu_271_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln74_2_fu_277_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_305_fu_301_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln75_1_cast_fu_320_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln75_1_fu_327_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sub_ln75_fu_331_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln75_fu_317_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln75_1_fu_349_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln75_fu_361_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln75_2_fu_367_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_308_fu_391_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln74_fu_407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln74_2_fu_415_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln74_fu_419_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln724_1_fu_428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_304_fu_431_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_3_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln74_3_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln74_7_fu_439_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln74_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln74_3_fu_460_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln74_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln74_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln74_4_fu_467_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln74_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln74_1_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln74_1_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln74_2_fu_447_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln74_5_fu_484_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln75_fu_514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln75_2_fu_522_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln75_fu_526_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln724_3_fu_535_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_307_fu_538_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_3_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln75_3_fu_531_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln75_7_fu_546_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln75_fu_562_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln75_3_fu_567_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln75_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln75_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln75_4_fu_574_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln75_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln75_1_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln75_1_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln75_2_fu_554_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln75_5_fu_591_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_128_ce : STD_LOGIC;
    signal grp_fu_132_ce : STD_LOGIC;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_191 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component stereolbm_axis_cambm_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component stereolbm_axis_cambm_Loop_VITIS_LOOP_70_2_proc_distC_l_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stereolbm_axis_cambm_Loop_VITIS_LOOP_70_2_proc_distC_r_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stereolbm_axis_cambm_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    distC_l_U : component stereolbm_axis_cambm_Loop_VITIS_LOOP_70_2_proc_distC_l_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => distC_l_address0,
        ce0 => distC_l_ce0,
        q0 => distC_l_q0);

    distC_r_U : component stereolbm_axis_cambm_Loop_VITIS_LOOP_70_2_proc_distC_r_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => distC_r_address0,
        ce0 => distC_r_ce0,
        q0 => distC_r_q0);

    fpext_32ns_64_2_no_dsp_1_U13 : component stereolbm_axis_cambm_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => distC_l_q0,
        ce => grp_fu_128_ce,
        dout => grp_fu_128_p1);

    fpext_32ns_64_2_no_dsp_1_U14 : component stereolbm_axis_cambm_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => distC_r_q0,
        ce => grp_fu_132_ce,
        dout => grp_fu_132_p1);

    flow_control_loop_pipe_U : component stereolbm_axis_cambm_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    i_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_191)) then
                if ((icmp_ln70_fu_144_p2 = ap_const_lv1_0)) then 
                    i_fu_72 <= add_ln70_fu_150_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_72 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                distC_l_load_reg_648 <= distC_l_q0;
                distC_r_load_reg_654 <= distC_r_q0;
                    zext_ln70_reg_632_pp0_iter1_reg(2 downto 0) <= zext_ln70_reg_632(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                distC_l_load_reg_648_pp0_iter2_reg <= distC_l_load_reg_648;
                distC_l_load_reg_648_pp0_iter3_reg <= distC_l_load_reg_648_pp0_iter2_reg;
                distC_r_load_reg_654_pp0_iter2_reg <= distC_r_load_reg_654;
                distC_r_load_reg_654_pp0_iter3_reg <= distC_r_load_reg_654_pp0_iter2_reg;
                icmp_ln74_1_reg_712 <= icmp_ln74_1_fu_265_p2;
                icmp_ln74_2_reg_723 <= icmp_ln74_2_fu_291_p2;
                icmp_ln74_4_reg_735 <= icmp_ln74_4_fu_311_p2;
                icmp_ln74_reg_705 <= icmp_ln74_fu_254_p2;
                icmp_ln75_1_reg_752 <= icmp_ln75_1_fu_355_p2;
                icmp_ln75_2_reg_763 <= icmp_ln75_2_fu_381_p2;
                icmp_ln75_4_reg_775 <= icmp_ln75_4_fu_401_p2;
                icmp_ln75_reg_745 <= icmp_ln75_fu_344_p2;
                select_ln74_1_reg_717 <= select_ln74_1_fu_283_p3;
                select_ln74_6_reg_780 <= select_ln74_6_fu_506_p3;
                select_ln74_reg_700 <= select_ln74_fu_247_p3;
                select_ln75_1_reg_757 <= select_ln75_1_fu_373_p3;
                select_ln75_6_reg_785 <= select_ln75_6_fu_613_p3;
                select_ln75_reg_740 <= select_ln75_fu_337_p3;
                tmp_15_reg_690 <= bitcast_ln724_2_fu_197_p1(62 downto 52);
                tmp_306_reg_685 <= bitcast_ln724_2_fu_197_p1(63 downto 63);
                tmp_reg_665 <= bitcast_ln724_fu_167_p1(63 downto 63);
                tmp_s_reg_670 <= bitcast_ln724_fu_167_p1(62 downto 52);
                trunc_ln74_1_reg_675 <= trunc_ln74_1_fu_193_p1;
                trunc_ln74_2_reg_729 <= trunc_ln74_2_fu_297_p1;
                trunc_ln74_reg_660 <= trunc_ln74_fu_171_p1;
                trunc_ln75_1_reg_695 <= trunc_ln75_1_fu_223_p1;
                trunc_ln75_2_reg_769 <= trunc_ln75_2_fu_387_p1;
                trunc_ln75_reg_680 <= trunc_ln75_fu_201_p1;
                    zext_ln70_reg_632_pp0_iter2_reg(2 downto 0) <= zext_ln70_reg_632_pp0_iter1_reg(2 downto 0);
                    zext_ln70_reg_632_pp0_iter3_reg(2 downto 0) <= zext_ln70_reg_632_pp0_iter2_reg(2 downto 0);
                    zext_ln70_reg_632_pp0_iter4_reg(2 downto 0) <= zext_ln70_reg_632_pp0_iter3_reg(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_fu_144_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln70_reg_632(2 downto 0) <= zext_ln70_fu_156_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln70_reg_632(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_reg_632_pp0_iter1_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_reg_632_pp0_iter2_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_reg_632_pp0_iter3_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_reg_632_pp0_iter4_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln70_fu_150_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_13) + unsigned(ap_const_lv3_1));
    add_ln74_fu_271_p2 <= std_logic_vector(unsigned(sub_ln74_1_fu_259_p2) + unsigned(ap_const_lv12_FEC));
    add_ln75_fu_361_p2 <= std_logic_vector(unsigned(sub_ln75_1_fu_349_p2) + unsigned(ap_const_lv12_FEC));
    and_ln74_1_fu_501_p2 <= (xor_ln74_1_fu_495_p2 and icmp_ln74_1_reg_712);
    and_ln74_fu_479_p2 <= (xor_ln74_fu_474_p2 and icmp_ln74_2_reg_723);
    and_ln75_1_fu_608_p2 <= (xor_ln75_1_fu_602_p2 and icmp_ln75_1_reg_752);
    and_ln75_fu_586_p2 <= (xor_ln75_fu_581_p2 and icmp_ln75_2_reg_763);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_191_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_191 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln70_fu_144_p2, ap_start_int)
    begin
        if (((icmp_ln70_fu_144_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_13_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_72, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_13 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_13 <= i_fu_72;
        end if; 
    end process;

    ashr_ln74_fu_419_p2 <= std_logic_vector(shift_right(signed(select_ln74_reg_700),to_integer(unsigned('0' & zext_ln74_2_fu_415_p1(31-1 downto 0)))));
    ashr_ln75_fu_526_p2 <= std_logic_vector(shift_right(signed(select_ln75_reg_740),to_integer(unsigned('0' & zext_ln75_2_fu_522_p1(31-1 downto 0)))));
    bitcast_ln724_1_fu_428_p1 <= distC_l_load_reg_648_pp0_iter3_reg;
    bitcast_ln724_2_fu_197_p1 <= grp_fu_132_p1;
    bitcast_ln724_3_fu_535_p1 <= distC_r_load_reg_654_pp0_iter3_reg;
    bitcast_ln724_fu_167_p1 <= grp_fu_128_p1;
    distC_l_address0 <= zext_ln70_fu_156_p1(3 - 1 downto 0);

    distC_l_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            distC_l_ce0 <= ap_const_logic_1;
        else 
            distC_l_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    distC_l_fix_address0 <= zext_ln70_reg_632_pp0_iter4_reg(3 - 1 downto 0);

    distC_l_fix_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            distC_l_fix_ce0 <= ap_const_logic_1;
        else 
            distC_l_fix_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    distC_l_fix_d0 <= select_ln74_6_reg_780;

    distC_l_fix_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            distC_l_fix_we0 <= ap_const_logic_1;
        else 
            distC_l_fix_we0 <= ap_const_logic_0;
        end if; 
    end process;

    distC_r_address0 <= zext_ln70_fu_156_p1(3 - 1 downto 0);

    distC_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            distC_r_ce0 <= ap_const_logic_1;
        else 
            distC_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    distC_r_fix_address0 <= zext_ln70_reg_632_pp0_iter4_reg(3 - 1 downto 0);

    distC_r_fix_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            distC_r_fix_ce0 <= ap_const_logic_1;
        else 
            distC_r_fix_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    distC_r_fix_d0 <= select_ln75_6_reg_785;

    distC_r_fix_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            distC_r_fix_we0 <= ap_const_logic_1;
        else 
            distC_r_fix_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_128_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_128_ce <= ap_const_logic_1;
        else 
            grp_fu_128_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_132_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_132_ce <= ap_const_logic_1;
        else 
            grp_fu_132_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln70_fu_144_p2 <= "1" when (ap_sig_allocacmp_i_13 = ap_const_lv3_5) else "0";
    icmp_ln74_1_fu_265_p2 <= "1" when (signed(sub_ln74_1_fu_259_p2) > signed(ap_const_lv12_14)) else "0";
    icmp_ln74_2_fu_291_p2 <= "1" when (sub_ln74_1_fu_259_p2 = ap_const_lv12_14) else "0";
    icmp_ln74_3_fu_410_p2 <= "1" when (unsigned(select_ln74_1_reg_717) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln74_4_fu_311_p2 <= "1" when (tmp_305_fu_301_p4 = ap_const_lv7_0) else "0";
    icmp_ln74_fu_254_p2 <= "1" when (trunc_ln74_reg_660 = ap_const_lv63_0) else "0";
    icmp_ln75_1_fu_355_p2 <= "1" when (signed(sub_ln75_1_fu_349_p2) > signed(ap_const_lv12_14)) else "0";
    icmp_ln75_2_fu_381_p2 <= "1" when (sub_ln75_1_fu_349_p2 = ap_const_lv12_14) else "0";
    icmp_ln75_3_fu_517_p2 <= "1" when (unsigned(select_ln75_1_reg_757) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln75_4_fu_401_p2 <= "1" when (tmp_308_fu_391_p4 = ap_const_lv7_0) else "0";
    icmp_ln75_fu_344_p2 <= "1" when (trunc_ln75_reg_680 = ap_const_lv63_0) else "0";
    or_ln74_fu_491_p2 <= (icmp_ln74_reg_705 or icmp_ln74_2_reg_723);
    or_ln75_fu_598_p2 <= (icmp_ln75_reg_745 or icmp_ln75_2_reg_763);
    select_ln74_1_fu_283_p3 <= 
        add_ln74_fu_271_p2 when (icmp_ln74_1_fu_265_p2(0) = '1') else 
        sub_ln74_2_fu_277_p2;
    select_ln74_2_fu_447_p3 <= 
        trunc_ln74_3_fu_424_p1 when (icmp_ln74_3_fu_410_p2(0) = '1') else 
        select_ln74_7_fu_439_p3;
    select_ln74_3_fu_460_p3 <= 
        shl_ln74_fu_455_p2 when (icmp_ln74_4_reg_735(0) = '1') else 
        ap_const_lv32_0;
    select_ln74_4_fu_467_p3 <= 
        ap_const_lv32_0 when (icmp_ln74_reg_705(0) = '1') else 
        select_ln74_3_fu_460_p3;
    select_ln74_5_fu_484_p3 <= 
        trunc_ln74_2_reg_729 when (and_ln74_fu_479_p2(0) = '1') else 
        select_ln74_4_fu_467_p3;
    select_ln74_6_fu_506_p3 <= 
        select_ln74_2_fu_447_p3 when (and_ln74_1_fu_501_p2(0) = '1') else 
        select_ln74_5_fu_484_p3;
    select_ln74_7_fu_439_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_304_fu_431_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln74_fu_247_p3 <= 
        sub_ln74_fu_241_p2 when (tmp_reg_665(0) = '1') else 
        zext_ln74_1_fu_237_p1;
    select_ln75_1_fu_373_p3 <= 
        add_ln75_fu_361_p2 when (icmp_ln75_1_fu_355_p2(0) = '1') else 
        sub_ln75_2_fu_367_p2;
    select_ln75_2_fu_554_p3 <= 
        trunc_ln75_3_fu_531_p1 when (icmp_ln75_3_fu_517_p2(0) = '1') else 
        select_ln75_7_fu_546_p3;
    select_ln75_3_fu_567_p3 <= 
        shl_ln75_fu_562_p2 when (icmp_ln75_4_reg_775(0) = '1') else 
        ap_const_lv32_0;
    select_ln75_4_fu_574_p3 <= 
        ap_const_lv32_0 when (icmp_ln75_reg_745(0) = '1') else 
        select_ln75_3_fu_567_p3;
    select_ln75_5_fu_591_p3 <= 
        trunc_ln75_2_reg_769 when (and_ln75_fu_586_p2(0) = '1') else 
        select_ln75_4_fu_574_p3;
    select_ln75_6_fu_613_p3 <= 
        select_ln75_2_fu_554_p3 when (and_ln75_1_fu_608_p2(0) = '1') else 
        select_ln75_5_fu_591_p3;
    select_ln75_7_fu_546_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_307_fu_538_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln75_fu_337_p3 <= 
        sub_ln75_fu_331_p2 when (tmp_306_reg_685(0) = '1') else 
        zext_ln75_1_fu_327_p1;
        sext_ln74_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln74_1_reg_717),32));

        sext_ln75_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln75_1_reg_757),32));

    shl_ln74_fu_455_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln74_2_reg_729),to_integer(unsigned('0' & sext_ln74_fu_407_p1(31-1 downto 0)))));
    shl_ln75_fu_562_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln75_2_reg_769),to_integer(unsigned('0' & sext_ln75_fu_514_p1(31-1 downto 0)))));
    sub_ln74_1_fu_259_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln74_fu_227_p1));
    sub_ln74_2_fu_277_p2 <= std_logic_vector(unsigned(ap_const_lv12_14) - unsigned(sub_ln74_1_fu_259_p2));
    sub_ln74_fu_241_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln74_1_fu_237_p1));
    sub_ln75_1_fu_349_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln75_fu_317_p1));
    sub_ln75_2_fu_367_p2 <= std_logic_vector(unsigned(ap_const_lv12_14) - unsigned(sub_ln75_1_fu_349_p2));
    sub_ln75_fu_331_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln75_1_fu_327_p1));
    tmp_304_fu_431_p3 <= bitcast_ln724_1_fu_428_p1(31 downto 31);
    tmp_305_fu_301_p4 <= select_ln74_1_fu_283_p3(11 downto 5);
    tmp_307_fu_538_p3 <= bitcast_ln724_3_fu_535_p1(31 downto 31);
    tmp_308_fu_391_p4 <= select_ln75_1_fu_373_p3(11 downto 5);
    trunc_ln74_1_fu_193_p1 <= bitcast_ln724_fu_167_p1(52 - 1 downto 0);
    trunc_ln74_2_fu_297_p1 <= select_ln74_fu_247_p3(32 - 1 downto 0);
    trunc_ln74_3_fu_424_p1 <= ashr_ln74_fu_419_p2(32 - 1 downto 0);
    trunc_ln74_fu_171_p1 <= bitcast_ln724_fu_167_p1(63 - 1 downto 0);
    trunc_ln75_1_fu_223_p1 <= bitcast_ln724_2_fu_197_p1(52 - 1 downto 0);
    trunc_ln75_2_fu_387_p1 <= select_ln75_fu_337_p3(32 - 1 downto 0);
    trunc_ln75_3_fu_531_p1 <= ashr_ln75_fu_526_p2(32 - 1 downto 0);
    trunc_ln75_fu_201_p1 <= bitcast_ln724_2_fu_197_p1(63 - 1 downto 0);
    xor_ln74_1_fu_495_p2 <= (or_ln74_fu_491_p2 xor ap_const_lv1_1);
    xor_ln74_fu_474_p2 <= (icmp_ln74_reg_705 xor ap_const_lv1_1);
    xor_ln75_1_fu_602_p2 <= (or_ln75_fu_598_p2 xor ap_const_lv1_1);
    xor_ln75_fu_581_p2 <= (icmp_ln75_reg_745 xor ap_const_lv1_1);
    zext_ln70_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_13),64));
    zext_ln74_1_cast_fu_230_p3 <= (ap_const_lv1_1 & trunc_ln74_1_reg_675);
    zext_ln74_1_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln74_1_cast_fu_230_p3),54));
    zext_ln74_2_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln74_fu_407_p1),54));
    zext_ln74_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_670),12));
    zext_ln75_1_cast_fu_320_p3 <= (ap_const_lv1_1 & trunc_ln75_1_reg_695);
    zext_ln75_1_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln75_1_cast_fu_320_p3),54));
    zext_ln75_2_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln75_fu_514_p1),54));
    zext_ln75_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_reg_690),12));
end behav;
