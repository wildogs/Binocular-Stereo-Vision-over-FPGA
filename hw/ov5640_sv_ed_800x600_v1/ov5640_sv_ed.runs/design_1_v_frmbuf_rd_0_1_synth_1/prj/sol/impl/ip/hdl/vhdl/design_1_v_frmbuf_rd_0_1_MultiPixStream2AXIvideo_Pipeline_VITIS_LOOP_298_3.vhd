-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity design_1_v_frmbuf_rd_0_1_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_298_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    img_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    img_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    img_empty_n : IN STD_LOGIC;
    img_read : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    sof : IN STD_LOGIC_VECTOR (0 downto 0);
    cols : IN STD_LOGIC_VECTOR (12 downto 0);
    sub_cast : IN STD_LOGIC_VECTOR (12 downto 0);
    map_2_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    map_1_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    map_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of design_1_v_frmbuf_rd_0_1_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_298_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln298_reg_319 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln298_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal img_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal m_axis_video_TDATA_blk_n : STD_LOGIC;
    signal sof_2_reg_173 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal axi_last_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_reg_323 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_98 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal j_2_fu_207_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln298_fu_197_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_cast_cast_fu_185_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal pix_fu_224_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_248_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_248_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_259_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_259_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_270_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_270_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_270_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_259_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_248_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_234 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component design_1_v_frmbuf_rd_0_1_mux_3_2_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component design_1_v_frmbuf_rd_0_1_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_3_2_8_1_1_U42 : component design_1_v_frmbuf_rd_0_1_mux_3_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => pix_fu_224_p1,
        din1 => tmp_4_fu_248_p2,
        din2 => tmp_4_fu_248_p3,
        din3 => map_2_cast,
        dout => tmp_4_fu_248_p5);

    mux_3_2_8_1_1_U43 : component design_1_v_frmbuf_rd_0_1_mux_3_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => pix_fu_224_p1,
        din1 => tmp_5_fu_259_p2,
        din2 => tmp_5_fu_259_p3,
        din3 => map_1_cast,
        dout => tmp_5_fu_259_p5);

    mux_3_2_8_1_1_U44 : component design_1_v_frmbuf_rd_0_1_mux_3_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => pix_fu_224_p1,
        din1 => tmp_6_fu_270_p2,
        din2 => tmp_6_fu_270_p3,
        din3 => map_cast,
        dout => tmp_6_fu_270_p5);

    flow_control_loop_pipe_sequential_init_U : component design_1_v_frmbuf_rd_0_1_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                    if (((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                        ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    axi_last_reg_323_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axi_last_reg_323 <= ap_const_lv1_0;
            else
                if (((icmp_ln298_fu_201_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    axi_last_reg_323 <= axi_last_fu_213_p2;
                end if; 
            end if;
        end if;
    end process;


    icmp_ln298_reg_319_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                icmp_ln298_reg_319 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    icmp_ln298_reg_319 <= icmp_ln298_fu_201_p2;
                end if; 
            end if;
        end if;
    end process;


    j_fu_98_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                j_fu_98 <= ap_const_lv13_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    if (((icmp_ln298_fu_201_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                        j_fu_98 <= j_2_fu_207_p2;
                    elsif ((ap_loop_init = ap_const_logic_1)) then 
                        j_fu_98 <= ap_const_lv13_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    sof_2_reg_173_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                sof_2_reg_173 <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                    if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                        sof_2_reg_173 <= sof;
                    elsif ((ap_const_boolean_1 = ap_condition_234)) then 
                        sof_2_reg_173 <= ap_const_lv1_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, img_empty_n, icmp_ln298_reg_319, m_axis_video_TREADY)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((m_axis_video_TREADY = ap_const_logic_0) and (icmp_ln298_reg_319 = ap_const_lv1_0)) or ((icmp_ln298_reg_319 = ap_const_lv1_0) and (img_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, img_empty_n, icmp_ln298_reg_319, m_axis_video_TREADY, ap_block_state2_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((m_axis_video_TREADY = ap_const_logic_0) and (icmp_ln298_reg_319 = ap_const_lv1_0)) or ((icmp_ln298_reg_319 = ap_const_lv1_0) and (img_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, img_empty_n, icmp_ln298_reg_319, m_axis_video_TREADY, ap_block_state2_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((m_axis_video_TREADY = ap_const_logic_0) and (icmp_ln298_reg_319 = ap_const_lv1_0)) or ((icmp_ln298_reg_319 = ap_const_lv1_0) and (img_empty_n = ap_const_logic_0))));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(icmp_ln298_reg_319, m_axis_video_TREADY)
    begin
                ap_block_state2_io <= ((m_axis_video_TREADY = ap_const_logic_0) and (icmp_ln298_reg_319 = ap_const_lv1_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(img_empty_n, icmp_ln298_reg_319, m_axis_video_TREADY)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((m_axis_video_TREADY = ap_const_logic_0) and (icmp_ln298_reg_319 = ap_const_lv1_0)) or ((icmp_ln298_reg_319 = ap_const_lv1_0) and (img_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_234_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln298_reg_319, ap_block_pp0_stage0_11001)
    begin
                ap_condition_234 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln298_reg_319 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln298_fu_201_p2)
    begin
        if (((icmp_ln298_fu_201_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_98)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_1 <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_98;
        end if; 
    end process;

    axi_last_fu_213_p2 <= "1" when (zext_ln298_fu_197_p1 = sub_cast_cast_fu_185_p1) else "0";
    icmp_ln298_fu_201_p2 <= "1" when (ap_sig_allocacmp_j_1 = cols) else "0";

    img_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, img_empty_n, icmp_ln298_reg_319, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln298_reg_319 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_blk_n <= img_empty_n;
        else 
            img_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln298_reg_319, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln298_reg_319 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_read <= ap_const_logic_1;
        else 
            img_read <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_207_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_1) + unsigned(ap_const_lv13_1));
    m_axis_video_TDATA <= ((tmp_6_fu_270_p5 & tmp_5_fu_259_p5) & tmp_4_fu_248_p5);

    m_axis_video_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln298_reg_319, m_axis_video_TREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln298_reg_319 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_TDATA_blk_n <= m_axis_video_TREADY;
        else 
            m_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_video_TDEST <= ap_const_lv1_0;
    m_axis_video_TID <= ap_const_lv1_0;
    m_axis_video_TKEEP <= ap_const_lv3_7;
    m_axis_video_TLAST <= axi_last_reg_323;
    m_axis_video_TSTRB <= ap_const_lv3_0;
    m_axis_video_TUSER <= sof_2_reg_173;

    m_axis_video_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln298_reg_319, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln298_reg_319 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_TVALID <= ap_const_logic_1;
        else 
            m_axis_video_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    pix_fu_224_p1 <= img_dout(8 - 1 downto 0);
        sub_cast_cast_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_cast),14));

    tmp_4_fu_248_p2 <= img_dout(15 downto 8);
    tmp_4_fu_248_p3 <= img_dout(23 downto 16);
    tmp_5_fu_259_p2 <= img_dout(15 downto 8);
    tmp_5_fu_259_p3 <= img_dout(23 downto 16);
    tmp_6_fu_270_p2 <= img_dout(15 downto 8);
    tmp_6_fu_270_p3 <= img_dout(23 downto 16);
    zext_ln298_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_1),14));
end behav;
