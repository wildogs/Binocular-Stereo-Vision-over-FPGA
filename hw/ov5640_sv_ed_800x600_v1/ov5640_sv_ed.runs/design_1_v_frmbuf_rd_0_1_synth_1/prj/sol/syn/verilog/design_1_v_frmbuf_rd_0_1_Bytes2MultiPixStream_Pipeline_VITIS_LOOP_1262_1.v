// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module design_1_v_frmbuf_rd_0_1_Bytes2MultiPixStream_Pipeline_VITIS_LOOP_1262_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_din,
        img_num_data_valid,
        img_fifo_cap,
        img_full_n,
        img_write,
        trunc_ln1249_1,
        icmp_ln1252,
        cmp125_6,
        cmp125_5,
        cmp125_4,
        cmp125_3,
        cmp125_2,
        bytePlanes_dout,
        bytePlanes_num_data_valid,
        bytePlanes_fifo_cap,
        bytePlanes_empty_n,
        bytePlanes_read,
        sub121_cast3,
        cmp125_1
);

parameter    ap_ST_fsm_pp0_stage0 = 8'd1;
parameter    ap_ST_fsm_pp0_stage1 = 8'd2;
parameter    ap_ST_fsm_pp0_stage2 = 8'd4;
parameter    ap_ST_fsm_pp0_stage3 = 8'd8;
parameter    ap_ST_fsm_pp0_stage4 = 8'd16;
parameter    ap_ST_fsm_pp0_stage5 = 8'd32;
parameter    ap_ST_fsm_pp0_stage6 = 8'd64;
parameter    ap_ST_fsm_pp0_stage7 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [23:0] img_din;
input  [1:0] img_num_data_valid;
input  [1:0] img_fifo_cap;
input   img_full_n;
output   img_write;
input  [12:0] trunc_ln1249_1;
input  [0:0] icmp_ln1252;
input  [0:0] cmp125_6;
input  [0:0] cmp125_5;
input  [0:0] cmp125_4;
input  [0:0] cmp125_3;
input  [0:0] cmp125_2;
input  [63:0] bytePlanes_dout;
input  [10:0] bytePlanes_num_data_valid;
input  [10:0] bytePlanes_fifo_cap;
input   bytePlanes_empty_n;
output   bytePlanes_read;
input  [12:0] sub121_cast3;
input  [0:0] cmp125_1;

reg ap_idle;
reg[23:0] img_din;
reg img_write;
reg bytePlanes_read;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] or_ln1278_6_reg_428;
reg    ap_block_state9_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1262_fu_185_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage7;
reg   [0:0] icmp_ln1262_reg_400;
reg   [0:0] or_ln1278_5_reg_424;
reg    ap_predicate_op80_write_state8;
reg    ap_block_state8_pp0_stage7_iter0;
reg    ap_block_pp0_stage7_subdone;
reg    bytePlanes_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    img_blk_n;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg   [0:0] or_ln1278_reg_404;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
reg   [0:0] or_ln1278_1_reg_408;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
reg   [0:0] or_ln1278_2_reg_412;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
reg   [0:0] or_ln1278_3_reg_416;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
reg   [0:0] or_ln1278_4_reg_420;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] or_ln1278_fu_207_p2;
wire   [0:0] or_ln1278_1_fu_213_p2;
wire   [0:0] or_ln1278_2_fu_219_p2;
wire   [0:0] or_ln1278_3_fu_225_p2;
wire   [0:0] or_ln1278_4_fu_231_p2;
wire   [0:0] or_ln1278_5_fu_237_p2;
wire   [0:0] or_ln1278_6_fu_243_p2;
reg   [7:0] tmp_s_reg_432;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg   [7:0] tmp_1_reg_437;
reg   [7:0] tmp_2_reg_442;
reg   [7:0] tmp_3_reg_447;
reg   [7:0] tmp_4_reg_452;
reg   [7:0] tmp_5_reg_457;
reg   [7:0] tmp_6_reg_462;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [12:0] x_fu_102;
wire   [12:0] x_2_fu_191_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_x_1;
wire   [23:0] p_s_fu_258_p3;
reg    ap_block_pp0_stage1_01001;
wire   [23:0] p_1_fu_337_p3;
reg    ap_predicate_op65_write_state3;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_01001;
wire   [23:0] p_2_fu_345_p3;
reg    ap_predicate_op68_write_state4;
reg    ap_block_state4_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_01001;
wire   [23:0] p_3_fu_353_p3;
reg    ap_predicate_op71_write_state5;
reg    ap_block_state5_pp0_stage4_iter0;
reg    ap_block_pp0_stage4_01001;
wire   [23:0] p_4_fu_361_p3;
reg    ap_predicate_op74_write_state6;
reg    ap_block_state6_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_01001;
wire   [23:0] p_5_fu_369_p3;
reg    ap_predicate_op77_write_state7;
reg    ap_block_state7_pp0_stage6_iter0;
reg    ap_block_pp0_stage6_01001;
wire   [23:0] p_6_fu_377_p3;
reg    ap_block_pp0_stage7_01001;
wire   [23:0] p_0_fu_385_p3;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage2_11001;
reg    ap_block_pp0_stage3_11001;
reg    ap_block_pp0_stage4_11001;
reg    ap_block_pp0_stage5_11001;
reg    ap_block_pp0_stage6_11001;
reg    ap_block_pp0_stage7_11001;
wire   [13:0] x_cast_fu_197_p1;
wire  signed [13:0] sub121_cast3_cast_fu_173_p1;
wire   [0:0] cmp122_fu_201_p2;
wire   [7:0] trunc_ln1274_fu_254_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 or_ln1278_6_reg_428 = 1'd0;
#0 icmp_ln1262_reg_400 = 1'd0;
#0 or_ln1278_5_reg_424 = 1'd0;
#0 or_ln1278_reg_404 = 1'd0;
#0 or_ln1278_1_reg_408 = 1'd0;
#0 or_ln1278_2_reg_412 = 1'd0;
#0 or_ln1278_3_reg_416 = 1'd0;
#0 or_ln1278_4_reg_420 = 1'd0;
#0 tmp_s_reg_432 = 8'd0;
#0 tmp_1_reg_437 = 8'd0;
#0 tmp_2_reg_442 = 8'd0;
#0 tmp_3_reg_447 = 8'd0;
#0 tmp_4_reg_452 = 8'd0;
#0 tmp_5_reg_457 = 8'd0;
#0 tmp_6_reg_462 = 8'd0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 x_fu_102 = 13'd0;
#0 ap_done_reg = 1'b0;
end

design_1_v_frmbuf_rd_0_1_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        icmp_ln1262_reg_400 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            icmp_ln1262_reg_400 <= icmp_ln1262_fu_185_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        or_ln1278_1_reg_408 <= 1'd0;
    end else begin
        if (((icmp_ln1262_fu_185_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            or_ln1278_1_reg_408 <= or_ln1278_1_fu_213_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        or_ln1278_2_reg_412 <= 1'd0;
    end else begin
        if (((icmp_ln1262_fu_185_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            or_ln1278_2_reg_412 <= or_ln1278_2_fu_219_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        or_ln1278_3_reg_416 <= 1'd0;
    end else begin
        if (((icmp_ln1262_fu_185_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            or_ln1278_3_reg_416 <= or_ln1278_3_fu_225_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        or_ln1278_4_reg_420 <= 1'd0;
    end else begin
        if (((icmp_ln1262_fu_185_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            or_ln1278_4_reg_420 <= or_ln1278_4_fu_231_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        or_ln1278_5_reg_424 <= 1'd0;
    end else begin
        if (((icmp_ln1262_fu_185_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            or_ln1278_5_reg_424 <= or_ln1278_5_fu_237_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        or_ln1278_6_reg_428 <= 1'd0;
    end else begin
        if (((icmp_ln1262_fu_185_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            or_ln1278_6_reg_428 <= or_ln1278_6_fu_243_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        or_ln1278_reg_404 <= 1'd0;
    end else begin
        if (((icmp_ln1262_fu_185_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            or_ln1278_reg_404 <= or_ln1278_fu_207_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_1_reg_437 <= 8'd0;
    end else begin
        if (((icmp_ln1262_reg_400 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            tmp_1_reg_437 <= {{bytePlanes_dout[23:16]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_2_reg_442 <= 8'd0;
    end else begin
        if (((icmp_ln1262_reg_400 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            tmp_2_reg_442 <= {{bytePlanes_dout[31:24]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_3_reg_447 <= 8'd0;
    end else begin
        if (((icmp_ln1262_reg_400 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            tmp_3_reg_447 <= {{bytePlanes_dout[39:32]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_4_reg_452 <= 8'd0;
    end else begin
        if (((icmp_ln1262_reg_400 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            tmp_4_reg_452 <= {{bytePlanes_dout[47:40]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_5_reg_457 <= 8'd0;
    end else begin
        if (((icmp_ln1262_reg_400 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            tmp_5_reg_457 <= {{bytePlanes_dout[55:48]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_6_reg_462 <= 8'd0;
    end else begin
        if (((icmp_ln1262_reg_400 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            tmp_6_reg_462 <= {{bytePlanes_dout[63:56]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_s_reg_432 <= 8'd0;
    end else begin
        if (((icmp_ln1262_reg_400 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            tmp_s_reg_432 <= {{bytePlanes_dout[15:8]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_fu_102 <= 13'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            if (((icmp_ln1262_fu_185_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                x_fu_102 <= x_2_fu_191_p2;
            end else if ((ap_loop_init == 1'b1)) begin
                x_fu_102 <= 13'd0;
            end
        end
    end
end

always @ (*) begin
    if (((icmp_ln1262_fu_185_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage7_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_x_1 = 13'd0;
    end else begin
        ap_sig_allocacmp_x_1 = x_fu_102;
    end
end

always @ (*) begin
    if (((icmp_ln1262_reg_400 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bytePlanes_blk_n = bytePlanes_empty_n;
    end else begin
        bytePlanes_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1262_reg_400 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bytePlanes_read = 1'b1;
    end else begin
        bytePlanes_read = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op80_write_state8 == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((icmp_ln1262_reg_400 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (or_ln1278_4_reg_420 == 1'd1)) | ((icmp_ln1262_reg_400 == 1'd0) & (1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (or_ln1278_3_reg_416 == 1'd1)) | ((icmp_ln1262_reg_400 == 1'd0) & (1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (or_ln1278_2_reg_412 == 1'd1)) | ((icmp_ln1262_reg_400 == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (or_ln1278_1_reg_408 == 1'd1)) | ((icmp_ln1262_reg_400 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (or_ln1278_reg_404 == 1'd1)) | ((icmp_ln1262_reg_400 == 1'd0) & (1'b0 == ap_block_pp0_stage1) 
    & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (or_ln1278_6_reg_428 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        img_blk_n = img_full_n;
    end else begin
        img_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (or_ln1278_6_reg_428 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_din = p_0_fu_385_p3;
    end else if (((ap_predicate_op80_write_state8 == 1'b1) & (1'b0 == ap_block_pp0_stage7_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        img_din = p_6_fu_377_p3;
    end else if (((1'b0 == ap_block_pp0_stage6_01001) & (ap_predicate_op77_write_state7 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        img_din = p_5_fu_369_p3;
    end else if (((1'b0 == ap_block_pp0_stage5_01001) & (ap_predicate_op74_write_state6 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        img_din = p_4_fu_361_p3;
    end else if (((1'b0 == ap_block_pp0_stage4_01001) & (ap_predicate_op71_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        img_din = p_3_fu_353_p3;
    end else if (((1'b0 == ap_block_pp0_stage3_01001) & (ap_predicate_op68_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        img_din = p_2_fu_345_p3;
    end else if (((1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op65_write_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        img_din = p_1_fu_337_p3;
    end else if (((icmp_ln1262_reg_400 == 1'd0) & (1'b0 == ap_block_pp0_stage1_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        img_din = p_s_fu_258_p3;
    end else begin
        img_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op80_write_state8 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((icmp_ln1262_reg_400 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_predicate_op77_write_state7 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_predicate_op74_write_state6 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_predicate_op71_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_predicate_op68_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op65_write_state3 == 1'b1) & (1'b1 
    == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (or_ln1278_6_reg_428 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        img_write = 1'b1;
    end else begin
        img_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((or_ln1278_6_reg_428 == 1'd1) & (img_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((or_ln1278_6_reg_428 == 1'd1) & (img_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((or_ln1278_6_reg_428 == 1'd1) & (img_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln1262_reg_400 == 1'd0) & (img_full_n == 1'b0)) | ((bytePlanes_empty_n == 1'b0) & (icmp_ln1262_reg_400 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln1262_reg_400 == 1'd0) & (img_full_n == 1'b0)) | ((bytePlanes_empty_n == 1'b0) & (icmp_ln1262_reg_400 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln1262_reg_400 == 1'd0) & (img_full_n == 1'b0)) | ((bytePlanes_empty_n == 1'b0) & (icmp_ln1262_reg_400 == 1'd0))));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((img_full_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op65_write_state3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((img_full_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op65_write_state3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((img_full_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op65_write_state3 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = ((img_full_n == 1'b0) & (ap_predicate_op68_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((img_full_n == 1'b0) & (ap_predicate_op68_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((img_full_n == 1'b0) & (ap_predicate_op68_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_01001 = ((img_full_n == 1'b0) & (ap_predicate_op71_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((img_full_n == 1'b0) & (ap_predicate_op71_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((img_full_n == 1'b0) & (ap_predicate_op71_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_01001 = ((img_full_n == 1'b0) & (ap_predicate_op74_write_state6 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((img_full_n == 1'b0) & (ap_predicate_op74_write_state6 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((img_full_n == 1'b0) & (ap_predicate_op74_write_state6 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_01001 = ((img_full_n == 1'b0) & (ap_predicate_op77_write_state7 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((img_full_n == 1'b0) & (ap_predicate_op77_write_state7 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((img_full_n == 1'b0) & (ap_predicate_op77_write_state7 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_01001 = ((ap_predicate_op80_write_state8 == 1'b1) & (img_full_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((ap_predicate_op80_write_state8 == 1'b1) & (img_full_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((ap_predicate_op80_write_state8 == 1'b1) & (img_full_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (((icmp_ln1262_reg_400 == 1'd0) & (img_full_n == 1'b0)) | ((bytePlanes_empty_n == 1'b0) & (icmp_ln1262_reg_400 == 1'd0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = ((img_full_n == 1'b0) & (ap_predicate_op65_write_state3 == 1'b1));
end

always @ (*) begin
    ap_block_state4_pp0_stage3_iter0 = ((img_full_n == 1'b0) & (ap_predicate_op68_write_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage4_iter0 = ((img_full_n == 1'b0) & (ap_predicate_op71_write_state5 == 1'b1));
end

always @ (*) begin
    ap_block_state6_pp0_stage5_iter0 = ((img_full_n == 1'b0) & (ap_predicate_op74_write_state6 == 1'b1));
end

always @ (*) begin
    ap_block_state7_pp0_stage6_iter0 = ((img_full_n == 1'b0) & (ap_predicate_op77_write_state7 == 1'b1));
end

always @ (*) begin
    ap_block_state8_pp0_stage7_iter0 = ((ap_predicate_op80_write_state8 == 1'b1) & (img_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = ((or_ln1278_6_reg_428 == 1'd1) & (img_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op65_write_state3 = ((icmp_ln1262_reg_400 == 1'd0) & (or_ln1278_reg_404 == 1'd1));
end

always @ (*) begin
    ap_predicate_op68_write_state4 = ((icmp_ln1262_reg_400 == 1'd0) & (or_ln1278_1_reg_408 == 1'd1));
end

always @ (*) begin
    ap_predicate_op71_write_state5 = ((icmp_ln1262_reg_400 == 1'd0) & (or_ln1278_2_reg_412 == 1'd1));
end

always @ (*) begin
    ap_predicate_op74_write_state6 = ((icmp_ln1262_reg_400 == 1'd0) & (or_ln1278_3_reg_416 == 1'd1));
end

always @ (*) begin
    ap_predicate_op77_write_state7 = ((icmp_ln1262_reg_400 == 1'd0) & (or_ln1278_4_reg_420 == 1'd1));
end

always @ (*) begin
    ap_predicate_op80_write_state8 = ((or_ln1278_5_reg_424 == 1'd1) & (icmp_ln1262_reg_400 == 1'd0));
end

assign cmp122_fu_201_p2 = (($signed(x_cast_fu_197_p1) < $signed(sub121_cast3_cast_fu_173_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1262_fu_185_p2 = ((ap_sig_allocacmp_x_1 == trunc_ln1249_1) ? 1'b1 : 1'b0);

assign or_ln1278_1_fu_213_p2 = (cmp125_2 | cmp122_fu_201_p2);

assign or_ln1278_2_fu_219_p2 = (cmp125_3 | cmp122_fu_201_p2);

assign or_ln1278_3_fu_225_p2 = (cmp125_4 | cmp122_fu_201_p2);

assign or_ln1278_4_fu_231_p2 = (cmp125_5 | cmp122_fu_201_p2);

assign or_ln1278_5_fu_237_p2 = (cmp125_6 | cmp122_fu_201_p2);

assign or_ln1278_6_fu_243_p2 = (icmp_ln1252 | cmp122_fu_201_p2);

assign or_ln1278_fu_207_p2 = (cmp125_1 | cmp122_fu_201_p2);

assign p_0_fu_385_p3 = {{16'd32896}, {tmp_6_reg_462}};

assign p_1_fu_337_p3 = {{16'd32896}, {tmp_s_reg_432}};

assign p_2_fu_345_p3 = {{16'd32896}, {tmp_1_reg_437}};

assign p_3_fu_353_p3 = {{16'd32896}, {tmp_2_reg_442}};

assign p_4_fu_361_p3 = {{16'd32896}, {tmp_3_reg_447}};

assign p_5_fu_369_p3 = {{16'd32896}, {tmp_4_reg_452}};

assign p_6_fu_377_p3 = {{16'd32896}, {tmp_5_reg_457}};

assign p_s_fu_258_p3 = {{16'd32896}, {trunc_ln1274_fu_254_p1}};

assign sub121_cast3_cast_fu_173_p1 = $signed(sub121_cast3);

assign trunc_ln1274_fu_254_p1 = bytePlanes_dout[7:0];

assign x_2_fu_191_p2 = (ap_sig_allocacmp_x_1 + 13'd1);

assign x_cast_fu_197_p1 = ap_sig_allocacmp_x_1;

endmodule //design_1_v_frmbuf_rd_0_1_Bytes2MultiPixStream_Pipeline_VITIS_LOOP_1262_1
