// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module design_1_v_frmbuf_rd_2_0_AXIMMvideo2Bytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_mm_video_AWVALID,
        m_axi_mm_video_AWREADY,
        m_axi_mm_video_AWADDR,
        m_axi_mm_video_AWID,
        m_axi_mm_video_AWLEN,
        m_axi_mm_video_AWSIZE,
        m_axi_mm_video_AWBURST,
        m_axi_mm_video_AWLOCK,
        m_axi_mm_video_AWCACHE,
        m_axi_mm_video_AWPROT,
        m_axi_mm_video_AWQOS,
        m_axi_mm_video_AWREGION,
        m_axi_mm_video_AWUSER,
        m_axi_mm_video_WVALID,
        m_axi_mm_video_WREADY,
        m_axi_mm_video_WDATA,
        m_axi_mm_video_WSTRB,
        m_axi_mm_video_WLAST,
        m_axi_mm_video_WID,
        m_axi_mm_video_WUSER,
        m_axi_mm_video_ARVALID,
        m_axi_mm_video_ARREADY,
        m_axi_mm_video_ARADDR,
        m_axi_mm_video_ARID,
        m_axi_mm_video_ARLEN,
        m_axi_mm_video_ARSIZE,
        m_axi_mm_video_ARBURST,
        m_axi_mm_video_ARLOCK,
        m_axi_mm_video_ARCACHE,
        m_axi_mm_video_ARPROT,
        m_axi_mm_video_ARQOS,
        m_axi_mm_video_ARREGION,
        m_axi_mm_video_ARUSER,
        m_axi_mm_video_RVALID,
        m_axi_mm_video_RREADY,
        m_axi_mm_video_RDATA,
        m_axi_mm_video_RLAST,
        m_axi_mm_video_RID,
        m_axi_mm_video_RFIFONUM,
        m_axi_mm_video_RUSER,
        m_axi_mm_video_RRESP,
        m_axi_mm_video_BVALID,
        m_axi_mm_video_BREADY,
        m_axi_mm_video_BRESP,
        m_axi_mm_video_BID,
        m_axi_mm_video_BUSER,
        srcImg,
        bytePlanes_din,
        bytePlanes_num_data_valid,
        bytePlanes_fifo_cap,
        bytePlanes_full_n,
        bytePlanes_write,
        p_read,
        p_read1,
        p_read2,
        height_c9_din,
        height_c9_num_data_valid,
        height_c9_fifo_cap,
        height_c9_full_n,
        height_c9_write,
        WidthInBytes_c_din,
        WidthInBytes_c_num_data_valid,
        WidthInBytes_c_fifo_cap,
        WidthInBytes_c_full_n,
        WidthInBytes_c_write
);

parameter    ap_ST_fsm_state1 = 111'd1;
parameter    ap_ST_fsm_state2 = 111'd2;
parameter    ap_ST_fsm_state3 = 111'd4;
parameter    ap_ST_fsm_state4 = 111'd8;
parameter    ap_ST_fsm_state5 = 111'd16;
parameter    ap_ST_fsm_state6 = 111'd32;
parameter    ap_ST_fsm_state7 = 111'd64;
parameter    ap_ST_fsm_state8 = 111'd128;
parameter    ap_ST_fsm_state9 = 111'd256;
parameter    ap_ST_fsm_state10 = 111'd512;
parameter    ap_ST_fsm_state11 = 111'd1024;
parameter    ap_ST_fsm_state12 = 111'd2048;
parameter    ap_ST_fsm_state13 = 111'd4096;
parameter    ap_ST_fsm_state14 = 111'd8192;
parameter    ap_ST_fsm_state15 = 111'd16384;
parameter    ap_ST_fsm_state16 = 111'd32768;
parameter    ap_ST_fsm_state17 = 111'd65536;
parameter    ap_ST_fsm_state18 = 111'd131072;
parameter    ap_ST_fsm_state19 = 111'd262144;
parameter    ap_ST_fsm_state20 = 111'd524288;
parameter    ap_ST_fsm_state21 = 111'd1048576;
parameter    ap_ST_fsm_state22 = 111'd2097152;
parameter    ap_ST_fsm_state23 = 111'd4194304;
parameter    ap_ST_fsm_state24 = 111'd8388608;
parameter    ap_ST_fsm_state25 = 111'd16777216;
parameter    ap_ST_fsm_state26 = 111'd33554432;
parameter    ap_ST_fsm_state27 = 111'd67108864;
parameter    ap_ST_fsm_state28 = 111'd134217728;
parameter    ap_ST_fsm_state29 = 111'd268435456;
parameter    ap_ST_fsm_state30 = 111'd536870912;
parameter    ap_ST_fsm_state31 = 111'd1073741824;
parameter    ap_ST_fsm_state32 = 111'd2147483648;
parameter    ap_ST_fsm_state33 = 111'd4294967296;
parameter    ap_ST_fsm_state34 = 111'd8589934592;
parameter    ap_ST_fsm_state35 = 111'd17179869184;
parameter    ap_ST_fsm_state36 = 111'd34359738368;
parameter    ap_ST_fsm_state37 = 111'd68719476736;
parameter    ap_ST_fsm_state38 = 111'd137438953472;
parameter    ap_ST_fsm_state39 = 111'd274877906944;
parameter    ap_ST_fsm_state40 = 111'd549755813888;
parameter    ap_ST_fsm_state41 = 111'd1099511627776;
parameter    ap_ST_fsm_state42 = 111'd2199023255552;
parameter    ap_ST_fsm_state43 = 111'd4398046511104;
parameter    ap_ST_fsm_state44 = 111'd8796093022208;
parameter    ap_ST_fsm_state45 = 111'd17592186044416;
parameter    ap_ST_fsm_state46 = 111'd35184372088832;
parameter    ap_ST_fsm_state47 = 111'd70368744177664;
parameter    ap_ST_fsm_state48 = 111'd140737488355328;
parameter    ap_ST_fsm_state49 = 111'd281474976710656;
parameter    ap_ST_fsm_state50 = 111'd562949953421312;
parameter    ap_ST_fsm_state51 = 111'd1125899906842624;
parameter    ap_ST_fsm_state52 = 111'd2251799813685248;
parameter    ap_ST_fsm_state53 = 111'd4503599627370496;
parameter    ap_ST_fsm_state54 = 111'd9007199254740992;
parameter    ap_ST_fsm_state55 = 111'd18014398509481984;
parameter    ap_ST_fsm_state56 = 111'd36028797018963968;
parameter    ap_ST_fsm_state57 = 111'd72057594037927936;
parameter    ap_ST_fsm_state58 = 111'd144115188075855872;
parameter    ap_ST_fsm_state59 = 111'd288230376151711744;
parameter    ap_ST_fsm_state60 = 111'd576460752303423488;
parameter    ap_ST_fsm_state61 = 111'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 111'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 111'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 111'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 111'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 111'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 111'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 111'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 111'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 111'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 111'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 111'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 111'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 111'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 111'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 111'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 111'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 111'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 111'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 111'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 111'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 111'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 111'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 111'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 111'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 111'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 111'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 111'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 111'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 111'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 111'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 111'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 111'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 111'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 111'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 111'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 111'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 111'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 111'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 111'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 111'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 111'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 111'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 111'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 111'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 111'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 111'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 111'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 111'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 111'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 111'd1298074214633706907132624082305024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_mm_video_AWVALID;
input   m_axi_mm_video_AWREADY;
output  [31:0] m_axi_mm_video_AWADDR;
output  [0:0] m_axi_mm_video_AWID;
output  [31:0] m_axi_mm_video_AWLEN;
output  [2:0] m_axi_mm_video_AWSIZE;
output  [1:0] m_axi_mm_video_AWBURST;
output  [1:0] m_axi_mm_video_AWLOCK;
output  [3:0] m_axi_mm_video_AWCACHE;
output  [2:0] m_axi_mm_video_AWPROT;
output  [3:0] m_axi_mm_video_AWQOS;
output  [3:0] m_axi_mm_video_AWREGION;
output  [0:0] m_axi_mm_video_AWUSER;
output   m_axi_mm_video_WVALID;
input   m_axi_mm_video_WREADY;
output  [63:0] m_axi_mm_video_WDATA;
output  [7:0] m_axi_mm_video_WSTRB;
output   m_axi_mm_video_WLAST;
output  [0:0] m_axi_mm_video_WID;
output  [0:0] m_axi_mm_video_WUSER;
output   m_axi_mm_video_ARVALID;
input   m_axi_mm_video_ARREADY;
output  [31:0] m_axi_mm_video_ARADDR;
output  [0:0] m_axi_mm_video_ARID;
output  [31:0] m_axi_mm_video_ARLEN;
output  [2:0] m_axi_mm_video_ARSIZE;
output  [1:0] m_axi_mm_video_ARBURST;
output  [1:0] m_axi_mm_video_ARLOCK;
output  [3:0] m_axi_mm_video_ARCACHE;
output  [2:0] m_axi_mm_video_ARPROT;
output  [3:0] m_axi_mm_video_ARQOS;
output  [3:0] m_axi_mm_video_ARREGION;
output  [0:0] m_axi_mm_video_ARUSER;
input   m_axi_mm_video_RVALID;
output   m_axi_mm_video_RREADY;
input  [63:0] m_axi_mm_video_RDATA;
input   m_axi_mm_video_RLAST;
input  [0:0] m_axi_mm_video_RID;
input  [6:0] m_axi_mm_video_RFIFONUM;
input  [0:0] m_axi_mm_video_RUSER;
input  [1:0] m_axi_mm_video_RRESP;
input   m_axi_mm_video_BVALID;
output   m_axi_mm_video_BREADY;
input  [1:0] m_axi_mm_video_BRESP;
input  [0:0] m_axi_mm_video_BID;
input  [0:0] m_axi_mm_video_BUSER;
input  [31:0] srcImg;
output  [63:0] bytePlanes_din;
input  [10:0] bytePlanes_num_data_valid;
input  [10:0] bytePlanes_fifo_cap;
input   bytePlanes_full_n;
output   bytePlanes_write;
input  [11:0] p_read;
input  [14:0] p_read1;
input  [15:0] p_read2;
output  [11:0] height_c9_din;
input  [1:0] height_c9_num_data_valid;
input  [1:0] height_c9_fifo_cap;
input   height_c9_full_n;
output   height_c9_write;
output  [14:0] WidthInBytes_c_din;
input  [1:0] WidthInBytes_c_num_data_valid;
input  [1:0] WidthInBytes_c_fifo_cap;
input   WidthInBytes_c_full_n;
output   WidthInBytes_c_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_mm_video_ARVALID;
reg[31:0] m_axi_mm_video_ARADDR;
reg[0:0] m_axi_mm_video_ARID;
reg[31:0] m_axi_mm_video_ARLEN;
reg[2:0] m_axi_mm_video_ARSIZE;
reg[1:0] m_axi_mm_video_ARBURST;
reg[1:0] m_axi_mm_video_ARLOCK;
reg[3:0] m_axi_mm_video_ARCACHE;
reg[2:0] m_axi_mm_video_ARPROT;
reg[3:0] m_axi_mm_video_ARQOS;
reg[3:0] m_axi_mm_video_ARREGION;
reg[0:0] m_axi_mm_video_ARUSER;
reg m_axi_mm_video_RREADY;
reg bytePlanes_write;
reg height_c9_write;
reg WidthInBytes_c_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [110:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mm_video_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    height_c9_blk_n;
reg    WidthInBytes_c_blk_n;
reg    ap_block_state1;
wire   [11:0] div_fu_188_p4;
reg   [11:0] div_reg_319;
wire   [31:0] div_cast1_fu_198_p1;
reg   [31:0] div_cast1_reg_324;
wire   [24:0] zext_ln432_fu_212_p1;
reg   [24:0] zext_ln432_reg_329;
reg   [28:0] trunc_ln1_reg_337;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln432_fu_229_p2;
wire    grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_ap_start;
wire    grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_ap_done;
wire    grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_ap_idle;
wire    grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_ap_ready;
wire    grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWVALID;
wire   [31:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWADDR;
wire   [0:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWID;
wire   [31:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWLEN;
wire   [2:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWSIZE;
wire   [1:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWBURST;
wire   [1:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWLOCK;
wire   [3:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWCACHE;
wire   [2:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWPROT;
wire   [3:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWQOS;
wire   [3:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWREGION;
wire   [0:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWUSER;
wire    grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_WVALID;
wire   [63:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_WDATA;
wire   [7:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_WSTRB;
wire    grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_WLAST;
wire   [0:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_WID;
wire   [0:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_WUSER;
wire    grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARVALID;
wire   [31:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARADDR;
wire   [0:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARID;
wire   [31:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARLEN;
wire   [2:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARSIZE;
wire   [1:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARBURST;
wire   [1:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARLOCK;
wire   [3:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARCACHE;
wire   [2:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARPROT;
wire   [3:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARQOS;
wire   [3:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARREGION;
wire   [0:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARUSER;
wire    grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_RREADY;
wire    grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_BREADY;
wire   [63:0] grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_bytePlanes_din;
wire    grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_bytePlanes_write;
reg    grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_ap_start_reg;
wire    ap_CS_fsm_state110;
wire    ap_CS_fsm_state111;
wire  signed [31:0] sext_ln437_fu_285_p1;
reg   [11:0] y_fu_118;
wire   [11:0] y_4_fu_234_p2;
reg   [24:0] offset_fu_122;
wire   [24:0] add_ln445_fu_270_p2;
wire   [14:0] sub_fu_182_p2;
wire   [12:0] div8_fu_202_p4;
wire   [27:0] shl_ln_fu_243_p3;
wire   [31:0] zext_ln437_fu_251_p1;
wire   [31:0] add_ln437_fu_255_p2;
reg   [110:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
wire    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
wire    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
wire    ap_ST_fsm_state95_blk;
wire    ap_ST_fsm_state96_blk;
wire    ap_ST_fsm_state97_blk;
wire    ap_ST_fsm_state98_blk;
wire    ap_ST_fsm_state99_blk;
wire    ap_ST_fsm_state100_blk;
wire    ap_ST_fsm_state101_blk;
wire    ap_ST_fsm_state102_blk;
wire    ap_ST_fsm_state103_blk;
wire    ap_ST_fsm_state104_blk;
wire    ap_ST_fsm_state105_blk;
wire    ap_ST_fsm_state106_blk;
wire    ap_ST_fsm_state107_blk;
wire    ap_ST_fsm_state108_blk;
wire    ap_ST_fsm_state109_blk;
wire    ap_ST_fsm_state110_blk;
reg    ap_ST_fsm_state111_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 111'd1;
#0 div_reg_319 = 12'd0;
#0 div_cast1_reg_324 = 32'd0;
#0 zext_ln432_reg_329 = 25'd0;
#0 trunc_ln1_reg_337 = 29'd0;
#0 grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_ap_start_reg = 1'b0;
#0 y_fu_118 = 12'd0;
#0 offset_fu_122 = 25'd0;
end

design_1_v_frmbuf_rd_2_0_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1 grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_ap_start),
    .ap_done(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_ap_done),
    .ap_idle(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_ap_idle),
    .ap_ready(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_ap_ready),
    .m_axi_mm_video_AWVALID(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWVALID),
    .m_axi_mm_video_AWREADY(1'b0),
    .m_axi_mm_video_AWADDR(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWADDR),
    .m_axi_mm_video_AWID(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWID),
    .m_axi_mm_video_AWLEN(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWLEN),
    .m_axi_mm_video_AWSIZE(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWSIZE),
    .m_axi_mm_video_AWBURST(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWBURST),
    .m_axi_mm_video_AWLOCK(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWLOCK),
    .m_axi_mm_video_AWCACHE(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWCACHE),
    .m_axi_mm_video_AWPROT(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWPROT),
    .m_axi_mm_video_AWQOS(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWQOS),
    .m_axi_mm_video_AWREGION(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWREGION),
    .m_axi_mm_video_AWUSER(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_AWUSER),
    .m_axi_mm_video_WVALID(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_WVALID),
    .m_axi_mm_video_WREADY(1'b0),
    .m_axi_mm_video_WDATA(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_WDATA),
    .m_axi_mm_video_WSTRB(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_WSTRB),
    .m_axi_mm_video_WLAST(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_WLAST),
    .m_axi_mm_video_WID(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_WID),
    .m_axi_mm_video_WUSER(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_WUSER),
    .m_axi_mm_video_ARVALID(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARVALID),
    .m_axi_mm_video_ARREADY(m_axi_mm_video_ARREADY),
    .m_axi_mm_video_ARADDR(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARADDR),
    .m_axi_mm_video_ARID(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARID),
    .m_axi_mm_video_ARLEN(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARLEN),
    .m_axi_mm_video_ARSIZE(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARSIZE),
    .m_axi_mm_video_ARBURST(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARBURST),
    .m_axi_mm_video_ARLOCK(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARLOCK),
    .m_axi_mm_video_ARCACHE(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARCACHE),
    .m_axi_mm_video_ARPROT(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARPROT),
    .m_axi_mm_video_ARQOS(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARQOS),
    .m_axi_mm_video_ARREGION(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARREGION),
    .m_axi_mm_video_ARUSER(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARUSER),
    .m_axi_mm_video_RVALID(m_axi_mm_video_RVALID),
    .m_axi_mm_video_RREADY(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_RREADY),
    .m_axi_mm_video_RDATA(m_axi_mm_video_RDATA),
    .m_axi_mm_video_RLAST(m_axi_mm_video_RLAST),
    .m_axi_mm_video_RID(m_axi_mm_video_RID),
    .m_axi_mm_video_RFIFONUM(m_axi_mm_video_RFIFONUM),
    .m_axi_mm_video_RUSER(m_axi_mm_video_RUSER),
    .m_axi_mm_video_RRESP(m_axi_mm_video_RRESP),
    .m_axi_mm_video_BVALID(1'b0),
    .m_axi_mm_video_BREADY(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_BREADY),
    .m_axi_mm_video_BRESP(2'd0),
    .m_axi_mm_video_BID(1'd0),
    .m_axi_mm_video_BUSER(1'd0),
    .bytePlanes_din(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_bytePlanes_din),
    .bytePlanes_num_data_valid(11'd0),
    .bytePlanes_fifo_cap(11'd0),
    .bytePlanes_full_n(bytePlanes_full_n),
    .bytePlanes_write(grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_bytePlanes_write),
    .sext_ln437(trunc_ln1_reg_337),
    .div(div_reg_319)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln432_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                div_cast1_reg_324[0] <= 1'b0;
        div_cast1_reg_324[1] <= 1'b0;
        div_cast1_reg_324[2] <= 1'b0;
        div_cast1_reg_324[3] <= 1'b0;
        div_cast1_reg_324[4] <= 1'b0;
        div_cast1_reg_324[5] <= 1'b0;
        div_cast1_reg_324[6] <= 1'b0;
        div_cast1_reg_324[7] <= 1'b0;
        div_cast1_reg_324[8] <= 1'b0;
        div_cast1_reg_324[9] <= 1'b0;
        div_cast1_reg_324[10] <= 1'b0;
        div_cast1_reg_324[11] <= 1'b0;
    end else begin
        if ((~((1'b0 == WidthInBytes_c_full_n) | (height_c9_full_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                        div_cast1_reg_324[11 : 0] <= div_cast1_fu_198_p1[11 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        div_reg_319 <= 12'd0;
    end else begin
        if ((~((1'b0 == WidthInBytes_c_full_n) | (height_c9_full_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            div_reg_319 <= {{sub_fu_182_p2[14:3]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state110)) begin
            grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_ap_start_reg <= 1'b1;
        end else if ((grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_ap_ready == 1'b1)) begin
            grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        offset_fu_122 <= 25'd0;
    end else begin
        if ((~((1'b0 == WidthInBytes_c_full_n) | (height_c9_full_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            offset_fu_122 <= 25'd0;
        end else if (((icmp_ln432_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            offset_fu_122 <= add_ln445_fu_270_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        trunc_ln1_reg_337 <= 29'd0;
    end else begin
        if (((icmp_ln432_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            trunc_ln1_reg_337 <= {{add_ln437_fu_255_p2[31:3]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        y_fu_118 <= 12'd0;
    end else begin
        if ((~((1'b0 == WidthInBytes_c_full_n) | (height_c9_full_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            y_fu_118 <= 12'd0;
        end else if (((icmp_ln432_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            y_fu_118 <= y_4_fu_234_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                zext_ln432_reg_329[0] <= 1'b0;
        zext_ln432_reg_329[1] <= 1'b0;
        zext_ln432_reg_329[2] <= 1'b0;
        zext_ln432_reg_329[3] <= 1'b0;
        zext_ln432_reg_329[4] <= 1'b0;
        zext_ln432_reg_329[5] <= 1'b0;
        zext_ln432_reg_329[6] <= 1'b0;
        zext_ln432_reg_329[7] <= 1'b0;
        zext_ln432_reg_329[8] <= 1'b0;
        zext_ln432_reg_329[9] <= 1'b0;
        zext_ln432_reg_329[10] <= 1'b0;
        zext_ln432_reg_329[11] <= 1'b0;
        zext_ln432_reg_329[12] <= 1'b0;
    end else begin
        if ((~((1'b0 == WidthInBytes_c_full_n) | (height_c9_full_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                        zext_ln432_reg_329[12 : 0] <= zext_ln432_fu_212_p1[12 : 0];
        end
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        WidthInBytes_c_blk_n = WidthInBytes_c_full_n;
    end else begin
        WidthInBytes_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == WidthInBytes_c_full_n) | (height_c9_full_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        WidthInBytes_c_write = 1'b1;
    end else begin
        WidthInBytes_c_write = 1'b0;
    end
end

assign ap_ST_fsm_state100_blk = 1'b0;

assign ap_ST_fsm_state101_blk = 1'b0;

assign ap_ST_fsm_state102_blk = 1'b0;

assign ap_ST_fsm_state103_blk = 1'b0;

assign ap_ST_fsm_state104_blk = 1'b0;

assign ap_ST_fsm_state105_blk = 1'b0;

assign ap_ST_fsm_state106_blk = 1'b0;

assign ap_ST_fsm_state107_blk = 1'b0;

assign ap_ST_fsm_state108_blk = 1'b0;

assign ap_ST_fsm_state109_blk = 1'b0;

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state110_blk = 1'b0;

always @ (*) begin
    if ((grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_ap_done == 1'b0)) begin
        ap_ST_fsm_state111_blk = 1'b1;
    end else begin
        ap_ST_fsm_state111_blk = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if (((1'b0 == WidthInBytes_c_full_n) | (height_c9_full_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

always @ (*) begin
    if ((m_axi_mm_video_ARREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state87_blk = 1'b0;

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state90_blk = 1'b0;

assign ap_ST_fsm_state91_blk = 1'b0;

assign ap_ST_fsm_state92_blk = 1'b0;

assign ap_ST_fsm_state93_blk = 1'b0;

assign ap_ST_fsm_state94_blk = 1'b0;

assign ap_ST_fsm_state95_blk = 1'b0;

assign ap_ST_fsm_state96_blk = 1'b0;

assign ap_ST_fsm_state97_blk = 1'b0;

assign ap_ST_fsm_state98_blk = 1'b0;

assign ap_ST_fsm_state99_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln432_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln432_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        bytePlanes_write = grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_bytePlanes_write;
    end else begin
        bytePlanes_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_c9_blk_n = height_c9_full_n;
    end else begin
        height_c9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == WidthInBytes_c_full_n) | (height_c9_full_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_c9_write = 1'b1;
    end else begin
        height_c9_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (m_axi_mm_video_ARREADY == 1'b1))) begin
        m_axi_mm_video_ARADDR = sext_ln437_fu_285_p1;
    end else if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110))) begin
        m_axi_mm_video_ARADDR = grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARADDR;
    end else begin
        m_axi_mm_video_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110))) begin
        m_axi_mm_video_ARBURST = grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARBURST;
    end else begin
        m_axi_mm_video_ARBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110))) begin
        m_axi_mm_video_ARCACHE = grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARCACHE;
    end else begin
        m_axi_mm_video_ARCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110))) begin
        m_axi_mm_video_ARID = grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARID;
    end else begin
        m_axi_mm_video_ARID = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (m_axi_mm_video_ARREADY == 1'b1))) begin
        m_axi_mm_video_ARLEN = div_cast1_reg_324;
    end else if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110))) begin
        m_axi_mm_video_ARLEN = grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARLEN;
    end else begin
        m_axi_mm_video_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110))) begin
        m_axi_mm_video_ARLOCK = grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARLOCK;
    end else begin
        m_axi_mm_video_ARLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110))) begin
        m_axi_mm_video_ARPROT = grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARPROT;
    end else begin
        m_axi_mm_video_ARPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110))) begin
        m_axi_mm_video_ARQOS = grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARQOS;
    end else begin
        m_axi_mm_video_ARQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110))) begin
        m_axi_mm_video_ARREGION = grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARREGION;
    end else begin
        m_axi_mm_video_ARREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110))) begin
        m_axi_mm_video_ARSIZE = grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARSIZE;
    end else begin
        m_axi_mm_video_ARSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110))) begin
        m_axi_mm_video_ARUSER = grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARUSER;
    end else begin
        m_axi_mm_video_ARUSER = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (m_axi_mm_video_ARREADY == 1'b1))) begin
        m_axi_mm_video_ARVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110))) begin
        m_axi_mm_video_ARVALID = grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_ARVALID;
    end else begin
        m_axi_mm_video_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110))) begin
        m_axi_mm_video_RREADY = grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_m_axi_mm_video_RREADY;
    end else begin
        m_axi_mm_video_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mm_video_blk_n_AR = m_axi_mm_video_ARREADY;
    end else begin
        mm_video_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == WidthInBytes_c_full_n) | (height_c9_full_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln432_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (m_axi_mm_video_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            if (((grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state111))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state111;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign WidthInBytes_c_din = p_read1;

assign add_ln437_fu_255_p2 = (zext_ln437_fu_251_p1 + srcImg);

assign add_ln445_fu_270_p2 = (zext_ln432_reg_329 + offset_fu_122);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((1'b0 == WidthInBytes_c_full_n) | (height_c9_full_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign bytePlanes_din = grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_bytePlanes_din;

assign div8_fu_202_p4 = {{p_read2[15:3]}};

assign div_cast1_fu_198_p1 = div_fu_188_p4;

assign div_fu_188_p4 = {{sub_fu_182_p2[14:3]}};

assign grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_ap_start = grp_AXIMMvideo2Bytes_Pipeline_VITIS_LOOP_437_1_fu_172_ap_start_reg;

assign height_c9_din = p_read;

assign icmp_ln432_fu_229_p2 = ((y_fu_118 == p_read) ? 1'b1 : 1'b0);

assign m_axi_mm_video_AWADDR = 32'd0;

assign m_axi_mm_video_AWBURST = 2'd0;

assign m_axi_mm_video_AWCACHE = 4'd0;

assign m_axi_mm_video_AWID = 1'd0;

assign m_axi_mm_video_AWLEN = 32'd0;

assign m_axi_mm_video_AWLOCK = 2'd0;

assign m_axi_mm_video_AWPROT = 3'd0;

assign m_axi_mm_video_AWQOS = 4'd0;

assign m_axi_mm_video_AWREGION = 4'd0;

assign m_axi_mm_video_AWSIZE = 3'd0;

assign m_axi_mm_video_AWUSER = 1'd0;

assign m_axi_mm_video_AWVALID = 1'b0;

assign m_axi_mm_video_BREADY = 1'b0;

assign m_axi_mm_video_WDATA = 64'd0;

assign m_axi_mm_video_WID = 1'd0;

assign m_axi_mm_video_WLAST = 1'b0;

assign m_axi_mm_video_WSTRB = 8'd0;

assign m_axi_mm_video_WUSER = 1'd0;

assign m_axi_mm_video_WVALID = 1'b0;

assign sext_ln437_fu_285_p1 = $signed(trunc_ln1_reg_337);

assign shl_ln_fu_243_p3 = {{offset_fu_122}, {3'd0}};

assign sub_fu_182_p2 = (p_read1 + 15'd7);

assign y_4_fu_234_p2 = (y_fu_118 + 12'd1);

assign zext_ln432_fu_212_p1 = div8_fu_202_p4;

assign zext_ln437_fu_251_p1 = shl_ln_fu_243_p3;

always @ (posedge ap_clk) begin
    div_cast1_reg_324[31:12] <= 20'b00000000000000000000;
    zext_ln432_reg_329[24:13] <= 12'b000000000000;
end

endmodule //design_1_v_frmbuf_rd_2_0_AXIMMvideo2Bytes
