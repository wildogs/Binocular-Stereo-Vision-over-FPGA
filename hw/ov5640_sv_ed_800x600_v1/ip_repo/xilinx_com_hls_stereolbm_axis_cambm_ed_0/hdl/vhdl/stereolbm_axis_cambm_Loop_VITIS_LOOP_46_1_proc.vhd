-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stereolbm_axis_cambm_Loop_VITIS_LOOP_46_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    irA_r_fix_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    irA_r_fix_ce0 : OUT STD_LOGIC;
    irA_r_fix_we0 : OUT STD_LOGIC;
    irA_r_fix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    irA_l_fix_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    irA_l_fix_ce0 : OUT STD_LOGIC;
    irA_l_fix_we0 : OUT STD_LOGIC;
    irA_l_fix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    cameraMA_r_fix_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    cameraMA_r_fix_ce0 : OUT STD_LOGIC;
    cameraMA_r_fix_we0 : OUT STD_LOGIC;
    cameraMA_r_fix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    cameraMA_l_fix_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    cameraMA_l_fix_ce0 : OUT STD_LOGIC;
    cameraMA_l_fix_we0 : OUT STD_LOGIC;
    cameraMA_l_fix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of stereolbm_axis_cambm_Loop_VITIS_LOOP_46_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_14 : STD_LOGIC_VECTOR (11 downto 0) := "000000010100";
    constant ap_const_lv12_FEC : STD_LOGIC_VECTOR (11 downto 0) := "111111101100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln46_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal cameraMA_l_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cameraMA_l_ce0 : STD_LOGIC;
    signal cameraMA_l_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cameraMA_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cameraMA_r_ce0 : STD_LOGIC;
    signal cameraMA_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal irA_l_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal irA_l_ce0 : STD_LOGIC;
    signal irA_l_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal irA_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal irA_r_ce0 : STD_LOGIC;
    signal irA_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln46_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_reg_1156 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_reg_1156_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_reg_1156_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_reg_1156_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_reg_1156_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal cameraMA_l_load_reg_1184 : STD_LOGIC_VECTOR (31 downto 0);
    signal cameraMA_l_load_reg_1184_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal cameraMA_l_load_reg_1184_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal cameraMA_r_load_reg_1190 : STD_LOGIC_VECTOR (31 downto 0);
    signal cameraMA_r_load_reg_1190_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal cameraMA_r_load_reg_1190_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal irA_l_load_reg_1196 : STD_LOGIC_VECTOR (31 downto 0);
    signal irA_l_load_reg_1196_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal irA_l_load_reg_1196_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal irA_r_load_reg_1202 : STD_LOGIC_VECTOR (31 downto 0);
    signal irA_r_load_reg_1202_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal irA_r_load_reg_1202_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln50_fu_241_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln50_reg_1208 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_reg_1213 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_1218 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln50_1_fu_263_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln50_1_reg_1223 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln51_fu_271_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln51_reg_1228 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_311_reg_1233 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_i_reg_1238 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln51_1_fu_293_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln51_1_reg_1243 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln52_fu_301_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln52_reg_1248 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_314_reg_1253 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_i_reg_1258 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln52_1_fu_323_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln52_1_reg_1263 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln53_fu_331_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln53_reg_1268 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_317_reg_1273 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_i_reg_1278 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln53_1_fu_353_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln53_1_reg_1283 : STD_LOGIC_VECTOR (51 downto 0);
    signal select_ln50_fu_377_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln50_reg_1288 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln50_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_1293 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_1_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_1_reg_1300 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_1_fu_413_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln50_1_reg_1305 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln50_2_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_2_reg_1311 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln50_2_fu_427_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln50_2_reg_1317 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln50_4_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_4_reg_1323 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_fu_467_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln51_reg_1328 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln51_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_1333 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_1_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_1_reg_1340 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_1_fu_503_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln51_1_reg_1345 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln51_2_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_2_reg_1351 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln51_2_fu_517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln51_2_reg_1357 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln51_4_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_4_reg_1363 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_fu_557_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln52_reg_1368 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln52_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_1373 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_1_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_1_reg_1380 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_1_fu_593_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln52_1_reg_1385 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln52_2_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_2_reg_1391 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_2_fu_607_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln52_2_reg_1397 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln52_4_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_4_reg_1403 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln53_fu_647_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln53_reg_1408 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln53_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_1413 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_1_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_1_reg_1420 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln53_1_fu_683_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln53_1_reg_1425 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln53_2_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_2_reg_1431 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln53_2_fu_697_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln53_2_reg_1437 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln53_4_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_4_reg_1443 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_6_fu_816_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_6_reg_1448 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln51_6_fu_923_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln51_6_reg_1453 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln52_6_fu_1030_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln52_6_reg_1458 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln53_6_fu_1137_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln53_6_reg_1463 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_80 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln46_fu_218_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_14 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln724_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln724_4_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln724_6_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln724_8_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_1_cast_fu_360_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln50_1_fu_367_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sub_ln50_fu_371_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln50_fu_357_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln50_1_fu_389_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln50_fu_401_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln50_2_fu_407_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_310_fu_431_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln51_1_cast_fu_450_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln51_1_fu_457_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sub_ln51_fu_461_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln51_fu_447_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln51_1_fu_479_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln51_fu_491_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln51_2_fu_497_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_313_fu_521_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln52_1_cast_fu_540_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln52_1_fu_547_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sub_ln52_fu_551_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln52_fu_537_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln52_1_fu_569_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln52_fu_581_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln52_2_fu_587_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_316_fu_611_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln53_1_cast_fu_630_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln53_1_fu_637_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sub_ln53_fu_641_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln53_fu_627_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln53_1_fu_659_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln53_fu_671_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln53_2_fu_677_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_319_fu_701_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln50_fu_717_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln50_2_fu_725_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln50_fu_729_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln724_2_fu_738_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_309_fu_741_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_3_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln50_3_fu_734_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_7_fu_749_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln50_fu_765_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_3_fu_770_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln50_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_4_fu_777_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln50_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_1_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_1_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_2_fu_757_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_5_fu_794_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln51_fu_824_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln51_2_fu_832_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln51_fu_836_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln724_5_fu_845_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_312_fu_848_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_3_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln51_3_fu_841_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln51_7_fu_856_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln51_fu_872_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln51_3_fu_877_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln51_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln51_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_4_fu_884_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln51_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln51_1_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln51_1_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_2_fu_864_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln51_5_fu_901_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln52_fu_931_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln52_2_fu_939_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln52_fu_943_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln724_7_fu_952_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_315_fu_955_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_3_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_3_fu_948_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln52_7_fu_963_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln52_fu_979_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln52_3_fu_984_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln52_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_fu_1003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_4_fu_991_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln52_fu_1015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_1_fu_1019_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_1_fu_1025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_2_fu_971_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln52_5_fu_1008_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln53_fu_1038_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_2_fu_1046_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln53_fu_1050_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln724_9_fu_1059_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_318_fu_1062_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_3_fu_1041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln53_3_fu_1055_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln53_7_fu_1070_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln53_fu_1086_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln53_3_fu_1091_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln53_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_fu_1110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln53_4_fu_1098_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln53_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_1_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_1_fu_1132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln53_2_fu_1078_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln53_5_fu_1115_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_188_ce : STD_LOGIC;
    signal grp_fu_192_ce : STD_LOGIC;
    signal grp_fu_196_ce : STD_LOGIC;
    signal grp_fu_200_ce : STD_LOGIC;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_280 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component stereolbm_axis_cambm_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component stereolbm_axis_cambm_Loop_VITIS_LOOP_46_1_proc_cameraMA_l_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stereolbm_axis_cambm_Loop_VITIS_LOOP_46_1_proc_cameraMA_r_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stereolbm_axis_cambm_Loop_VITIS_LOOP_46_1_proc_irA_l_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stereolbm_axis_cambm_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    cameraMA_l_U : component stereolbm_axis_cambm_Loop_VITIS_LOOP_46_1_proc_cameraMA_l_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cameraMA_l_address0,
        ce0 => cameraMA_l_ce0,
        q0 => cameraMA_l_q0);

    cameraMA_r_U : component stereolbm_axis_cambm_Loop_VITIS_LOOP_46_1_proc_cameraMA_r_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cameraMA_r_address0,
        ce0 => cameraMA_r_ce0,
        q0 => cameraMA_r_q0);

    irA_l_U : component stereolbm_axis_cambm_Loop_VITIS_LOOP_46_1_proc_irA_l_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => irA_l_address0,
        ce0 => irA_l_ce0,
        q0 => irA_l_q0);

    irA_r_U : component stereolbm_axis_cambm_Loop_VITIS_LOOP_46_1_proc_irA_l_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => irA_r_address0,
        ce0 => irA_r_ce0,
        q0 => irA_r_q0);

    fpext_32ns_64_2_no_dsp_1_U1 : component stereolbm_axis_cambm_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cameraMA_l_q0,
        ce => grp_fu_188_ce,
        dout => grp_fu_188_p1);

    fpext_32ns_64_2_no_dsp_1_U2 : component stereolbm_axis_cambm_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cameraMA_r_q0,
        ce => grp_fu_192_ce,
        dout => grp_fu_192_p1);

    fpext_32ns_64_2_no_dsp_1_U3 : component stereolbm_axis_cambm_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => irA_l_q0,
        ce => grp_fu_196_ce,
        dout => grp_fu_196_p1);

    fpext_32ns_64_2_no_dsp_1_U4 : component stereolbm_axis_cambm_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => irA_r_q0,
        ce => grp_fu_200_ce,
        dout => grp_fu_200_p1);

    flow_control_loop_pipe_U : component stereolbm_axis_cambm_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    i_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_280)) then
                if ((icmp_ln46_fu_212_p2 = ap_const_lv1_0)) then 
                    i_fu_80 <= add_ln46_fu_218_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_80 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                cameraMA_l_load_reg_1184 <= cameraMA_l_q0;
                cameraMA_r_load_reg_1190 <= cameraMA_r_q0;
                irA_l_load_reg_1196 <= irA_l_q0;
                irA_r_load_reg_1202 <= irA_r_q0;
                    zext_ln46_reg_1156_pp0_iter1_reg(3 downto 0) <= zext_ln46_reg_1156(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                cameraMA_l_load_reg_1184_pp0_iter2_reg <= cameraMA_l_load_reg_1184;
                cameraMA_l_load_reg_1184_pp0_iter3_reg <= cameraMA_l_load_reg_1184_pp0_iter2_reg;
                cameraMA_r_load_reg_1190_pp0_iter2_reg <= cameraMA_r_load_reg_1190;
                cameraMA_r_load_reg_1190_pp0_iter3_reg <= cameraMA_r_load_reg_1190_pp0_iter2_reg;
                icmp_ln50_1_reg_1300 <= icmp_ln50_1_fu_395_p2;
                icmp_ln50_2_reg_1311 <= icmp_ln50_2_fu_421_p2;
                icmp_ln50_4_reg_1323 <= icmp_ln50_4_fu_441_p2;
                icmp_ln50_reg_1293 <= icmp_ln50_fu_384_p2;
                icmp_ln51_1_reg_1340 <= icmp_ln51_1_fu_485_p2;
                icmp_ln51_2_reg_1351 <= icmp_ln51_2_fu_511_p2;
                icmp_ln51_4_reg_1363 <= icmp_ln51_4_fu_531_p2;
                icmp_ln51_reg_1333 <= icmp_ln51_fu_474_p2;
                icmp_ln52_1_reg_1380 <= icmp_ln52_1_fu_575_p2;
                icmp_ln52_2_reg_1391 <= icmp_ln52_2_fu_601_p2;
                icmp_ln52_4_reg_1403 <= icmp_ln52_4_fu_621_p2;
                icmp_ln52_reg_1373 <= icmp_ln52_fu_564_p2;
                icmp_ln53_1_reg_1420 <= icmp_ln53_1_fu_665_p2;
                icmp_ln53_2_reg_1431 <= icmp_ln53_2_fu_691_p2;
                icmp_ln53_4_reg_1443 <= icmp_ln53_4_fu_711_p2;
                icmp_ln53_reg_1413 <= icmp_ln53_fu_654_p2;
                irA_l_load_reg_1196_pp0_iter2_reg <= irA_l_load_reg_1196;
                irA_l_load_reg_1196_pp0_iter3_reg <= irA_l_load_reg_1196_pp0_iter2_reg;
                irA_r_load_reg_1202_pp0_iter2_reg <= irA_r_load_reg_1202;
                irA_r_load_reg_1202_pp0_iter3_reg <= irA_r_load_reg_1202_pp0_iter2_reg;
                select_ln50_1_reg_1305 <= select_ln50_1_fu_413_p3;
                select_ln50_6_reg_1448 <= select_ln50_6_fu_816_p3;
                select_ln50_reg_1288 <= select_ln50_fu_377_p3;
                select_ln51_1_reg_1345 <= select_ln51_1_fu_503_p3;
                select_ln51_6_reg_1453 <= select_ln51_6_fu_923_p3;
                select_ln51_reg_1328 <= select_ln51_fu_467_p3;
                select_ln52_1_reg_1385 <= select_ln52_1_fu_593_p3;
                select_ln52_6_reg_1458 <= select_ln52_6_fu_1030_p3;
                select_ln52_reg_1368 <= select_ln52_fu_557_p3;
                select_ln53_1_reg_1425 <= select_ln53_1_fu_683_p3;
                select_ln53_6_reg_1463 <= select_ln53_6_fu_1137_p3;
                select_ln53_reg_1408 <= select_ln53_fu_647_p3;
                tmp_311_reg_1233 <= bitcast_ln724_4_fu_267_p1(63 downto 63);
                tmp_314_reg_1253 <= bitcast_ln724_6_fu_297_p1(63 downto 63);
                tmp_317_reg_1273 <= bitcast_ln724_8_fu_327_p1(63 downto 63);
                tmp_32_i_reg_1238 <= bitcast_ln724_4_fu_267_p1(62 downto 52);
                tmp_38_i_reg_1258 <= bitcast_ln724_6_fu_297_p1(62 downto 52);
                tmp_41_i_reg_1278 <= bitcast_ln724_8_fu_327_p1(62 downto 52);
                tmp_i_reg_1218 <= bitcast_ln724_fu_237_p1(62 downto 52);
                tmp_reg_1213 <= bitcast_ln724_fu_237_p1(63 downto 63);
                trunc_ln50_1_reg_1223 <= trunc_ln50_1_fu_263_p1;
                trunc_ln50_2_reg_1317 <= trunc_ln50_2_fu_427_p1;
                trunc_ln50_reg_1208 <= trunc_ln50_fu_241_p1;
                trunc_ln51_1_reg_1243 <= trunc_ln51_1_fu_293_p1;
                trunc_ln51_2_reg_1357 <= trunc_ln51_2_fu_517_p1;
                trunc_ln51_reg_1228 <= trunc_ln51_fu_271_p1;
                trunc_ln52_1_reg_1263 <= trunc_ln52_1_fu_323_p1;
                trunc_ln52_2_reg_1397 <= trunc_ln52_2_fu_607_p1;
                trunc_ln52_reg_1248 <= trunc_ln52_fu_301_p1;
                trunc_ln53_1_reg_1283 <= trunc_ln53_1_fu_353_p1;
                trunc_ln53_2_reg_1437 <= trunc_ln53_2_fu_697_p1;
                trunc_ln53_reg_1268 <= trunc_ln53_fu_331_p1;
                    zext_ln46_reg_1156_pp0_iter2_reg(3 downto 0) <= zext_ln46_reg_1156_pp0_iter1_reg(3 downto 0);
                    zext_ln46_reg_1156_pp0_iter3_reg(3 downto 0) <= zext_ln46_reg_1156_pp0_iter2_reg(3 downto 0);
                    zext_ln46_reg_1156_pp0_iter4_reg(3 downto 0) <= zext_ln46_reg_1156_pp0_iter3_reg(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_fu_212_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln46_reg_1156(3 downto 0) <= zext_ln46_fu_224_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln46_reg_1156(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln46_reg_1156_pp0_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln46_reg_1156_pp0_iter2_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln46_reg_1156_pp0_iter3_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln46_reg_1156_pp0_iter4_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln46_fu_218_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_14) + unsigned(ap_const_lv4_1));
    add_ln50_fu_401_p2 <= std_logic_vector(unsigned(sub_ln50_1_fu_389_p2) + unsigned(ap_const_lv12_FEC));
    add_ln51_fu_491_p2 <= std_logic_vector(unsigned(sub_ln51_1_fu_479_p2) + unsigned(ap_const_lv12_FEC));
    add_ln52_fu_581_p2 <= std_logic_vector(unsigned(sub_ln52_1_fu_569_p2) + unsigned(ap_const_lv12_FEC));
    add_ln53_fu_671_p2 <= std_logic_vector(unsigned(sub_ln53_1_fu_659_p2) + unsigned(ap_const_lv12_FEC));
    and_ln50_1_fu_811_p2 <= (xor_ln50_1_fu_805_p2 and icmp_ln50_1_reg_1300);
    and_ln50_fu_789_p2 <= (xor_ln50_fu_784_p2 and icmp_ln50_2_reg_1311);
    and_ln51_1_fu_918_p2 <= (xor_ln51_1_fu_912_p2 and icmp_ln51_1_reg_1340);
    and_ln51_fu_896_p2 <= (xor_ln51_fu_891_p2 and icmp_ln51_2_reg_1351);
    and_ln52_1_fu_1025_p2 <= (xor_ln52_1_fu_1019_p2 and icmp_ln52_1_reg_1380);
    and_ln52_fu_1003_p2 <= (xor_ln52_fu_998_p2 and icmp_ln52_2_reg_1391);
    and_ln53_1_fu_1132_p2 <= (xor_ln53_1_fu_1126_p2 and icmp_ln53_1_reg_1420);
    and_ln53_fu_1110_p2 <= (xor_ln53_fu_1105_p2 and icmp_ln53_2_reg_1431);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_280_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_280 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln46_fu_212_p2, ap_start_int)
    begin
        if (((icmp_ln46_fu_212_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_14_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_80, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_14 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_14 <= i_fu_80;
        end if; 
    end process;

    ashr_ln50_fu_729_p2 <= std_logic_vector(shift_right(signed(select_ln50_reg_1288),to_integer(unsigned('0' & zext_ln50_2_fu_725_p1(31-1 downto 0)))));
    ashr_ln51_fu_836_p2 <= std_logic_vector(shift_right(signed(select_ln51_reg_1328),to_integer(unsigned('0' & zext_ln51_2_fu_832_p1(31-1 downto 0)))));
    ashr_ln52_fu_943_p2 <= std_logic_vector(shift_right(signed(select_ln52_reg_1368),to_integer(unsigned('0' & zext_ln52_2_fu_939_p1(31-1 downto 0)))));
    ashr_ln53_fu_1050_p2 <= std_logic_vector(shift_right(signed(select_ln53_reg_1408),to_integer(unsigned('0' & zext_ln53_2_fu_1046_p1(31-1 downto 0)))));
    bitcast_ln724_2_fu_738_p1 <= cameraMA_l_load_reg_1184_pp0_iter3_reg;
    bitcast_ln724_4_fu_267_p1 <= grp_fu_192_p1;
    bitcast_ln724_5_fu_845_p1 <= cameraMA_r_load_reg_1190_pp0_iter3_reg;
    bitcast_ln724_6_fu_297_p1 <= grp_fu_196_p1;
    bitcast_ln724_7_fu_952_p1 <= irA_l_load_reg_1196_pp0_iter3_reg;
    bitcast_ln724_8_fu_327_p1 <= grp_fu_200_p1;
    bitcast_ln724_9_fu_1059_p1 <= irA_r_load_reg_1202_pp0_iter3_reg;
    bitcast_ln724_fu_237_p1 <= grp_fu_188_p1;
    cameraMA_l_address0 <= zext_ln46_fu_224_p1(4 - 1 downto 0);

    cameraMA_l_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cameraMA_l_ce0 <= ap_const_logic_1;
        else 
            cameraMA_l_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cameraMA_l_fix_address0 <= zext_ln46_reg_1156_pp0_iter4_reg(4 - 1 downto 0);

    cameraMA_l_fix_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            cameraMA_l_fix_ce0 <= ap_const_logic_1;
        else 
            cameraMA_l_fix_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cameraMA_l_fix_d0 <= select_ln50_6_reg_1448;

    cameraMA_l_fix_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            cameraMA_l_fix_we0 <= ap_const_logic_1;
        else 
            cameraMA_l_fix_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cameraMA_r_address0 <= zext_ln46_fu_224_p1(4 - 1 downto 0);

    cameraMA_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cameraMA_r_ce0 <= ap_const_logic_1;
        else 
            cameraMA_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cameraMA_r_fix_address0 <= zext_ln46_reg_1156_pp0_iter4_reg(4 - 1 downto 0);

    cameraMA_r_fix_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            cameraMA_r_fix_ce0 <= ap_const_logic_1;
        else 
            cameraMA_r_fix_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cameraMA_r_fix_d0 <= select_ln51_6_reg_1453;

    cameraMA_r_fix_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            cameraMA_r_fix_we0 <= ap_const_logic_1;
        else 
            cameraMA_r_fix_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_188_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_188_ce <= ap_const_logic_1;
        else 
            grp_fu_188_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_192_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_192_ce <= ap_const_logic_1;
        else 
            grp_fu_192_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_196_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_196_ce <= ap_const_logic_1;
        else 
            grp_fu_196_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_200_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_200_ce <= ap_const_logic_1;
        else 
            grp_fu_200_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln46_fu_212_p2 <= "1" when (ap_sig_allocacmp_i_14 = ap_const_lv4_9) else "0";
    icmp_ln50_1_fu_395_p2 <= "1" when (signed(sub_ln50_1_fu_389_p2) > signed(ap_const_lv12_14)) else "0";
    icmp_ln50_2_fu_421_p2 <= "1" when (sub_ln50_1_fu_389_p2 = ap_const_lv12_14) else "0";
    icmp_ln50_3_fu_720_p2 <= "1" when (unsigned(select_ln50_1_reg_1305) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln50_4_fu_441_p2 <= "1" when (tmp_310_fu_431_p4 = ap_const_lv7_0) else "0";
    icmp_ln50_fu_384_p2 <= "1" when (trunc_ln50_reg_1208 = ap_const_lv63_0) else "0";
    icmp_ln51_1_fu_485_p2 <= "1" when (signed(sub_ln51_1_fu_479_p2) > signed(ap_const_lv12_14)) else "0";
    icmp_ln51_2_fu_511_p2 <= "1" when (sub_ln51_1_fu_479_p2 = ap_const_lv12_14) else "0";
    icmp_ln51_3_fu_827_p2 <= "1" when (unsigned(select_ln51_1_reg_1345) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln51_4_fu_531_p2 <= "1" when (tmp_313_fu_521_p4 = ap_const_lv7_0) else "0";
    icmp_ln51_fu_474_p2 <= "1" when (trunc_ln51_reg_1228 = ap_const_lv63_0) else "0";
    icmp_ln52_1_fu_575_p2 <= "1" when (signed(sub_ln52_1_fu_569_p2) > signed(ap_const_lv12_14)) else "0";
    icmp_ln52_2_fu_601_p2 <= "1" when (sub_ln52_1_fu_569_p2 = ap_const_lv12_14) else "0";
    icmp_ln52_3_fu_934_p2 <= "1" when (unsigned(select_ln52_1_reg_1385) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln52_4_fu_621_p2 <= "1" when (tmp_316_fu_611_p4 = ap_const_lv7_0) else "0";
    icmp_ln52_fu_564_p2 <= "1" when (trunc_ln52_reg_1248 = ap_const_lv63_0) else "0";
    icmp_ln53_1_fu_665_p2 <= "1" when (signed(sub_ln53_1_fu_659_p2) > signed(ap_const_lv12_14)) else "0";
    icmp_ln53_2_fu_691_p2 <= "1" when (sub_ln53_1_fu_659_p2 = ap_const_lv12_14) else "0";
    icmp_ln53_3_fu_1041_p2 <= "1" when (unsigned(select_ln53_1_reg_1425) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln53_4_fu_711_p2 <= "1" when (tmp_319_fu_701_p4 = ap_const_lv7_0) else "0";
    icmp_ln53_fu_654_p2 <= "1" when (trunc_ln53_reg_1268 = ap_const_lv63_0) else "0";
    irA_l_address0 <= zext_ln46_fu_224_p1(4 - 1 downto 0);

    irA_l_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            irA_l_ce0 <= ap_const_logic_1;
        else 
            irA_l_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    irA_l_fix_address0 <= zext_ln46_reg_1156_pp0_iter4_reg(4 - 1 downto 0);

    irA_l_fix_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            irA_l_fix_ce0 <= ap_const_logic_1;
        else 
            irA_l_fix_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    irA_l_fix_d0 <= select_ln52_6_reg_1458;

    irA_l_fix_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            irA_l_fix_we0 <= ap_const_logic_1;
        else 
            irA_l_fix_we0 <= ap_const_logic_0;
        end if; 
    end process;

    irA_r_address0 <= zext_ln46_fu_224_p1(4 - 1 downto 0);

    irA_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            irA_r_ce0 <= ap_const_logic_1;
        else 
            irA_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    irA_r_fix_address0 <= zext_ln46_reg_1156_pp0_iter4_reg(4 - 1 downto 0);

    irA_r_fix_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            irA_r_fix_ce0 <= ap_const_logic_1;
        else 
            irA_r_fix_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    irA_r_fix_d0 <= select_ln53_6_reg_1463;

    irA_r_fix_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            irA_r_fix_we0 <= ap_const_logic_1;
        else 
            irA_r_fix_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln50_fu_801_p2 <= (icmp_ln50_reg_1293 or icmp_ln50_2_reg_1311);
    or_ln51_fu_908_p2 <= (icmp_ln51_reg_1333 or icmp_ln51_2_reg_1351);
    or_ln52_fu_1015_p2 <= (icmp_ln52_reg_1373 or icmp_ln52_2_reg_1391);
    or_ln53_fu_1122_p2 <= (icmp_ln53_reg_1413 or icmp_ln53_2_reg_1431);
    select_ln50_1_fu_413_p3 <= 
        add_ln50_fu_401_p2 when (icmp_ln50_1_fu_395_p2(0) = '1') else 
        sub_ln50_2_fu_407_p2;
    select_ln50_2_fu_757_p3 <= 
        trunc_ln50_3_fu_734_p1 when (icmp_ln50_3_fu_720_p2(0) = '1') else 
        select_ln50_7_fu_749_p3;
    select_ln50_3_fu_770_p3 <= 
        shl_ln50_fu_765_p2 when (icmp_ln50_4_reg_1323(0) = '1') else 
        ap_const_lv32_0;
    select_ln50_4_fu_777_p3 <= 
        ap_const_lv32_0 when (icmp_ln50_reg_1293(0) = '1') else 
        select_ln50_3_fu_770_p3;
    select_ln50_5_fu_794_p3 <= 
        trunc_ln50_2_reg_1317 when (and_ln50_fu_789_p2(0) = '1') else 
        select_ln50_4_fu_777_p3;
    select_ln50_6_fu_816_p3 <= 
        select_ln50_2_fu_757_p3 when (and_ln50_1_fu_811_p2(0) = '1') else 
        select_ln50_5_fu_794_p3;
    select_ln50_7_fu_749_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_309_fu_741_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln50_fu_377_p3 <= 
        sub_ln50_fu_371_p2 when (tmp_reg_1213(0) = '1') else 
        zext_ln50_1_fu_367_p1;
    select_ln51_1_fu_503_p3 <= 
        add_ln51_fu_491_p2 when (icmp_ln51_1_fu_485_p2(0) = '1') else 
        sub_ln51_2_fu_497_p2;
    select_ln51_2_fu_864_p3 <= 
        trunc_ln51_3_fu_841_p1 when (icmp_ln51_3_fu_827_p2(0) = '1') else 
        select_ln51_7_fu_856_p3;
    select_ln51_3_fu_877_p3 <= 
        shl_ln51_fu_872_p2 when (icmp_ln51_4_reg_1363(0) = '1') else 
        ap_const_lv32_0;
    select_ln51_4_fu_884_p3 <= 
        ap_const_lv32_0 when (icmp_ln51_reg_1333(0) = '1') else 
        select_ln51_3_fu_877_p3;
    select_ln51_5_fu_901_p3 <= 
        trunc_ln51_2_reg_1357 when (and_ln51_fu_896_p2(0) = '1') else 
        select_ln51_4_fu_884_p3;
    select_ln51_6_fu_923_p3 <= 
        select_ln51_2_fu_864_p3 when (and_ln51_1_fu_918_p2(0) = '1') else 
        select_ln51_5_fu_901_p3;
    select_ln51_7_fu_856_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_312_fu_848_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln51_fu_467_p3 <= 
        sub_ln51_fu_461_p2 when (tmp_311_reg_1233(0) = '1') else 
        zext_ln51_1_fu_457_p1;
    select_ln52_1_fu_593_p3 <= 
        add_ln52_fu_581_p2 when (icmp_ln52_1_fu_575_p2(0) = '1') else 
        sub_ln52_2_fu_587_p2;
    select_ln52_2_fu_971_p3 <= 
        trunc_ln52_3_fu_948_p1 when (icmp_ln52_3_fu_934_p2(0) = '1') else 
        select_ln52_7_fu_963_p3;
    select_ln52_3_fu_984_p3 <= 
        shl_ln52_fu_979_p2 when (icmp_ln52_4_reg_1403(0) = '1') else 
        ap_const_lv32_0;
    select_ln52_4_fu_991_p3 <= 
        ap_const_lv32_0 when (icmp_ln52_reg_1373(0) = '1') else 
        select_ln52_3_fu_984_p3;
    select_ln52_5_fu_1008_p3 <= 
        trunc_ln52_2_reg_1397 when (and_ln52_fu_1003_p2(0) = '1') else 
        select_ln52_4_fu_991_p3;
    select_ln52_6_fu_1030_p3 <= 
        select_ln52_2_fu_971_p3 when (and_ln52_1_fu_1025_p2(0) = '1') else 
        select_ln52_5_fu_1008_p3;
    select_ln52_7_fu_963_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_315_fu_955_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln52_fu_557_p3 <= 
        sub_ln52_fu_551_p2 when (tmp_314_reg_1253(0) = '1') else 
        zext_ln52_1_fu_547_p1;
    select_ln53_1_fu_683_p3 <= 
        add_ln53_fu_671_p2 when (icmp_ln53_1_fu_665_p2(0) = '1') else 
        sub_ln53_2_fu_677_p2;
    select_ln53_2_fu_1078_p3 <= 
        trunc_ln53_3_fu_1055_p1 when (icmp_ln53_3_fu_1041_p2(0) = '1') else 
        select_ln53_7_fu_1070_p3;
    select_ln53_3_fu_1091_p3 <= 
        shl_ln53_fu_1086_p2 when (icmp_ln53_4_reg_1443(0) = '1') else 
        ap_const_lv32_0;
    select_ln53_4_fu_1098_p3 <= 
        ap_const_lv32_0 when (icmp_ln53_reg_1413(0) = '1') else 
        select_ln53_3_fu_1091_p3;
    select_ln53_5_fu_1115_p3 <= 
        trunc_ln53_2_reg_1437 when (and_ln53_fu_1110_p2(0) = '1') else 
        select_ln53_4_fu_1098_p3;
    select_ln53_6_fu_1137_p3 <= 
        select_ln53_2_fu_1078_p3 when (and_ln53_1_fu_1132_p2(0) = '1') else 
        select_ln53_5_fu_1115_p3;
    select_ln53_7_fu_1070_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_318_fu_1062_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln53_fu_647_p3 <= 
        sub_ln53_fu_641_p2 when (tmp_317_reg_1273(0) = '1') else 
        zext_ln53_1_fu_637_p1;
        sext_ln50_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln50_1_reg_1305),32));

        sext_ln51_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln51_1_reg_1345),32));

        sext_ln52_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln52_1_reg_1385),32));

        sext_ln53_fu_1038_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln53_1_reg_1425),32));

    shl_ln50_fu_765_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln50_2_reg_1317),to_integer(unsigned('0' & sext_ln50_fu_717_p1(31-1 downto 0)))));
    shl_ln51_fu_872_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln51_2_reg_1357),to_integer(unsigned('0' & sext_ln51_fu_824_p1(31-1 downto 0)))));
    shl_ln52_fu_979_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln52_2_reg_1397),to_integer(unsigned('0' & sext_ln52_fu_931_p1(31-1 downto 0)))));
    shl_ln53_fu_1086_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln53_2_reg_1437),to_integer(unsigned('0' & sext_ln53_fu_1038_p1(31-1 downto 0)))));
    sub_ln50_1_fu_389_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln50_fu_357_p1));
    sub_ln50_2_fu_407_p2 <= std_logic_vector(unsigned(ap_const_lv12_14) - unsigned(sub_ln50_1_fu_389_p2));
    sub_ln50_fu_371_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln50_1_fu_367_p1));
    sub_ln51_1_fu_479_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln51_fu_447_p1));
    sub_ln51_2_fu_497_p2 <= std_logic_vector(unsigned(ap_const_lv12_14) - unsigned(sub_ln51_1_fu_479_p2));
    sub_ln51_fu_461_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln51_1_fu_457_p1));
    sub_ln52_1_fu_569_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln52_fu_537_p1));
    sub_ln52_2_fu_587_p2 <= std_logic_vector(unsigned(ap_const_lv12_14) - unsigned(sub_ln52_1_fu_569_p2));
    sub_ln52_fu_551_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln52_1_fu_547_p1));
    sub_ln53_1_fu_659_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln53_fu_627_p1));
    sub_ln53_2_fu_677_p2 <= std_logic_vector(unsigned(ap_const_lv12_14) - unsigned(sub_ln53_1_fu_659_p2));
    sub_ln53_fu_641_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln53_1_fu_637_p1));
    tmp_309_fu_741_p3 <= bitcast_ln724_2_fu_738_p1(31 downto 31);
    tmp_310_fu_431_p4 <= select_ln50_1_fu_413_p3(11 downto 5);
    tmp_312_fu_848_p3 <= bitcast_ln724_5_fu_845_p1(31 downto 31);
    tmp_313_fu_521_p4 <= select_ln51_1_fu_503_p3(11 downto 5);
    tmp_315_fu_955_p3 <= bitcast_ln724_7_fu_952_p1(31 downto 31);
    tmp_316_fu_611_p4 <= select_ln52_1_fu_593_p3(11 downto 5);
    tmp_318_fu_1062_p3 <= bitcast_ln724_9_fu_1059_p1(31 downto 31);
    tmp_319_fu_701_p4 <= select_ln53_1_fu_683_p3(11 downto 5);
    trunc_ln50_1_fu_263_p1 <= bitcast_ln724_fu_237_p1(52 - 1 downto 0);
    trunc_ln50_2_fu_427_p1 <= select_ln50_fu_377_p3(32 - 1 downto 0);
    trunc_ln50_3_fu_734_p1 <= ashr_ln50_fu_729_p2(32 - 1 downto 0);
    trunc_ln50_fu_241_p1 <= bitcast_ln724_fu_237_p1(63 - 1 downto 0);
    trunc_ln51_1_fu_293_p1 <= bitcast_ln724_4_fu_267_p1(52 - 1 downto 0);
    trunc_ln51_2_fu_517_p1 <= select_ln51_fu_467_p3(32 - 1 downto 0);
    trunc_ln51_3_fu_841_p1 <= ashr_ln51_fu_836_p2(32 - 1 downto 0);
    trunc_ln51_fu_271_p1 <= bitcast_ln724_4_fu_267_p1(63 - 1 downto 0);
    trunc_ln52_1_fu_323_p1 <= bitcast_ln724_6_fu_297_p1(52 - 1 downto 0);
    trunc_ln52_2_fu_607_p1 <= select_ln52_fu_557_p3(32 - 1 downto 0);
    trunc_ln52_3_fu_948_p1 <= ashr_ln52_fu_943_p2(32 - 1 downto 0);
    trunc_ln52_fu_301_p1 <= bitcast_ln724_6_fu_297_p1(63 - 1 downto 0);
    trunc_ln53_1_fu_353_p1 <= bitcast_ln724_8_fu_327_p1(52 - 1 downto 0);
    trunc_ln53_2_fu_697_p1 <= select_ln53_fu_647_p3(32 - 1 downto 0);
    trunc_ln53_3_fu_1055_p1 <= ashr_ln53_fu_1050_p2(32 - 1 downto 0);
    trunc_ln53_fu_331_p1 <= bitcast_ln724_8_fu_327_p1(63 - 1 downto 0);
    xor_ln50_1_fu_805_p2 <= (or_ln50_fu_801_p2 xor ap_const_lv1_1);
    xor_ln50_fu_784_p2 <= (icmp_ln50_reg_1293 xor ap_const_lv1_1);
    xor_ln51_1_fu_912_p2 <= (or_ln51_fu_908_p2 xor ap_const_lv1_1);
    xor_ln51_fu_891_p2 <= (icmp_ln51_reg_1333 xor ap_const_lv1_1);
    xor_ln52_1_fu_1019_p2 <= (or_ln52_fu_1015_p2 xor ap_const_lv1_1);
    xor_ln52_fu_998_p2 <= (icmp_ln52_reg_1373 xor ap_const_lv1_1);
    xor_ln53_1_fu_1126_p2 <= (or_ln53_fu_1122_p2 xor ap_const_lv1_1);
    xor_ln53_fu_1105_p2 <= (icmp_ln53_reg_1413 xor ap_const_lv1_1);
    zext_ln46_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_14),64));
    zext_ln50_1_cast_fu_360_p3 <= (ap_const_lv1_1 & trunc_ln50_1_reg_1223);
    zext_ln50_1_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln50_1_cast_fu_360_p3),54));
    zext_ln50_2_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln50_fu_717_p1),54));
    zext_ln50_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_reg_1218),12));
    zext_ln51_1_cast_fu_450_p3 <= (ap_const_lv1_1 & trunc_ln51_1_reg_1243);
    zext_ln51_1_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln51_1_cast_fu_450_p3),54));
    zext_ln51_2_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln51_fu_824_p1),54));
    zext_ln51_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_i_reg_1238),12));
    zext_ln52_1_cast_fu_540_p3 <= (ap_const_lv1_1 & trunc_ln52_1_reg_1263);
    zext_ln52_1_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln52_1_cast_fu_540_p3),54));
    zext_ln52_2_fu_939_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln52_fu_931_p1),54));
    zext_ln52_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_i_reg_1258),12));
    zext_ln53_1_cast_fu_630_p3 <= (ap_const_lv1_1 & trunc_ln53_1_reg_1283);
    zext_ln53_1_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln53_1_cast_fu_630_p3),54));
    zext_ln53_2_fu_1046_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln53_fu_1038_p1),54));
    zext_ln53_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_i_reg_1278),12));
end behav;
