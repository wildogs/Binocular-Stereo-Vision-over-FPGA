-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stereolbm_axis_cambm_InitUndistortRectifyMapInverse_9_5_7_600_800_1_2_2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cameraMatrix_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    cameraMatrix_ce0 : OUT STD_LOGIC;
    cameraMatrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    distCoeffs_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    distCoeffs_ce0 : OUT STD_LOGIC;
    distCoeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ir_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ir_ce0 : OUT STD_LOGIC;
    ir_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    mapxLMat_data_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    mapxLMat_data_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    mapxLMat_data_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    mapxLMat_data_full_n : IN STD_LOGIC;
    mapxLMat_data_write : OUT STD_LOGIC;
    mapyLMat_data_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    mapyLMat_data_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    mapyLMat_data_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    mapyLMat_data_full_n : IN STD_LOGIC;
    mapyLMat_data_write : OUT STD_LOGIC );
end;


architecture behav of stereolbm_axis_cambm_InitUndistortRectifyMapInverse_9_5_7_600_800_1_2_2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln249_fu_56_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln249_reg_64 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln249_4_fu_60_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln249_4_reg_69 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_start : STD_LOGIC;
    signal grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_done : STD_LOGIC;
    signal grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_idle : STD_LOGIC;
    signal grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_ready : STD_LOGIC;
    signal grp_xFInitUndistortRectifyMapInverseKernel_fu_40_cameraMatrix_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xFInitUndistortRectifyMapInverseKernel_fu_40_cameraMatrix_ce0 : STD_LOGIC;
    signal grp_xFInitUndistortRectifyMapInverseKernel_fu_40_distCoeffs_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xFInitUndistortRectifyMapInverseKernel_fu_40_distCoeffs_ce0 : STD_LOGIC;
    signal grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ir_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ir_ce0 : STD_LOGIC;
    signal grp_xFInitUndistortRectifyMapInverseKernel_fu_40_mapxRMat_data_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xFInitUndistortRectifyMapInverseKernel_fu_40_mapxRMat_data_write : STD_LOGIC;
    signal grp_xFInitUndistortRectifyMapInverseKernel_fu_40_mapyRMat_data_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xFInitUndistortRectifyMapInverseKernel_fu_40_mapyRMat_data_write : STD_LOGIC;
    signal grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component stereolbm_axis_cambm_xFInitUndistortRectifyMapInverseKernel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cameraMatrix_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cameraMatrix_ce0 : OUT STD_LOGIC;
        cameraMatrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        distCoeffs_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        distCoeffs_ce0 : OUT STD_LOGIC;
        distCoeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ir_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ir_ce0 : OUT STD_LOGIC;
        ir_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        mapxRMat_data_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        mapxRMat_data_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mapxRMat_data_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mapxRMat_data_full_n : IN STD_LOGIC;
        mapxRMat_data_write : OUT STD_LOGIC;
        mapyRMat_data_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        mapyRMat_data_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mapyRMat_data_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mapyRMat_data_full_n : IN STD_LOGIC;
        mapyRMat_data_write : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (15 downto 0);
        cols : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_xFInitUndistortRectifyMapInverseKernel_fu_40 : component stereolbm_axis_cambm_xFInitUndistortRectifyMapInverseKernel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_start,
        ap_done => grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_done,
        ap_idle => grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_idle,
        ap_ready => grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_ready,
        cameraMatrix_address0 => grp_xFInitUndistortRectifyMapInverseKernel_fu_40_cameraMatrix_address0,
        cameraMatrix_ce0 => grp_xFInitUndistortRectifyMapInverseKernel_fu_40_cameraMatrix_ce0,
        cameraMatrix_q0 => cameraMatrix_q0,
        distCoeffs_address0 => grp_xFInitUndistortRectifyMapInverseKernel_fu_40_distCoeffs_address0,
        distCoeffs_ce0 => grp_xFInitUndistortRectifyMapInverseKernel_fu_40_distCoeffs_ce0,
        distCoeffs_q0 => distCoeffs_q0,
        ir_address0 => grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ir_address0,
        ir_ce0 => grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ir_ce0,
        ir_q0 => ir_q0,
        mapxRMat_data_din => grp_xFInitUndistortRectifyMapInverseKernel_fu_40_mapxRMat_data_din,
        mapxRMat_data_num_data_valid => ap_const_lv2_0,
        mapxRMat_data_fifo_cap => ap_const_lv2_0,
        mapxRMat_data_full_n => mapxLMat_data_full_n,
        mapxRMat_data_write => grp_xFInitUndistortRectifyMapInverseKernel_fu_40_mapxRMat_data_write,
        mapyRMat_data_din => grp_xFInitUndistortRectifyMapInverseKernel_fu_40_mapyRMat_data_din,
        mapyRMat_data_num_data_valid => ap_const_lv2_0,
        mapyRMat_data_fifo_cap => ap_const_lv2_0,
        mapyRMat_data_full_n => mapyLMat_data_full_n,
        mapyRMat_data_write => grp_xFInitUndistortRectifyMapInverseKernel_fu_40_mapyRMat_data_write,
        rows => trunc_ln249_reg_64,
        cols => trunc_ln249_4_reg_69);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_ready = ap_const_logic_1)) then 
                    grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln249_4_reg_69 <= trunc_ln249_4_fu_60_p1;
                trunc_ln249_reg_64 <= trunc_ln249_fu_56_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_done)
    begin
        if ((grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cameraMatrix_address0 <= grp_xFInitUndistortRectifyMapInverseKernel_fu_40_cameraMatrix_address0;
    cameraMatrix_ce0 <= grp_xFInitUndistortRectifyMapInverseKernel_fu_40_cameraMatrix_ce0;
    distCoeffs_address0 <= grp_xFInitUndistortRectifyMapInverseKernel_fu_40_distCoeffs_address0;
    distCoeffs_ce0 <= grp_xFInitUndistortRectifyMapInverseKernel_fu_40_distCoeffs_ce0;
    grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_start <= grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ap_start_reg;
    ir_address0 <= grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ir_address0;
    ir_ce0 <= grp_xFInitUndistortRectifyMapInverseKernel_fu_40_ir_ce0;
    mapxLMat_data_din <= grp_xFInitUndistortRectifyMapInverseKernel_fu_40_mapxRMat_data_din;

    mapxLMat_data_write_assign_proc : process(grp_xFInitUndistortRectifyMapInverseKernel_fu_40_mapxRMat_data_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mapxLMat_data_write <= grp_xFInitUndistortRectifyMapInverseKernel_fu_40_mapxRMat_data_write;
        else 
            mapxLMat_data_write <= ap_const_logic_0;
        end if; 
    end process;

    mapyLMat_data_din <= grp_xFInitUndistortRectifyMapInverseKernel_fu_40_mapyRMat_data_din;

    mapyLMat_data_write_assign_proc : process(grp_xFInitUndistortRectifyMapInverseKernel_fu_40_mapyRMat_data_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mapyLMat_data_write <= grp_xFInitUndistortRectifyMapInverseKernel_fu_40_mapyRMat_data_write;
        else 
            mapyLMat_data_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln249_4_fu_60_p1 <= p_read1(16 - 1 downto 0);
    trunc_ln249_fu_56_p1 <= p_read(16 - 1 downto 0);
end behav;
