// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module stereolbm_axis_cambm_xFImageClip_600_800_1_2_4_0_3_0_800_4_Pipeline_loop_col_clip (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_sobel_x_data_dout,
        in_sobel_x_data_num_data_valid,
        in_sobel_x_data_fifo_cap,
        in_sobel_x_data_empty_n,
        in_sobel_x_data_read,
        left_clipped_din,
        left_clipped_num_data_valid,
        left_clipped_fifo_cap,
        left_clipped_full_n,
        left_clipped_write,
        width_load,
        i,
        height_load,
        sub25_i,
        sbmstate_preFilterCap_load,
        cap_cast_i
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] in_sobel_x_data_dout;
input  [1:0] in_sobel_x_data_num_data_valid;
input  [1:0] in_sobel_x_data_fifo_cap;
input   in_sobel_x_data_empty_n;
output   in_sobel_x_data_read;
output  [7:0] left_clipped_din;
input  [1:0] left_clipped_num_data_valid;
input  [1:0] left_clipped_fifo_cap;
input   left_clipped_full_n;
output   left_clipped_write;
input  [15:0] width_load;
input  [14:0] i;
input  [15:0] height_load;
input  [31:0] sub25_i;
input  [31:0] sbmstate_preFilterCap_load;
input  [7:0] cap_cast_i;

reg ap_idle;
reg in_sobel_x_data_read;
reg left_clipped_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln630_fu_136_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in_sobel_x_data_blk_n;
wire    ap_block_pp0_stage0;
reg    left_clipped_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [14:0] j_9_reg_239;
reg   [14:0] j_9_reg_239_pp0_iter1_reg;
reg   [0:0] icmp_ln630_reg_244;
reg   [0:0] icmp_ln630_reg_244_pp0_iter1_reg;
reg   [15:0] tmp_reg_248;
wire   [15:0] pix_1_xFImageClipUtility_1_s_fu_115_ap_return;
reg  signed [15:0] pix_1_reg_253;
wire   [7:0] add_ln645_fu_157_p2;
reg   [7:0] add_ln645_reg_258;
wire   [7:0] p_fu_193_p3;
reg   [7:0] p_reg_263;
wire    pix_1_xFImageClipUtility_1_s_fu_115_ap_ready;
reg   [14:0] j_fu_62;
wire   [14:0] add_ln630_fu_142_p2;
wire    ap_loop_init;
reg   [14:0] ap_sig_allocacmp_j_9;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] zext_ln630_fu_132_p1;
wire  signed [15:0] trunc_ln645_fu_153_p0;
wire   [7:0] trunc_ln645_fu_153_p1;
wire  signed [31:0] sext_ln643_fu_162_p1;
wire   [6:0] trunc_ln645_2_fu_175_p1;
wire   [0:0] icmp_ln645_1_fu_170_p2;
wire   [7:0] shl_ln_fu_178_p3;
wire   [0:0] icmp_ln645_fu_165_p2;
wire   [7:0] select_ln645_fu_186_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

stereolbm_axis_cambm_xFImageClipUtility_1_s pix_1_xFImageClipUtility_1_s_fu_115(
    .ap_ready(pix_1_xFImageClipUtility_1_s_fu_115_ap_ready),
    .i(i),
    .j(j_9_reg_239_pp0_iter1_reg),
    .height(height_load),
    .width(width_load),
    .p_read(tmp_reg_248),
    .ap_return(pix_1_xFImageClipUtility_1_s_fu_115_ap_return)
);

stereolbm_axis_cambm_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln630_fu_136_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_62 <= add_ln630_fu_142_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_62 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln645_reg_258 <= add_ln645_fu_157_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        p_reg_263 <= p_fu_193_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln630_reg_244 <= icmp_ln630_fu_136_p2;
        icmp_ln630_reg_244_pp0_iter1_reg <= icmp_ln630_reg_244;
        j_9_reg_239 <= ap_sig_allocacmp_j_9;
        j_9_reg_239_pp0_iter1_reg <= j_9_reg_239;
        tmp_reg_248 <= in_sobel_x_data_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln630_reg_244_pp0_iter1_reg == 1'd1))) begin
        pix_1_reg_253 <= pix_1_xFImageClipUtility_1_s_fu_115_ap_return;
    end
end

always @ (*) begin
    if (((icmp_ln630_fu_136_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_9 = 15'd0;
    end else begin
        ap_sig_allocacmp_j_9 = j_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_sobel_x_data_blk_n = in_sobel_x_data_empty_n;
    end else begin
        in_sobel_x_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_sobel_x_data_read = 1'b1;
    end else begin
        in_sobel_x_data_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        left_clipped_blk_n = left_clipped_full_n;
    end else begin
        left_clipped_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        left_clipped_write = 1'b1;
    end else begin
        left_clipped_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln630_fu_142_p2 = (ap_sig_allocacmp_j_9 + 15'd1);

assign add_ln645_fu_157_p2 = (trunc_ln645_fu_153_p1 + cap_cast_i);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((left_clipped_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((in_sobel_x_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((left_clipped_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((in_sobel_x_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((left_clipped_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((in_sobel_x_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (in_sobel_x_data_empty_n == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (left_clipped_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln630_fu_136_p2 = (($signed(zext_ln630_fu_132_p1) < $signed(width_load)) ? 1'b1 : 1'b0);

assign icmp_ln645_1_fu_170_p2 = (($signed(sext_ln643_fu_162_p1) > $signed(sbmstate_preFilterCap_load)) ? 1'b1 : 1'b0);

assign icmp_ln645_fu_165_p2 = (($signed(sext_ln643_fu_162_p1) < $signed(sub25_i)) ? 1'b1 : 1'b0);

assign left_clipped_din = p_reg_263;

assign p_fu_193_p3 = ((icmp_ln645_fu_165_p2[0:0] == 1'b1) ? 8'd0 : select_ln645_fu_186_p3);

assign select_ln645_fu_186_p3 = ((icmp_ln645_1_fu_170_p2[0:0] == 1'b1) ? shl_ln_fu_178_p3 : add_ln645_reg_258);

assign sext_ln643_fu_162_p1 = pix_1_reg_253;

assign shl_ln_fu_178_p3 = {{trunc_ln645_2_fu_175_p1}, {1'd0}};

assign trunc_ln645_2_fu_175_p1 = sbmstate_preFilterCap_load[6:0];

assign trunc_ln645_fu_153_p0 = pix_1_xFImageClipUtility_1_s_fu_115_ap_return;

assign trunc_ln645_fu_153_p1 = trunc_ln645_fu_153_p0[7:0];

assign zext_ln630_fu_132_p1 = ap_sig_allocacmp_j_9;

endmodule //stereolbm_axis_cambm_xFImageClip_600_800_1_2_4_0_3_0_800_4_Pipeline_loop_col_clip
