// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module stereolbm_axis_cambm_Loop_VITIS_LOOP_46_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        irA_r_fix_address0,
        irA_r_fix_ce0,
        irA_r_fix_we0,
        irA_r_fix_d0,
        irA_l_fix_address0,
        irA_l_fix_ce0,
        irA_l_fix_we0,
        irA_l_fix_d0,
        cameraMA_r_fix_address0,
        cameraMA_r_fix_ce0,
        cameraMA_r_fix_we0,
        cameraMA_r_fix_d0,
        cameraMA_l_fix_address0,
        cameraMA_l_fix_ce0,
        cameraMA_l_fix_we0,
        cameraMA_l_fix_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [3:0] irA_r_fix_address0;
output   irA_r_fix_ce0;
output   irA_r_fix_we0;
output  [31:0] irA_r_fix_d0;
output  [3:0] irA_l_fix_address0;
output   irA_l_fix_ce0;
output   irA_l_fix_we0;
output  [31:0] irA_l_fix_d0;
output  [3:0] cameraMA_r_fix_address0;
output   cameraMA_r_fix_ce0;
output   cameraMA_r_fix_we0;
output  [31:0] cameraMA_r_fix_d0;
output  [3:0] cameraMA_l_fix_address0;
output   cameraMA_l_fix_ce0;
output   cameraMA_l_fix_we0;
output  [31:0] cameraMA_l_fix_d0;

reg ap_idle;
reg irA_r_fix_ce0;
reg irA_r_fix_we0;
reg irA_l_fix_ce0;
reg irA_l_fix_we0;
reg cameraMA_r_fix_ce0;
reg cameraMA_r_fix_we0;
reg cameraMA_l_fix_ce0;
reg cameraMA_l_fix_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln46_fu_212_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] cameraMA_l_address0;
reg    cameraMA_l_ce0;
wire   [31:0] cameraMA_l_q0;
wire   [3:0] cameraMA_r_address0;
reg    cameraMA_r_ce0;
wire   [31:0] cameraMA_r_q0;
wire   [3:0] irA_l_address0;
reg    irA_l_ce0;
wire   [31:0] irA_l_q0;
wire   [3:0] irA_r_address0;
reg    irA_r_ce0;
wire   [31:0] irA_r_q0;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln46_fu_224_p1;
reg   [63:0] zext_ln46_reg_1156;
reg   [63:0] zext_ln46_reg_1156_pp0_iter1_reg;
reg   [63:0] zext_ln46_reg_1156_pp0_iter2_reg;
reg   [63:0] zext_ln46_reg_1156_pp0_iter3_reg;
reg   [63:0] zext_ln46_reg_1156_pp0_iter4_reg;
reg   [31:0] cameraMA_l_load_reg_1184;
reg   [31:0] cameraMA_l_load_reg_1184_pp0_iter2_reg;
reg   [31:0] cameraMA_l_load_reg_1184_pp0_iter3_reg;
reg   [31:0] cameraMA_r_load_reg_1190;
reg   [31:0] cameraMA_r_load_reg_1190_pp0_iter2_reg;
reg   [31:0] cameraMA_r_load_reg_1190_pp0_iter3_reg;
reg   [31:0] irA_l_load_reg_1196;
reg   [31:0] irA_l_load_reg_1196_pp0_iter2_reg;
reg   [31:0] irA_l_load_reg_1196_pp0_iter3_reg;
reg   [31:0] irA_r_load_reg_1202;
reg   [31:0] irA_r_load_reg_1202_pp0_iter2_reg;
reg   [31:0] irA_r_load_reg_1202_pp0_iter3_reg;
wire   [62:0] trunc_ln50_fu_241_p1;
reg   [62:0] trunc_ln50_reg_1208;
reg   [0:0] tmp_reg_1213;
reg   [10:0] tmp_i_reg_1218;
wire   [51:0] trunc_ln50_1_fu_263_p1;
reg   [51:0] trunc_ln50_1_reg_1223;
wire   [62:0] trunc_ln51_fu_271_p1;
reg   [62:0] trunc_ln51_reg_1228;
reg   [0:0] tmp_311_reg_1233;
reg   [10:0] tmp_32_i_reg_1238;
wire   [51:0] trunc_ln51_1_fu_293_p1;
reg   [51:0] trunc_ln51_1_reg_1243;
wire   [62:0] trunc_ln52_fu_301_p1;
reg   [62:0] trunc_ln52_reg_1248;
reg   [0:0] tmp_314_reg_1253;
reg   [10:0] tmp_38_i_reg_1258;
wire   [51:0] trunc_ln52_1_fu_323_p1;
reg   [51:0] trunc_ln52_1_reg_1263;
wire   [62:0] trunc_ln53_fu_331_p1;
reg   [62:0] trunc_ln53_reg_1268;
reg   [0:0] tmp_317_reg_1273;
reg   [10:0] tmp_41_i_reg_1278;
wire   [51:0] trunc_ln53_1_fu_353_p1;
reg   [51:0] trunc_ln53_1_reg_1283;
wire   [53:0] select_ln50_fu_377_p3;
reg   [53:0] select_ln50_reg_1288;
wire   [0:0] icmp_ln50_fu_384_p2;
reg   [0:0] icmp_ln50_reg_1293;
wire   [0:0] icmp_ln50_1_fu_395_p2;
reg   [0:0] icmp_ln50_1_reg_1300;
wire  signed [11:0] select_ln50_1_fu_413_p3;
reg  signed [11:0] select_ln50_1_reg_1305;
wire   [0:0] icmp_ln50_2_fu_421_p2;
reg   [0:0] icmp_ln50_2_reg_1311;
wire   [31:0] trunc_ln50_2_fu_427_p1;
reg   [31:0] trunc_ln50_2_reg_1317;
wire   [0:0] icmp_ln50_4_fu_441_p2;
reg   [0:0] icmp_ln50_4_reg_1323;
wire   [53:0] select_ln51_fu_467_p3;
reg   [53:0] select_ln51_reg_1328;
wire   [0:0] icmp_ln51_fu_474_p2;
reg   [0:0] icmp_ln51_reg_1333;
wire   [0:0] icmp_ln51_1_fu_485_p2;
reg   [0:0] icmp_ln51_1_reg_1340;
wire  signed [11:0] select_ln51_1_fu_503_p3;
reg  signed [11:0] select_ln51_1_reg_1345;
wire   [0:0] icmp_ln51_2_fu_511_p2;
reg   [0:0] icmp_ln51_2_reg_1351;
wire   [31:0] trunc_ln51_2_fu_517_p1;
reg   [31:0] trunc_ln51_2_reg_1357;
wire   [0:0] icmp_ln51_4_fu_531_p2;
reg   [0:0] icmp_ln51_4_reg_1363;
wire   [53:0] select_ln52_fu_557_p3;
reg   [53:0] select_ln52_reg_1368;
wire   [0:0] icmp_ln52_fu_564_p2;
reg   [0:0] icmp_ln52_reg_1373;
wire   [0:0] icmp_ln52_1_fu_575_p2;
reg   [0:0] icmp_ln52_1_reg_1380;
wire  signed [11:0] select_ln52_1_fu_593_p3;
reg  signed [11:0] select_ln52_1_reg_1385;
wire   [0:0] icmp_ln52_2_fu_601_p2;
reg   [0:0] icmp_ln52_2_reg_1391;
wire   [31:0] trunc_ln52_2_fu_607_p1;
reg   [31:0] trunc_ln52_2_reg_1397;
wire   [0:0] icmp_ln52_4_fu_621_p2;
reg   [0:0] icmp_ln52_4_reg_1403;
wire   [53:0] select_ln53_fu_647_p3;
reg   [53:0] select_ln53_reg_1408;
wire   [0:0] icmp_ln53_fu_654_p2;
reg   [0:0] icmp_ln53_reg_1413;
wire   [0:0] icmp_ln53_1_fu_665_p2;
reg   [0:0] icmp_ln53_1_reg_1420;
wire  signed [11:0] select_ln53_1_fu_683_p3;
reg  signed [11:0] select_ln53_1_reg_1425;
wire   [0:0] icmp_ln53_2_fu_691_p2;
reg   [0:0] icmp_ln53_2_reg_1431;
wire   [31:0] trunc_ln53_2_fu_697_p1;
reg   [31:0] trunc_ln53_2_reg_1437;
wire   [0:0] icmp_ln53_4_fu_711_p2;
reg   [0:0] icmp_ln53_4_reg_1443;
wire   [31:0] select_ln50_6_fu_816_p3;
reg   [31:0] select_ln50_6_reg_1448;
wire   [31:0] select_ln51_6_fu_923_p3;
reg   [31:0] select_ln51_6_reg_1453;
wire   [31:0] select_ln52_6_fu_1030_p3;
reg   [31:0] select_ln52_6_reg_1458;
wire   [31:0] select_ln53_6_fu_1137_p3;
reg   [31:0] select_ln53_6_reg_1463;
wire    ap_block_pp0_stage0;
reg   [3:0] i_fu_80;
wire   [3:0] add_ln46_fu_218_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_14;
wire   [63:0] grp_fu_188_p1;
wire   [63:0] bitcast_ln724_fu_237_p1;
wire   [63:0] grp_fu_192_p1;
wire   [63:0] bitcast_ln724_4_fu_267_p1;
wire   [63:0] grp_fu_196_p1;
wire   [63:0] bitcast_ln724_6_fu_297_p1;
wire   [63:0] grp_fu_200_p1;
wire   [63:0] bitcast_ln724_8_fu_327_p1;
wire   [52:0] zext_ln50_1_cast_fu_360_p3;
wire   [53:0] zext_ln50_1_fu_367_p1;
wire   [53:0] sub_ln50_fu_371_p2;
wire   [11:0] zext_ln50_fu_357_p1;
wire   [11:0] sub_ln50_1_fu_389_p2;
wire   [11:0] add_ln50_fu_401_p2;
wire   [11:0] sub_ln50_2_fu_407_p2;
wire   [6:0] tmp_310_fu_431_p4;
wire   [52:0] zext_ln51_1_cast_fu_450_p3;
wire   [53:0] zext_ln51_1_fu_457_p1;
wire   [53:0] sub_ln51_fu_461_p2;
wire   [11:0] zext_ln51_fu_447_p1;
wire   [11:0] sub_ln51_1_fu_479_p2;
wire   [11:0] add_ln51_fu_491_p2;
wire   [11:0] sub_ln51_2_fu_497_p2;
wire   [6:0] tmp_313_fu_521_p4;
wire   [52:0] zext_ln52_1_cast_fu_540_p3;
wire   [53:0] zext_ln52_1_fu_547_p1;
wire   [53:0] sub_ln52_fu_551_p2;
wire   [11:0] zext_ln52_fu_537_p1;
wire   [11:0] sub_ln52_1_fu_569_p2;
wire   [11:0] add_ln52_fu_581_p2;
wire   [11:0] sub_ln52_2_fu_587_p2;
wire   [6:0] tmp_316_fu_611_p4;
wire   [52:0] zext_ln53_1_cast_fu_630_p3;
wire   [53:0] zext_ln53_1_fu_637_p1;
wire   [53:0] sub_ln53_fu_641_p2;
wire   [11:0] zext_ln53_fu_627_p1;
wire   [11:0] sub_ln53_1_fu_659_p2;
wire   [11:0] add_ln53_fu_671_p2;
wire   [11:0] sub_ln53_2_fu_677_p2;
wire   [6:0] tmp_319_fu_701_p4;
wire  signed [31:0] sext_ln50_fu_717_p1;
wire   [53:0] zext_ln50_2_fu_725_p1;
wire   [53:0] ashr_ln50_fu_729_p2;
wire   [31:0] bitcast_ln724_2_fu_738_p1;
wire   [0:0] tmp_309_fu_741_p3;
wire   [0:0] icmp_ln50_3_fu_720_p2;
wire   [31:0] trunc_ln50_3_fu_734_p1;
wire   [31:0] select_ln50_7_fu_749_p3;
wire   [31:0] shl_ln50_fu_765_p2;
wire   [31:0] select_ln50_3_fu_770_p3;
wire   [0:0] xor_ln50_fu_784_p2;
wire   [0:0] and_ln50_fu_789_p2;
wire   [31:0] select_ln50_4_fu_777_p3;
wire   [0:0] or_ln50_fu_801_p2;
wire   [0:0] xor_ln50_1_fu_805_p2;
wire   [0:0] and_ln50_1_fu_811_p2;
wire   [31:0] select_ln50_2_fu_757_p3;
wire   [31:0] select_ln50_5_fu_794_p3;
wire  signed [31:0] sext_ln51_fu_824_p1;
wire   [53:0] zext_ln51_2_fu_832_p1;
wire   [53:0] ashr_ln51_fu_836_p2;
wire   [31:0] bitcast_ln724_5_fu_845_p1;
wire   [0:0] tmp_312_fu_848_p3;
wire   [0:0] icmp_ln51_3_fu_827_p2;
wire   [31:0] trunc_ln51_3_fu_841_p1;
wire   [31:0] select_ln51_7_fu_856_p3;
wire   [31:0] shl_ln51_fu_872_p2;
wire   [31:0] select_ln51_3_fu_877_p3;
wire   [0:0] xor_ln51_fu_891_p2;
wire   [0:0] and_ln51_fu_896_p2;
wire   [31:0] select_ln51_4_fu_884_p3;
wire   [0:0] or_ln51_fu_908_p2;
wire   [0:0] xor_ln51_1_fu_912_p2;
wire   [0:0] and_ln51_1_fu_918_p2;
wire   [31:0] select_ln51_2_fu_864_p3;
wire   [31:0] select_ln51_5_fu_901_p3;
wire  signed [31:0] sext_ln52_fu_931_p1;
wire   [53:0] zext_ln52_2_fu_939_p1;
wire   [53:0] ashr_ln52_fu_943_p2;
wire   [31:0] bitcast_ln724_7_fu_952_p1;
wire   [0:0] tmp_315_fu_955_p3;
wire   [0:0] icmp_ln52_3_fu_934_p2;
wire   [31:0] trunc_ln52_3_fu_948_p1;
wire   [31:0] select_ln52_7_fu_963_p3;
wire   [31:0] shl_ln52_fu_979_p2;
wire   [31:0] select_ln52_3_fu_984_p3;
wire   [0:0] xor_ln52_fu_998_p2;
wire   [0:0] and_ln52_fu_1003_p2;
wire   [31:0] select_ln52_4_fu_991_p3;
wire   [0:0] or_ln52_fu_1015_p2;
wire   [0:0] xor_ln52_1_fu_1019_p2;
wire   [0:0] and_ln52_1_fu_1025_p2;
wire   [31:0] select_ln52_2_fu_971_p3;
wire   [31:0] select_ln52_5_fu_1008_p3;
wire  signed [31:0] sext_ln53_fu_1038_p1;
wire   [53:0] zext_ln53_2_fu_1046_p1;
wire   [53:0] ashr_ln53_fu_1050_p2;
wire   [31:0] bitcast_ln724_9_fu_1059_p1;
wire   [0:0] tmp_318_fu_1062_p3;
wire   [0:0] icmp_ln53_3_fu_1041_p2;
wire   [31:0] trunc_ln53_3_fu_1055_p1;
wire   [31:0] select_ln53_7_fu_1070_p3;
wire   [31:0] shl_ln53_fu_1086_p2;
wire   [31:0] select_ln53_3_fu_1091_p3;
wire   [0:0] xor_ln53_fu_1105_p2;
wire   [0:0] and_ln53_fu_1110_p2;
wire   [31:0] select_ln53_4_fu_1098_p3;
wire   [0:0] or_ln53_fu_1122_p2;
wire   [0:0] xor_ln53_1_fu_1126_p2;
wire   [0:0] and_ln53_1_fu_1132_p2;
wire   [31:0] select_ln53_2_fu_1078_p3;
wire   [31:0] select_ln53_5_fu_1115_p3;
reg    grp_fu_188_ce;
reg    grp_fu_192_ce;
reg    grp_fu_196_ce;
reg    grp_fu_200_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_280;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

stereolbm_axis_cambm_Loop_VITIS_LOOP_46_1_proc_cameraMA_l_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
cameraMA_l_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cameraMA_l_address0),
    .ce0(cameraMA_l_ce0),
    .q0(cameraMA_l_q0)
);

stereolbm_axis_cambm_Loop_VITIS_LOOP_46_1_proc_cameraMA_r_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
cameraMA_r_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cameraMA_r_address0),
    .ce0(cameraMA_r_ce0),
    .q0(cameraMA_r_q0)
);

stereolbm_axis_cambm_Loop_VITIS_LOOP_46_1_proc_irA_l_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
irA_l_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(irA_l_address0),
    .ce0(irA_l_ce0),
    .q0(irA_l_q0)
);

stereolbm_axis_cambm_Loop_VITIS_LOOP_46_1_proc_irA_l_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
irA_r_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(irA_r_address0),
    .ce0(irA_r_ce0),
    .q0(irA_r_q0)
);

stereolbm_axis_cambm_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(cameraMA_l_q0),
    .ce(grp_fu_188_ce),
    .dout(grp_fu_188_p1)
);

stereolbm_axis_cambm_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(cameraMA_r_q0),
    .ce(grp_fu_192_ce),
    .dout(grp_fu_192_p1)
);

stereolbm_axis_cambm_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(irA_l_q0),
    .ce(grp_fu_196_ce),
    .dout(grp_fu_196_p1)
);

stereolbm_axis_cambm_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(irA_r_q0),
    .ce(grp_fu_200_ce),
    .dout(grp_fu_200_p1)
);

stereolbm_axis_cambm_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_280)) begin
        if ((icmp_ln46_fu_212_p2 == 1'd0)) begin
            i_fu_80 <= add_ln46_fu_218_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_80 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        cameraMA_l_load_reg_1184 <= cameraMA_l_q0;
        cameraMA_r_load_reg_1190 <= cameraMA_r_q0;
        irA_l_load_reg_1196 <= irA_l_q0;
        irA_r_load_reg_1202 <= irA_r_q0;
        zext_ln46_reg_1156_pp0_iter1_reg[3 : 0] <= zext_ln46_reg_1156[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        cameraMA_l_load_reg_1184_pp0_iter2_reg <= cameraMA_l_load_reg_1184;
        cameraMA_l_load_reg_1184_pp0_iter3_reg <= cameraMA_l_load_reg_1184_pp0_iter2_reg;
        cameraMA_r_load_reg_1190_pp0_iter2_reg <= cameraMA_r_load_reg_1190;
        cameraMA_r_load_reg_1190_pp0_iter3_reg <= cameraMA_r_load_reg_1190_pp0_iter2_reg;
        icmp_ln50_1_reg_1300 <= icmp_ln50_1_fu_395_p2;
        icmp_ln50_2_reg_1311 <= icmp_ln50_2_fu_421_p2;
        icmp_ln50_4_reg_1323 <= icmp_ln50_4_fu_441_p2;
        icmp_ln50_reg_1293 <= icmp_ln50_fu_384_p2;
        icmp_ln51_1_reg_1340 <= icmp_ln51_1_fu_485_p2;
        icmp_ln51_2_reg_1351 <= icmp_ln51_2_fu_511_p2;
        icmp_ln51_4_reg_1363 <= icmp_ln51_4_fu_531_p2;
        icmp_ln51_reg_1333 <= icmp_ln51_fu_474_p2;
        icmp_ln52_1_reg_1380 <= icmp_ln52_1_fu_575_p2;
        icmp_ln52_2_reg_1391 <= icmp_ln52_2_fu_601_p2;
        icmp_ln52_4_reg_1403 <= icmp_ln52_4_fu_621_p2;
        icmp_ln52_reg_1373 <= icmp_ln52_fu_564_p2;
        icmp_ln53_1_reg_1420 <= icmp_ln53_1_fu_665_p2;
        icmp_ln53_2_reg_1431 <= icmp_ln53_2_fu_691_p2;
        icmp_ln53_4_reg_1443 <= icmp_ln53_4_fu_711_p2;
        icmp_ln53_reg_1413 <= icmp_ln53_fu_654_p2;
        irA_l_load_reg_1196_pp0_iter2_reg <= irA_l_load_reg_1196;
        irA_l_load_reg_1196_pp0_iter3_reg <= irA_l_load_reg_1196_pp0_iter2_reg;
        irA_r_load_reg_1202_pp0_iter2_reg <= irA_r_load_reg_1202;
        irA_r_load_reg_1202_pp0_iter3_reg <= irA_r_load_reg_1202_pp0_iter2_reg;
        select_ln50_1_reg_1305 <= select_ln50_1_fu_413_p3;
        select_ln50_6_reg_1448 <= select_ln50_6_fu_816_p3;
        select_ln50_reg_1288 <= select_ln50_fu_377_p3;
        select_ln51_1_reg_1345 <= select_ln51_1_fu_503_p3;
        select_ln51_6_reg_1453 <= select_ln51_6_fu_923_p3;
        select_ln51_reg_1328 <= select_ln51_fu_467_p3;
        select_ln52_1_reg_1385 <= select_ln52_1_fu_593_p3;
        select_ln52_6_reg_1458 <= select_ln52_6_fu_1030_p3;
        select_ln52_reg_1368 <= select_ln52_fu_557_p3;
        select_ln53_1_reg_1425 <= select_ln53_1_fu_683_p3;
        select_ln53_6_reg_1463 <= select_ln53_6_fu_1137_p3;
        select_ln53_reg_1408 <= select_ln53_fu_647_p3;
        tmp_311_reg_1233 <= bitcast_ln724_4_fu_267_p1[32'd63];
        tmp_314_reg_1253 <= bitcast_ln724_6_fu_297_p1[32'd63];
        tmp_317_reg_1273 <= bitcast_ln724_8_fu_327_p1[32'd63];
        tmp_32_i_reg_1238 <= {{bitcast_ln724_4_fu_267_p1[62:52]}};
        tmp_38_i_reg_1258 <= {{bitcast_ln724_6_fu_297_p1[62:52]}};
        tmp_41_i_reg_1278 <= {{bitcast_ln724_8_fu_327_p1[62:52]}};
        tmp_i_reg_1218 <= {{bitcast_ln724_fu_237_p1[62:52]}};
        tmp_reg_1213 <= bitcast_ln724_fu_237_p1[32'd63];
        trunc_ln50_1_reg_1223 <= trunc_ln50_1_fu_263_p1;
        trunc_ln50_2_reg_1317 <= trunc_ln50_2_fu_427_p1;
        trunc_ln50_reg_1208 <= trunc_ln50_fu_241_p1;
        trunc_ln51_1_reg_1243 <= trunc_ln51_1_fu_293_p1;
        trunc_ln51_2_reg_1357 <= trunc_ln51_2_fu_517_p1;
        trunc_ln51_reg_1228 <= trunc_ln51_fu_271_p1;
        trunc_ln52_1_reg_1263 <= trunc_ln52_1_fu_323_p1;
        trunc_ln52_2_reg_1397 <= trunc_ln52_2_fu_607_p1;
        trunc_ln52_reg_1248 <= trunc_ln52_fu_301_p1;
        trunc_ln53_1_reg_1283 <= trunc_ln53_1_fu_353_p1;
        trunc_ln53_2_reg_1437 <= trunc_ln53_2_fu_697_p1;
        trunc_ln53_reg_1268 <= trunc_ln53_fu_331_p1;
        zext_ln46_reg_1156_pp0_iter2_reg[3 : 0] <= zext_ln46_reg_1156_pp0_iter1_reg[3 : 0];
        zext_ln46_reg_1156_pp0_iter3_reg[3 : 0] <= zext_ln46_reg_1156_pp0_iter2_reg[3 : 0];
        zext_ln46_reg_1156_pp0_iter4_reg[3 : 0] <= zext_ln46_reg_1156_pp0_iter3_reg[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_212_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln46_reg_1156[3 : 0] <= zext_ln46_fu_224_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln46_fu_212_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_14 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_14 = i_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cameraMA_l_ce0 = 1'b1;
    end else begin
        cameraMA_l_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        cameraMA_l_fix_ce0 = 1'b1;
    end else begin
        cameraMA_l_fix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        cameraMA_l_fix_we0 = 1'b1;
    end else begin
        cameraMA_l_fix_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cameraMA_r_ce0 = 1'b1;
    end else begin
        cameraMA_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        cameraMA_r_fix_ce0 = 1'b1;
    end else begin
        cameraMA_r_fix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        cameraMA_r_fix_we0 = 1'b1;
    end else begin
        cameraMA_r_fix_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_188_ce = 1'b1;
    end else begin
        grp_fu_188_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_192_ce = 1'b1;
    end else begin
        grp_fu_192_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_196_ce = 1'b1;
    end else begin
        grp_fu_196_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_200_ce = 1'b1;
    end else begin
        grp_fu_200_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        irA_l_ce0 = 1'b1;
    end else begin
        irA_l_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        irA_l_fix_ce0 = 1'b1;
    end else begin
        irA_l_fix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        irA_l_fix_we0 = 1'b1;
    end else begin
        irA_l_fix_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        irA_r_ce0 = 1'b1;
    end else begin
        irA_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        irA_r_fix_ce0 = 1'b1;
    end else begin
        irA_r_fix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        irA_r_fix_we0 = 1'b1;
    end else begin
        irA_r_fix_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln46_fu_218_p2 = (ap_sig_allocacmp_i_14 + 4'd1);

assign add_ln50_fu_401_p2 = ($signed(sub_ln50_1_fu_389_p2) + $signed(12'd4076));

assign add_ln51_fu_491_p2 = ($signed(sub_ln51_1_fu_479_p2) + $signed(12'd4076));

assign add_ln52_fu_581_p2 = ($signed(sub_ln52_1_fu_569_p2) + $signed(12'd4076));

assign add_ln53_fu_671_p2 = ($signed(sub_ln53_1_fu_659_p2) + $signed(12'd4076));

assign and_ln50_1_fu_811_p2 = (xor_ln50_1_fu_805_p2 & icmp_ln50_1_reg_1300);

assign and_ln50_fu_789_p2 = (xor_ln50_fu_784_p2 & icmp_ln50_2_reg_1311);

assign and_ln51_1_fu_918_p2 = (xor_ln51_1_fu_912_p2 & icmp_ln51_1_reg_1340);

assign and_ln51_fu_896_p2 = (xor_ln51_fu_891_p2 & icmp_ln51_2_reg_1351);

assign and_ln52_1_fu_1025_p2 = (xor_ln52_1_fu_1019_p2 & icmp_ln52_1_reg_1380);

assign and_ln52_fu_1003_p2 = (xor_ln52_fu_998_p2 & icmp_ln52_2_reg_1391);

assign and_ln53_1_fu_1132_p2 = (xor_ln53_1_fu_1126_p2 & icmp_ln53_1_reg_1420);

assign and_ln53_fu_1110_p2 = (xor_ln53_fu_1105_p2 & icmp_ln53_2_reg_1431);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_280 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ashr_ln50_fu_729_p2 = $signed(select_ln50_reg_1288) >>> zext_ln50_2_fu_725_p1;

assign ashr_ln51_fu_836_p2 = $signed(select_ln51_reg_1328) >>> zext_ln51_2_fu_832_p1;

assign ashr_ln52_fu_943_p2 = $signed(select_ln52_reg_1368) >>> zext_ln52_2_fu_939_p1;

assign ashr_ln53_fu_1050_p2 = $signed(select_ln53_reg_1408) >>> zext_ln53_2_fu_1046_p1;

assign bitcast_ln724_2_fu_738_p1 = cameraMA_l_load_reg_1184_pp0_iter3_reg;

assign bitcast_ln724_4_fu_267_p1 = grp_fu_192_p1;

assign bitcast_ln724_5_fu_845_p1 = cameraMA_r_load_reg_1190_pp0_iter3_reg;

assign bitcast_ln724_6_fu_297_p1 = grp_fu_196_p1;

assign bitcast_ln724_7_fu_952_p1 = irA_l_load_reg_1196_pp0_iter3_reg;

assign bitcast_ln724_8_fu_327_p1 = grp_fu_200_p1;

assign bitcast_ln724_9_fu_1059_p1 = irA_r_load_reg_1202_pp0_iter3_reg;

assign bitcast_ln724_fu_237_p1 = grp_fu_188_p1;

assign cameraMA_l_address0 = zext_ln46_fu_224_p1;

assign cameraMA_l_fix_address0 = zext_ln46_reg_1156_pp0_iter4_reg;

assign cameraMA_l_fix_d0 = select_ln50_6_reg_1448;

assign cameraMA_r_address0 = zext_ln46_fu_224_p1;

assign cameraMA_r_fix_address0 = zext_ln46_reg_1156_pp0_iter4_reg;

assign cameraMA_r_fix_d0 = select_ln51_6_reg_1453;

assign icmp_ln46_fu_212_p2 = ((ap_sig_allocacmp_i_14 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln50_1_fu_395_p2 = (($signed(sub_ln50_1_fu_389_p2) > $signed(12'd20)) ? 1'b1 : 1'b0);

assign icmp_ln50_2_fu_421_p2 = ((sub_ln50_1_fu_389_p2 == 12'd20) ? 1'b1 : 1'b0);

assign icmp_ln50_3_fu_720_p2 = ((select_ln50_1_reg_1305 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln50_4_fu_441_p2 = ((tmp_310_fu_431_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_384_p2 = ((trunc_ln50_reg_1208 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln51_1_fu_485_p2 = (($signed(sub_ln51_1_fu_479_p2) > $signed(12'd20)) ? 1'b1 : 1'b0);

assign icmp_ln51_2_fu_511_p2 = ((sub_ln51_1_fu_479_p2 == 12'd20) ? 1'b1 : 1'b0);

assign icmp_ln51_3_fu_827_p2 = ((select_ln51_1_reg_1345 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln51_4_fu_531_p2 = ((tmp_313_fu_521_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_474_p2 = ((trunc_ln51_reg_1228 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_1_fu_575_p2 = (($signed(sub_ln52_1_fu_569_p2) > $signed(12'd20)) ? 1'b1 : 1'b0);

assign icmp_ln52_2_fu_601_p2 = ((sub_ln52_1_fu_569_p2 == 12'd20) ? 1'b1 : 1'b0);

assign icmp_ln52_3_fu_934_p2 = ((select_ln52_1_reg_1385 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln52_4_fu_621_p2 = ((tmp_316_fu_611_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_564_p2 = ((trunc_ln52_reg_1248 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln53_1_fu_665_p2 = (($signed(sub_ln53_1_fu_659_p2) > $signed(12'd20)) ? 1'b1 : 1'b0);

assign icmp_ln53_2_fu_691_p2 = ((sub_ln53_1_fu_659_p2 == 12'd20) ? 1'b1 : 1'b0);

assign icmp_ln53_3_fu_1041_p2 = ((select_ln53_1_reg_1425 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln53_4_fu_711_p2 = ((tmp_319_fu_701_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_654_p2 = ((trunc_ln53_reg_1268 == 63'd0) ? 1'b1 : 1'b0);

assign irA_l_address0 = zext_ln46_fu_224_p1;

assign irA_l_fix_address0 = zext_ln46_reg_1156_pp0_iter4_reg;

assign irA_l_fix_d0 = select_ln52_6_reg_1458;

assign irA_r_address0 = zext_ln46_fu_224_p1;

assign irA_r_fix_address0 = zext_ln46_reg_1156_pp0_iter4_reg;

assign irA_r_fix_d0 = select_ln53_6_reg_1463;

assign or_ln50_fu_801_p2 = (icmp_ln50_reg_1293 | icmp_ln50_2_reg_1311);

assign or_ln51_fu_908_p2 = (icmp_ln51_reg_1333 | icmp_ln51_2_reg_1351);

assign or_ln52_fu_1015_p2 = (icmp_ln52_reg_1373 | icmp_ln52_2_reg_1391);

assign or_ln53_fu_1122_p2 = (icmp_ln53_reg_1413 | icmp_ln53_2_reg_1431);

assign select_ln50_1_fu_413_p3 = ((icmp_ln50_1_fu_395_p2[0:0] == 1'b1) ? add_ln50_fu_401_p2 : sub_ln50_2_fu_407_p2);

assign select_ln50_2_fu_757_p3 = ((icmp_ln50_3_fu_720_p2[0:0] == 1'b1) ? trunc_ln50_3_fu_734_p1 : select_ln50_7_fu_749_p3);

assign select_ln50_3_fu_770_p3 = ((icmp_ln50_4_reg_1323[0:0] == 1'b1) ? shl_ln50_fu_765_p2 : 32'd0);

assign select_ln50_4_fu_777_p3 = ((icmp_ln50_reg_1293[0:0] == 1'b1) ? 32'd0 : select_ln50_3_fu_770_p3);

assign select_ln50_5_fu_794_p3 = ((and_ln50_fu_789_p2[0:0] == 1'b1) ? trunc_ln50_2_reg_1317 : select_ln50_4_fu_777_p3);

assign select_ln50_6_fu_816_p3 = ((and_ln50_1_fu_811_p2[0:0] == 1'b1) ? select_ln50_2_fu_757_p3 : select_ln50_5_fu_794_p3);

assign select_ln50_7_fu_749_p3 = ((tmp_309_fu_741_p3[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln50_fu_377_p3 = ((tmp_reg_1213[0:0] == 1'b1) ? sub_ln50_fu_371_p2 : zext_ln50_1_fu_367_p1);

assign select_ln51_1_fu_503_p3 = ((icmp_ln51_1_fu_485_p2[0:0] == 1'b1) ? add_ln51_fu_491_p2 : sub_ln51_2_fu_497_p2);

assign select_ln51_2_fu_864_p3 = ((icmp_ln51_3_fu_827_p2[0:0] == 1'b1) ? trunc_ln51_3_fu_841_p1 : select_ln51_7_fu_856_p3);

assign select_ln51_3_fu_877_p3 = ((icmp_ln51_4_reg_1363[0:0] == 1'b1) ? shl_ln51_fu_872_p2 : 32'd0);

assign select_ln51_4_fu_884_p3 = ((icmp_ln51_reg_1333[0:0] == 1'b1) ? 32'd0 : select_ln51_3_fu_877_p3);

assign select_ln51_5_fu_901_p3 = ((and_ln51_fu_896_p2[0:0] == 1'b1) ? trunc_ln51_2_reg_1357 : select_ln51_4_fu_884_p3);

assign select_ln51_6_fu_923_p3 = ((and_ln51_1_fu_918_p2[0:0] == 1'b1) ? select_ln51_2_fu_864_p3 : select_ln51_5_fu_901_p3);

assign select_ln51_7_fu_856_p3 = ((tmp_312_fu_848_p3[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln51_fu_467_p3 = ((tmp_311_reg_1233[0:0] == 1'b1) ? sub_ln51_fu_461_p2 : zext_ln51_1_fu_457_p1);

assign select_ln52_1_fu_593_p3 = ((icmp_ln52_1_fu_575_p2[0:0] == 1'b1) ? add_ln52_fu_581_p2 : sub_ln52_2_fu_587_p2);

assign select_ln52_2_fu_971_p3 = ((icmp_ln52_3_fu_934_p2[0:0] == 1'b1) ? trunc_ln52_3_fu_948_p1 : select_ln52_7_fu_963_p3);

assign select_ln52_3_fu_984_p3 = ((icmp_ln52_4_reg_1403[0:0] == 1'b1) ? shl_ln52_fu_979_p2 : 32'd0);

assign select_ln52_4_fu_991_p3 = ((icmp_ln52_reg_1373[0:0] == 1'b1) ? 32'd0 : select_ln52_3_fu_984_p3);

assign select_ln52_5_fu_1008_p3 = ((and_ln52_fu_1003_p2[0:0] == 1'b1) ? trunc_ln52_2_reg_1397 : select_ln52_4_fu_991_p3);

assign select_ln52_6_fu_1030_p3 = ((and_ln52_1_fu_1025_p2[0:0] == 1'b1) ? select_ln52_2_fu_971_p3 : select_ln52_5_fu_1008_p3);

assign select_ln52_7_fu_963_p3 = ((tmp_315_fu_955_p3[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln52_fu_557_p3 = ((tmp_314_reg_1253[0:0] == 1'b1) ? sub_ln52_fu_551_p2 : zext_ln52_1_fu_547_p1);

assign select_ln53_1_fu_683_p3 = ((icmp_ln53_1_fu_665_p2[0:0] == 1'b1) ? add_ln53_fu_671_p2 : sub_ln53_2_fu_677_p2);

assign select_ln53_2_fu_1078_p3 = ((icmp_ln53_3_fu_1041_p2[0:0] == 1'b1) ? trunc_ln53_3_fu_1055_p1 : select_ln53_7_fu_1070_p3);

assign select_ln53_3_fu_1091_p3 = ((icmp_ln53_4_reg_1443[0:0] == 1'b1) ? shl_ln53_fu_1086_p2 : 32'd0);

assign select_ln53_4_fu_1098_p3 = ((icmp_ln53_reg_1413[0:0] == 1'b1) ? 32'd0 : select_ln53_3_fu_1091_p3);

assign select_ln53_5_fu_1115_p3 = ((and_ln53_fu_1110_p2[0:0] == 1'b1) ? trunc_ln53_2_reg_1437 : select_ln53_4_fu_1098_p3);

assign select_ln53_6_fu_1137_p3 = ((and_ln53_1_fu_1132_p2[0:0] == 1'b1) ? select_ln53_2_fu_1078_p3 : select_ln53_5_fu_1115_p3);

assign select_ln53_7_fu_1070_p3 = ((tmp_318_fu_1062_p3[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln53_fu_647_p3 = ((tmp_317_reg_1273[0:0] == 1'b1) ? sub_ln53_fu_641_p2 : zext_ln53_1_fu_637_p1);

assign sext_ln50_fu_717_p1 = select_ln50_1_reg_1305;

assign sext_ln51_fu_824_p1 = select_ln51_1_reg_1345;

assign sext_ln52_fu_931_p1 = select_ln52_1_reg_1385;

assign sext_ln53_fu_1038_p1 = select_ln53_1_reg_1425;

assign shl_ln50_fu_765_p2 = trunc_ln50_2_reg_1317 << sext_ln50_fu_717_p1;

assign shl_ln51_fu_872_p2 = trunc_ln51_2_reg_1357 << sext_ln51_fu_824_p1;

assign shl_ln52_fu_979_p2 = trunc_ln52_2_reg_1397 << sext_ln52_fu_931_p1;

assign shl_ln53_fu_1086_p2 = trunc_ln53_2_reg_1437 << sext_ln53_fu_1038_p1;

assign sub_ln50_1_fu_389_p2 = (12'd1075 - zext_ln50_fu_357_p1);

assign sub_ln50_2_fu_407_p2 = (12'd20 - sub_ln50_1_fu_389_p2);

assign sub_ln50_fu_371_p2 = (54'd0 - zext_ln50_1_fu_367_p1);

assign sub_ln51_1_fu_479_p2 = (12'd1075 - zext_ln51_fu_447_p1);

assign sub_ln51_2_fu_497_p2 = (12'd20 - sub_ln51_1_fu_479_p2);

assign sub_ln51_fu_461_p2 = (54'd0 - zext_ln51_1_fu_457_p1);

assign sub_ln52_1_fu_569_p2 = (12'd1075 - zext_ln52_fu_537_p1);

assign sub_ln52_2_fu_587_p2 = (12'd20 - sub_ln52_1_fu_569_p2);

assign sub_ln52_fu_551_p2 = (54'd0 - zext_ln52_1_fu_547_p1);

assign sub_ln53_1_fu_659_p2 = (12'd1075 - zext_ln53_fu_627_p1);

assign sub_ln53_2_fu_677_p2 = (12'd20 - sub_ln53_1_fu_659_p2);

assign sub_ln53_fu_641_p2 = (54'd0 - zext_ln53_1_fu_637_p1);

assign tmp_309_fu_741_p3 = bitcast_ln724_2_fu_738_p1[32'd31];

assign tmp_310_fu_431_p4 = {{select_ln50_1_fu_413_p3[11:5]}};

assign tmp_312_fu_848_p3 = bitcast_ln724_5_fu_845_p1[32'd31];

assign tmp_313_fu_521_p4 = {{select_ln51_1_fu_503_p3[11:5]}};

assign tmp_315_fu_955_p3 = bitcast_ln724_7_fu_952_p1[32'd31];

assign tmp_316_fu_611_p4 = {{select_ln52_1_fu_593_p3[11:5]}};

assign tmp_318_fu_1062_p3 = bitcast_ln724_9_fu_1059_p1[32'd31];

assign tmp_319_fu_701_p4 = {{select_ln53_1_fu_683_p3[11:5]}};

assign trunc_ln50_1_fu_263_p1 = bitcast_ln724_fu_237_p1[51:0];

assign trunc_ln50_2_fu_427_p1 = select_ln50_fu_377_p3[31:0];

assign trunc_ln50_3_fu_734_p1 = ashr_ln50_fu_729_p2[31:0];

assign trunc_ln50_fu_241_p1 = bitcast_ln724_fu_237_p1[62:0];

assign trunc_ln51_1_fu_293_p1 = bitcast_ln724_4_fu_267_p1[51:0];

assign trunc_ln51_2_fu_517_p1 = select_ln51_fu_467_p3[31:0];

assign trunc_ln51_3_fu_841_p1 = ashr_ln51_fu_836_p2[31:0];

assign trunc_ln51_fu_271_p1 = bitcast_ln724_4_fu_267_p1[62:0];

assign trunc_ln52_1_fu_323_p1 = bitcast_ln724_6_fu_297_p1[51:0];

assign trunc_ln52_2_fu_607_p1 = select_ln52_fu_557_p3[31:0];

assign trunc_ln52_3_fu_948_p1 = ashr_ln52_fu_943_p2[31:0];

assign trunc_ln52_fu_301_p1 = bitcast_ln724_6_fu_297_p1[62:0];

assign trunc_ln53_1_fu_353_p1 = bitcast_ln724_8_fu_327_p1[51:0];

assign trunc_ln53_2_fu_697_p1 = select_ln53_fu_647_p3[31:0];

assign trunc_ln53_3_fu_1055_p1 = ashr_ln53_fu_1050_p2[31:0];

assign trunc_ln53_fu_331_p1 = bitcast_ln724_8_fu_327_p1[62:0];

assign xor_ln50_1_fu_805_p2 = (or_ln50_fu_801_p2 ^ 1'd1);

assign xor_ln50_fu_784_p2 = (icmp_ln50_reg_1293 ^ 1'd1);

assign xor_ln51_1_fu_912_p2 = (or_ln51_fu_908_p2 ^ 1'd1);

assign xor_ln51_fu_891_p2 = (icmp_ln51_reg_1333 ^ 1'd1);

assign xor_ln52_1_fu_1019_p2 = (or_ln52_fu_1015_p2 ^ 1'd1);

assign xor_ln52_fu_998_p2 = (icmp_ln52_reg_1373 ^ 1'd1);

assign xor_ln53_1_fu_1126_p2 = (or_ln53_fu_1122_p2 ^ 1'd1);

assign xor_ln53_fu_1105_p2 = (icmp_ln53_reg_1413 ^ 1'd1);

assign zext_ln46_fu_224_p1 = ap_sig_allocacmp_i_14;

assign zext_ln50_1_cast_fu_360_p3 = {{1'd1}, {trunc_ln50_1_reg_1223}};

assign zext_ln50_1_fu_367_p1 = zext_ln50_1_cast_fu_360_p3;

assign zext_ln50_2_fu_725_p1 = $unsigned(sext_ln50_fu_717_p1);

assign zext_ln50_fu_357_p1 = tmp_i_reg_1218;

assign zext_ln51_1_cast_fu_450_p3 = {{1'd1}, {trunc_ln51_1_reg_1243}};

assign zext_ln51_1_fu_457_p1 = zext_ln51_1_cast_fu_450_p3;

assign zext_ln51_2_fu_832_p1 = $unsigned(sext_ln51_fu_824_p1);

assign zext_ln51_fu_447_p1 = tmp_32_i_reg_1238;

assign zext_ln52_1_cast_fu_540_p3 = {{1'd1}, {trunc_ln52_1_reg_1263}};

assign zext_ln52_1_fu_547_p1 = zext_ln52_1_cast_fu_540_p3;

assign zext_ln52_2_fu_939_p1 = $unsigned(sext_ln52_fu_931_p1);

assign zext_ln52_fu_537_p1 = tmp_38_i_reg_1258;

assign zext_ln53_1_cast_fu_630_p3 = {{1'd1}, {trunc_ln53_1_reg_1283}};

assign zext_ln53_1_fu_637_p1 = zext_ln53_1_cast_fu_630_p3;

assign zext_ln53_2_fu_1046_p1 = $unsigned(sext_ln53_fu_1038_p1);

assign zext_ln53_fu_627_p1 = tmp_41_i_reg_1278;

always @ (posedge ap_clk) begin
    zext_ln46_reg_1156[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln46_reg_1156_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln46_reg_1156_pp0_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln46_reg_1156_pp0_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln46_reg_1156_pp0_iter4_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //stereolbm_axis_cambm_Loop_VITIS_LOOP_46_1_proc
