// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module stereolbm_axis_cambm_Loop_VITIS_LOOP_55_2_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        distC_r_fix_address0,
        distC_r_fix_ce0,
        distC_r_fix_we0,
        distC_r_fix_d0,
        distC_l_fix_address0,
        distC_l_fix_ce0,
        distC_l_fix_we0,
        distC_l_fix_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [2:0] distC_r_fix_address0;
output   distC_r_fix_ce0;
output   distC_r_fix_we0;
output  [31:0] distC_r_fix_d0;
output  [2:0] distC_l_fix_address0;
output   distC_l_fix_ce0;
output   distC_l_fix_we0;
output  [31:0] distC_l_fix_d0;

reg ap_idle;
reg distC_r_fix_ce0;
reg distC_r_fix_we0;
reg distC_l_fix_ce0;
reg distC_l_fix_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln55_fu_144_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [2:0] distC_l_address0;
reg    distC_l_ce0;
wire   [31:0] distC_l_q0;
wire   [2:0] distC_r_address0;
reg    distC_r_ce0;
wire   [31:0] distC_r_q0;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln55_fu_156_p1;
reg   [63:0] zext_ln55_reg_632;
reg   [63:0] zext_ln55_reg_632_pp0_iter1_reg;
reg   [63:0] zext_ln55_reg_632_pp0_iter2_reg;
reg   [63:0] zext_ln55_reg_632_pp0_iter3_reg;
reg   [63:0] zext_ln55_reg_632_pp0_iter4_reg;
reg   [31:0] distC_l_load_reg_648;
reg   [31:0] distC_l_load_reg_648_pp0_iter2_reg;
reg   [31:0] distC_l_load_reg_648_pp0_iter3_reg;
reg   [31:0] distC_r_load_reg_654;
reg   [31:0] distC_r_load_reg_654_pp0_iter2_reg;
reg   [31:0] distC_r_load_reg_654_pp0_iter3_reg;
wire   [62:0] trunc_ln59_fu_171_p1;
reg   [62:0] trunc_ln59_reg_660;
reg   [0:0] tmp_reg_665;
reg   [10:0] tmp_s_reg_670;
wire   [51:0] trunc_ln59_1_fu_193_p1;
reg   [51:0] trunc_ln59_1_reg_675;
wire   [62:0] trunc_ln60_fu_201_p1;
reg   [62:0] trunc_ln60_reg_680;
reg   [0:0] tmp_306_reg_685;
reg   [10:0] tmp_15_reg_690;
wire   [51:0] trunc_ln60_1_fu_223_p1;
reg   [51:0] trunc_ln60_1_reg_695;
wire   [53:0] select_ln59_fu_247_p3;
reg   [53:0] select_ln59_reg_700;
wire   [0:0] icmp_ln59_fu_254_p2;
reg   [0:0] icmp_ln59_reg_705;
wire   [0:0] icmp_ln59_1_fu_265_p2;
reg   [0:0] icmp_ln59_1_reg_712;
wire  signed [11:0] select_ln59_1_fu_283_p3;
reg  signed [11:0] select_ln59_1_reg_717;
wire   [0:0] icmp_ln59_2_fu_291_p2;
reg   [0:0] icmp_ln59_2_reg_723;
wire   [31:0] trunc_ln59_2_fu_297_p1;
reg   [31:0] trunc_ln59_2_reg_729;
wire   [0:0] icmp_ln59_4_fu_311_p2;
reg   [0:0] icmp_ln59_4_reg_735;
wire   [53:0] select_ln60_fu_337_p3;
reg   [53:0] select_ln60_reg_740;
wire   [0:0] icmp_ln60_fu_344_p2;
reg   [0:0] icmp_ln60_reg_745;
wire   [0:0] icmp_ln60_1_fu_355_p2;
reg   [0:0] icmp_ln60_1_reg_752;
wire  signed [11:0] select_ln60_1_fu_373_p3;
reg  signed [11:0] select_ln60_1_reg_757;
wire   [0:0] icmp_ln60_2_fu_381_p2;
reg   [0:0] icmp_ln60_2_reg_763;
wire   [31:0] trunc_ln60_2_fu_387_p1;
reg   [31:0] trunc_ln60_2_reg_769;
wire   [0:0] icmp_ln60_4_fu_401_p2;
reg   [0:0] icmp_ln60_4_reg_775;
wire   [31:0] select_ln59_6_fu_506_p3;
reg   [31:0] select_ln59_6_reg_780;
wire   [31:0] select_ln60_6_fu_613_p3;
reg   [31:0] select_ln60_6_reg_785;
wire    ap_block_pp0_stage0;
reg   [2:0] i_fu_72;
wire   [2:0] add_ln55_fu_150_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_13;
wire   [63:0] grp_fu_128_p1;
wire   [63:0] bitcast_ln724_fu_167_p1;
wire   [63:0] grp_fu_132_p1;
wire   [63:0] bitcast_ln724_2_fu_197_p1;
wire   [52:0] zext_ln59_1_cast_fu_230_p3;
wire   [53:0] zext_ln59_1_fu_237_p1;
wire   [53:0] sub_ln59_fu_241_p2;
wire   [11:0] zext_ln59_fu_227_p1;
wire   [11:0] sub_ln59_1_fu_259_p2;
wire   [11:0] add_ln59_fu_271_p2;
wire   [11:0] sub_ln59_2_fu_277_p2;
wire   [6:0] tmp_305_fu_301_p4;
wire   [52:0] zext_ln60_1_cast_fu_320_p3;
wire   [53:0] zext_ln60_1_fu_327_p1;
wire   [53:0] sub_ln60_fu_331_p2;
wire   [11:0] zext_ln60_fu_317_p1;
wire   [11:0] sub_ln60_1_fu_349_p2;
wire   [11:0] add_ln60_fu_361_p2;
wire   [11:0] sub_ln60_2_fu_367_p2;
wire   [6:0] tmp_308_fu_391_p4;
wire  signed [31:0] sext_ln59_fu_407_p1;
wire   [53:0] zext_ln59_2_fu_415_p1;
wire   [53:0] ashr_ln59_fu_419_p2;
wire   [31:0] bitcast_ln724_1_fu_428_p1;
wire   [0:0] tmp_304_fu_431_p3;
wire   [0:0] icmp_ln59_3_fu_410_p2;
wire   [31:0] trunc_ln59_3_fu_424_p1;
wire   [31:0] select_ln59_7_fu_439_p3;
wire   [31:0] shl_ln59_fu_455_p2;
wire   [31:0] select_ln59_3_fu_460_p3;
wire   [0:0] xor_ln59_fu_474_p2;
wire   [0:0] and_ln59_fu_479_p2;
wire   [31:0] select_ln59_4_fu_467_p3;
wire   [0:0] or_ln59_fu_491_p2;
wire   [0:0] xor_ln59_1_fu_495_p2;
wire   [0:0] and_ln59_1_fu_501_p2;
wire   [31:0] select_ln59_2_fu_447_p3;
wire   [31:0] select_ln59_5_fu_484_p3;
wire  signed [31:0] sext_ln60_fu_514_p1;
wire   [53:0] zext_ln60_2_fu_522_p1;
wire   [53:0] ashr_ln60_fu_526_p2;
wire   [31:0] bitcast_ln724_3_fu_535_p1;
wire   [0:0] tmp_307_fu_538_p3;
wire   [0:0] icmp_ln60_3_fu_517_p2;
wire   [31:0] trunc_ln60_3_fu_531_p1;
wire   [31:0] select_ln60_7_fu_546_p3;
wire   [31:0] shl_ln60_fu_562_p2;
wire   [31:0] select_ln60_3_fu_567_p3;
wire   [0:0] xor_ln60_fu_581_p2;
wire   [0:0] and_ln60_fu_586_p2;
wire   [31:0] select_ln60_4_fu_574_p3;
wire   [0:0] or_ln60_fu_598_p2;
wire   [0:0] xor_ln60_1_fu_602_p2;
wire   [0:0] and_ln60_1_fu_608_p2;
wire   [31:0] select_ln60_2_fu_554_p3;
wire   [31:0] select_ln60_5_fu_591_p3;
reg    grp_fu_128_ce;
reg    grp_fu_132_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_191;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

stereolbm_axis_cambm_Loop_VITIS_LOOP_55_2_proc_distC_l_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
distC_l_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(distC_l_address0),
    .ce0(distC_l_ce0),
    .q0(distC_l_q0)
);

stereolbm_axis_cambm_Loop_VITIS_LOOP_55_2_proc_distC_r_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
distC_r_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(distC_r_address0),
    .ce0(distC_r_ce0),
    .q0(distC_r_q0)
);

stereolbm_axis_cambm_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(distC_l_q0),
    .ce(grp_fu_128_ce),
    .dout(grp_fu_128_p1)
);

stereolbm_axis_cambm_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(distC_r_q0),
    .ce(grp_fu_132_ce),
    .dout(grp_fu_132_p1)
);

stereolbm_axis_cambm_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_191)) begin
        if ((icmp_ln55_fu_144_p2 == 1'd0)) begin
            i_fu_72 <= add_ln55_fu_150_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_72 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        distC_l_load_reg_648 <= distC_l_q0;
        distC_r_load_reg_654 <= distC_r_q0;
        zext_ln55_reg_632_pp0_iter1_reg[2 : 0] <= zext_ln55_reg_632[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        distC_l_load_reg_648_pp0_iter2_reg <= distC_l_load_reg_648;
        distC_l_load_reg_648_pp0_iter3_reg <= distC_l_load_reg_648_pp0_iter2_reg;
        distC_r_load_reg_654_pp0_iter2_reg <= distC_r_load_reg_654;
        distC_r_load_reg_654_pp0_iter3_reg <= distC_r_load_reg_654_pp0_iter2_reg;
        icmp_ln59_1_reg_712 <= icmp_ln59_1_fu_265_p2;
        icmp_ln59_2_reg_723 <= icmp_ln59_2_fu_291_p2;
        icmp_ln59_4_reg_735 <= icmp_ln59_4_fu_311_p2;
        icmp_ln59_reg_705 <= icmp_ln59_fu_254_p2;
        icmp_ln60_1_reg_752 <= icmp_ln60_1_fu_355_p2;
        icmp_ln60_2_reg_763 <= icmp_ln60_2_fu_381_p2;
        icmp_ln60_4_reg_775 <= icmp_ln60_4_fu_401_p2;
        icmp_ln60_reg_745 <= icmp_ln60_fu_344_p2;
        select_ln59_1_reg_717 <= select_ln59_1_fu_283_p3;
        select_ln59_6_reg_780 <= select_ln59_6_fu_506_p3;
        select_ln59_reg_700 <= select_ln59_fu_247_p3;
        select_ln60_1_reg_757 <= select_ln60_1_fu_373_p3;
        select_ln60_6_reg_785 <= select_ln60_6_fu_613_p3;
        select_ln60_reg_740 <= select_ln60_fu_337_p3;
        tmp_15_reg_690 <= {{bitcast_ln724_2_fu_197_p1[62:52]}};
        tmp_306_reg_685 <= bitcast_ln724_2_fu_197_p1[32'd63];
        tmp_reg_665 <= bitcast_ln724_fu_167_p1[32'd63];
        tmp_s_reg_670 <= {{bitcast_ln724_fu_167_p1[62:52]}};
        trunc_ln59_1_reg_675 <= trunc_ln59_1_fu_193_p1;
        trunc_ln59_2_reg_729 <= trunc_ln59_2_fu_297_p1;
        trunc_ln59_reg_660 <= trunc_ln59_fu_171_p1;
        trunc_ln60_1_reg_695 <= trunc_ln60_1_fu_223_p1;
        trunc_ln60_2_reg_769 <= trunc_ln60_2_fu_387_p1;
        trunc_ln60_reg_680 <= trunc_ln60_fu_201_p1;
        zext_ln55_reg_632_pp0_iter2_reg[2 : 0] <= zext_ln55_reg_632_pp0_iter1_reg[2 : 0];
        zext_ln55_reg_632_pp0_iter3_reg[2 : 0] <= zext_ln55_reg_632_pp0_iter2_reg[2 : 0];
        zext_ln55_reg_632_pp0_iter4_reg[2 : 0] <= zext_ln55_reg_632_pp0_iter3_reg[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_144_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln55_reg_632[2 : 0] <= zext_ln55_fu_156_p1[2 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln55_fu_144_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_13 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_13 = i_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        distC_l_ce0 = 1'b1;
    end else begin
        distC_l_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        distC_l_fix_ce0 = 1'b1;
    end else begin
        distC_l_fix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        distC_l_fix_we0 = 1'b1;
    end else begin
        distC_l_fix_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        distC_r_ce0 = 1'b1;
    end else begin
        distC_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        distC_r_fix_ce0 = 1'b1;
    end else begin
        distC_r_fix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        distC_r_fix_we0 = 1'b1;
    end else begin
        distC_r_fix_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_128_ce = 1'b1;
    end else begin
        grp_fu_128_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_132_ce = 1'b1;
    end else begin
        grp_fu_132_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln55_fu_150_p2 = (ap_sig_allocacmp_i_13 + 3'd1);

assign add_ln59_fu_271_p2 = ($signed(sub_ln59_1_fu_259_p2) + $signed(12'd4076));

assign add_ln60_fu_361_p2 = ($signed(sub_ln60_1_fu_349_p2) + $signed(12'd4076));

assign and_ln59_1_fu_501_p2 = (xor_ln59_1_fu_495_p2 & icmp_ln59_1_reg_712);

assign and_ln59_fu_479_p2 = (xor_ln59_fu_474_p2 & icmp_ln59_2_reg_723);

assign and_ln60_1_fu_608_p2 = (xor_ln60_1_fu_602_p2 & icmp_ln60_1_reg_752);

assign and_ln60_fu_586_p2 = (xor_ln60_fu_581_p2 & icmp_ln60_2_reg_763);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_191 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ashr_ln59_fu_419_p2 = $signed(select_ln59_reg_700) >>> zext_ln59_2_fu_415_p1;

assign ashr_ln60_fu_526_p2 = $signed(select_ln60_reg_740) >>> zext_ln60_2_fu_522_p1;

assign bitcast_ln724_1_fu_428_p1 = distC_l_load_reg_648_pp0_iter3_reg;

assign bitcast_ln724_2_fu_197_p1 = grp_fu_132_p1;

assign bitcast_ln724_3_fu_535_p1 = distC_r_load_reg_654_pp0_iter3_reg;

assign bitcast_ln724_fu_167_p1 = grp_fu_128_p1;

assign distC_l_address0 = zext_ln55_fu_156_p1;

assign distC_l_fix_address0 = zext_ln55_reg_632_pp0_iter4_reg;

assign distC_l_fix_d0 = select_ln59_6_reg_780;

assign distC_r_address0 = zext_ln55_fu_156_p1;

assign distC_r_fix_address0 = zext_ln55_reg_632_pp0_iter4_reg;

assign distC_r_fix_d0 = select_ln60_6_reg_785;

assign icmp_ln55_fu_144_p2 = ((ap_sig_allocacmp_i_13 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln59_1_fu_265_p2 = (($signed(sub_ln59_1_fu_259_p2) > $signed(12'd20)) ? 1'b1 : 1'b0);

assign icmp_ln59_2_fu_291_p2 = ((sub_ln59_1_fu_259_p2 == 12'd20) ? 1'b1 : 1'b0);

assign icmp_ln59_3_fu_410_p2 = ((select_ln59_1_reg_717 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln59_4_fu_311_p2 = ((tmp_305_fu_301_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_254_p2 = ((trunc_ln59_reg_660 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln60_1_fu_355_p2 = (($signed(sub_ln60_1_fu_349_p2) > $signed(12'd20)) ? 1'b1 : 1'b0);

assign icmp_ln60_2_fu_381_p2 = ((sub_ln60_1_fu_349_p2 == 12'd20) ? 1'b1 : 1'b0);

assign icmp_ln60_3_fu_517_p2 = ((select_ln60_1_reg_757 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln60_4_fu_401_p2 = ((tmp_308_fu_391_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_344_p2 = ((trunc_ln60_reg_680 == 63'd0) ? 1'b1 : 1'b0);

assign or_ln59_fu_491_p2 = (icmp_ln59_reg_705 | icmp_ln59_2_reg_723);

assign or_ln60_fu_598_p2 = (icmp_ln60_reg_745 | icmp_ln60_2_reg_763);

assign select_ln59_1_fu_283_p3 = ((icmp_ln59_1_fu_265_p2[0:0] == 1'b1) ? add_ln59_fu_271_p2 : sub_ln59_2_fu_277_p2);

assign select_ln59_2_fu_447_p3 = ((icmp_ln59_3_fu_410_p2[0:0] == 1'b1) ? trunc_ln59_3_fu_424_p1 : select_ln59_7_fu_439_p3);

assign select_ln59_3_fu_460_p3 = ((icmp_ln59_4_reg_735[0:0] == 1'b1) ? shl_ln59_fu_455_p2 : 32'd0);

assign select_ln59_4_fu_467_p3 = ((icmp_ln59_reg_705[0:0] == 1'b1) ? 32'd0 : select_ln59_3_fu_460_p3);

assign select_ln59_5_fu_484_p3 = ((and_ln59_fu_479_p2[0:0] == 1'b1) ? trunc_ln59_2_reg_729 : select_ln59_4_fu_467_p3);

assign select_ln59_6_fu_506_p3 = ((and_ln59_1_fu_501_p2[0:0] == 1'b1) ? select_ln59_2_fu_447_p3 : select_ln59_5_fu_484_p3);

assign select_ln59_7_fu_439_p3 = ((tmp_304_fu_431_p3[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln59_fu_247_p3 = ((tmp_reg_665[0:0] == 1'b1) ? sub_ln59_fu_241_p2 : zext_ln59_1_fu_237_p1);

assign select_ln60_1_fu_373_p3 = ((icmp_ln60_1_fu_355_p2[0:0] == 1'b1) ? add_ln60_fu_361_p2 : sub_ln60_2_fu_367_p2);

assign select_ln60_2_fu_554_p3 = ((icmp_ln60_3_fu_517_p2[0:0] == 1'b1) ? trunc_ln60_3_fu_531_p1 : select_ln60_7_fu_546_p3);

assign select_ln60_3_fu_567_p3 = ((icmp_ln60_4_reg_775[0:0] == 1'b1) ? shl_ln60_fu_562_p2 : 32'd0);

assign select_ln60_4_fu_574_p3 = ((icmp_ln60_reg_745[0:0] == 1'b1) ? 32'd0 : select_ln60_3_fu_567_p3);

assign select_ln60_5_fu_591_p3 = ((and_ln60_fu_586_p2[0:0] == 1'b1) ? trunc_ln60_2_reg_769 : select_ln60_4_fu_574_p3);

assign select_ln60_6_fu_613_p3 = ((and_ln60_1_fu_608_p2[0:0] == 1'b1) ? select_ln60_2_fu_554_p3 : select_ln60_5_fu_591_p3);

assign select_ln60_7_fu_546_p3 = ((tmp_307_fu_538_p3[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln60_fu_337_p3 = ((tmp_306_reg_685[0:0] == 1'b1) ? sub_ln60_fu_331_p2 : zext_ln60_1_fu_327_p1);

assign sext_ln59_fu_407_p1 = select_ln59_1_reg_717;

assign sext_ln60_fu_514_p1 = select_ln60_1_reg_757;

assign shl_ln59_fu_455_p2 = trunc_ln59_2_reg_729 << sext_ln59_fu_407_p1;

assign shl_ln60_fu_562_p2 = trunc_ln60_2_reg_769 << sext_ln60_fu_514_p1;

assign sub_ln59_1_fu_259_p2 = (12'd1075 - zext_ln59_fu_227_p1);

assign sub_ln59_2_fu_277_p2 = (12'd20 - sub_ln59_1_fu_259_p2);

assign sub_ln59_fu_241_p2 = (54'd0 - zext_ln59_1_fu_237_p1);

assign sub_ln60_1_fu_349_p2 = (12'd1075 - zext_ln60_fu_317_p1);

assign sub_ln60_2_fu_367_p2 = (12'd20 - sub_ln60_1_fu_349_p2);

assign sub_ln60_fu_331_p2 = (54'd0 - zext_ln60_1_fu_327_p1);

assign tmp_304_fu_431_p3 = bitcast_ln724_1_fu_428_p1[32'd31];

assign tmp_305_fu_301_p4 = {{select_ln59_1_fu_283_p3[11:5]}};

assign tmp_307_fu_538_p3 = bitcast_ln724_3_fu_535_p1[32'd31];

assign tmp_308_fu_391_p4 = {{select_ln60_1_fu_373_p3[11:5]}};

assign trunc_ln59_1_fu_193_p1 = bitcast_ln724_fu_167_p1[51:0];

assign trunc_ln59_2_fu_297_p1 = select_ln59_fu_247_p3[31:0];

assign trunc_ln59_3_fu_424_p1 = ashr_ln59_fu_419_p2[31:0];

assign trunc_ln59_fu_171_p1 = bitcast_ln724_fu_167_p1[62:0];

assign trunc_ln60_1_fu_223_p1 = bitcast_ln724_2_fu_197_p1[51:0];

assign trunc_ln60_2_fu_387_p1 = select_ln60_fu_337_p3[31:0];

assign trunc_ln60_3_fu_531_p1 = ashr_ln60_fu_526_p2[31:0];

assign trunc_ln60_fu_201_p1 = bitcast_ln724_2_fu_197_p1[62:0];

assign xor_ln59_1_fu_495_p2 = (or_ln59_fu_491_p2 ^ 1'd1);

assign xor_ln59_fu_474_p2 = (icmp_ln59_reg_705 ^ 1'd1);

assign xor_ln60_1_fu_602_p2 = (or_ln60_fu_598_p2 ^ 1'd1);

assign xor_ln60_fu_581_p2 = (icmp_ln60_reg_745 ^ 1'd1);

assign zext_ln55_fu_156_p1 = ap_sig_allocacmp_i_13;

assign zext_ln59_1_cast_fu_230_p3 = {{1'd1}, {trunc_ln59_1_reg_675}};

assign zext_ln59_1_fu_237_p1 = zext_ln59_1_cast_fu_230_p3;

assign zext_ln59_2_fu_415_p1 = $unsigned(sext_ln59_fu_407_p1);

assign zext_ln59_fu_227_p1 = tmp_s_reg_670;

assign zext_ln60_1_cast_fu_320_p3 = {{1'd1}, {trunc_ln60_1_reg_695}};

assign zext_ln60_1_fu_327_p1 = zext_ln60_1_cast_fu_320_p3;

assign zext_ln60_2_fu_522_p1 = $unsigned(sext_ln60_fu_514_p1);

assign zext_ln60_fu_317_p1 = tmp_15_reg_690;

always @ (posedge ap_clk) begin
    zext_ln55_reg_632[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln55_reg_632_pp0_iter1_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln55_reg_632_pp0_iter2_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln55_reg_632_pp0_iter3_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln55_reg_632_pp0_iter4_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //stereolbm_axis_cambm_Loop_VITIS_LOOP_55_2_proc
