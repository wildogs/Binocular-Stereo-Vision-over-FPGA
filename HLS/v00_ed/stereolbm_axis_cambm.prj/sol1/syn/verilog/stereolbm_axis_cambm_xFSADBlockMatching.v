// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module stereolbm_axis_cambm_xFSADBlockMatching (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        left_clipped_dout,
        left_clipped_num_data_valid,
        left_clipped_fifo_cap,
        left_clipped_empty_n,
        left_clipped_read,
        right_clipped_dout,
        right_clipped_num_data_valid,
        right_clipped_fifo_cap,
        right_clipped_empty_n,
        right_clipped_read,
        p_disp_strm_din,
        p_disp_strm_num_data_valid,
        p_disp_strm_fifo_cap,
        p_disp_strm_full_n,
        p_disp_strm_write,
        state_preFilterCap_dout,
        state_preFilterCap_num_data_valid,
        state_preFilterCap_fifo_cap,
        state_preFilterCap_empty_n,
        state_preFilterCap_read,
        state_textureThreshold_dout,
        state_textureThreshold_num_data_valid,
        state_textureThreshold_fifo_cap,
        state_textureThreshold_empty_n,
        state_textureThreshold_read,
        state_uniquenessRatio_dout,
        state_uniquenessRatio_num_data_valid,
        state_uniquenessRatio_fifo_cap,
        state_uniquenessRatio_empty_n,
        state_uniquenessRatio_read,
        height_dout,
        height_num_data_valid,
        height_fifo_cap,
        height_empty_n,
        height_read,
        width_dout,
        width_num_data_valid,
        width_fifo_cap,
        width_empty_n,
        width_read,
        height_c_din,
        height_c_num_data_valid,
        height_c_fifo_cap,
        height_c_full_n,
        height_c_write,
        width_c_din,
        width_c_num_data_valid,
        width_c_fifo_cap,
        width_c_full_n,
        width_c_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] left_clipped_dout;
input  [1:0] left_clipped_num_data_valid;
input  [1:0] left_clipped_fifo_cap;
input   left_clipped_empty_n;
output   left_clipped_read;
input  [7:0] right_clipped_dout;
input  [1:0] right_clipped_num_data_valid;
input  [1:0] right_clipped_fifo_cap;
input   right_clipped_empty_n;
output   right_clipped_read;
output  [15:0] p_disp_strm_din;
input  [1:0] p_disp_strm_num_data_valid;
input  [1:0] p_disp_strm_fifo_cap;
input   p_disp_strm_full_n;
output   p_disp_strm_write;
input  [31:0] state_preFilterCap_dout;
input  [1:0] state_preFilterCap_num_data_valid;
input  [1:0] state_preFilterCap_fifo_cap;
input   state_preFilterCap_empty_n;
output   state_preFilterCap_read;
input  [31:0] state_textureThreshold_dout;
input  [2:0] state_textureThreshold_num_data_valid;
input  [2:0] state_textureThreshold_fifo_cap;
input   state_textureThreshold_empty_n;
output   state_textureThreshold_read;
input  [31:0] state_uniquenessRatio_dout;
input  [2:0] state_uniquenessRatio_num_data_valid;
input  [2:0] state_uniquenessRatio_fifo_cap;
input   state_uniquenessRatio_empty_n;
output   state_uniquenessRatio_read;
input  [15:0] height_dout;
input  [1:0] height_num_data_valid;
input  [1:0] height_fifo_cap;
input   height_empty_n;
output   height_read;
input  [15:0] width_dout;
input  [1:0] width_num_data_valid;
input  [1:0] width_fifo_cap;
input   width_empty_n;
output   width_read;
output  [15:0] height_c_din;
input  [1:0] height_c_num_data_valid;
input  [1:0] height_c_fifo_cap;
input   height_c_full_n;
output   height_c_write;
output  [15:0] width_c_din;
input  [1:0] width_c_num_data_valid;
input  [1:0] width_c_fifo_cap;
input   width_c_full_n;
output   width_c_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg left_clipped_read;
reg right_clipped_read;
reg p_disp_strm_write;
reg state_preFilterCap_read;
reg state_textureThreshold_read;
reg state_uniquenessRatio_read;
reg height_read;
reg width_read;
reg height_c_write;
reg width_c_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    state_preFilterCap_blk_n;
reg    state_textureThreshold_blk_n;
reg    state_uniquenessRatio_blk_n;
reg    height_blk_n;
reg    width_blk_n;
reg    height_c_blk_n;
reg    width_c_blk_n;
reg   [31:0] state_uniquenessRatio_read_reg_202;
reg    ap_block_state1;
reg   [31:0] state_textureThreshold_read_reg_208;
reg   [31:0] state_preFilterCap_read_reg_213;
wire   [7:0] tmp_r_fu_128_p1;
reg   [7:0] tmp_r_reg_218;
wire  signed [16:0] height_cast_fu_132_p1;
reg  signed [16:0] height_cast_reg_223;
wire   [16:0] sub_fu_136_p2;
reg   [16:0] sub_reg_229;
wire  signed [16:0] width_cast_fu_142_p1;
reg  signed [16:0] width_cast_reg_234;
wire   [16:0] sub57_fu_146_p2;
reg   [16:0] sub57_reg_240;
wire   [19:0] tmp_2_fu_152_p3;
reg   [19:0] tmp_2_reg_246;
wire    ap_CS_fsm_state2;
wire   [36:0] bound4_fu_166_p2;
reg   [36:0] bound4_reg_251;
wire   [16:0] add103_fu_172_p2;
reg   [16:0] add103_reg_256;
wire    ap_CS_fsm_state3;
wire   [16:0] add111_fu_178_p2;
reg   [16:0] add111_reg_261;
wire   [16:0] sub233_fu_184_p2;
reg   [16:0] sub233_reg_266;
wire   [16:0] sub246_fu_190_p2;
reg   [16:0] sub246_reg_271;
wire   [0:0] cmp288_fu_196_p2;
reg   [0:0] cmp288_reg_276;
wire    grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_start;
wire    grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_done;
wire    grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_idle;
wire    grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_ready;
wire    grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_left_clipped_read;
wire    grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_right_clipped_read;
wire   [15:0] grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_p_disp_strm_din;
wire    grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_p_disp_strm_write;
reg    grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_start_reg;
wire    ap_CS_fsm_state4;
wire  signed [15:0] height_cast_fu_132_p0;
wire  signed [15:0] width_cast_fu_142_p0;
wire   [16:0] bound4_fu_166_p0;
wire   [19:0] bound4_fu_166_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire   [36:0] bound4_fu_166_p00;
wire   [36:0] bound4_fu_166_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_start_reg = 1'b0;
end

stereolbm_axis_cambm_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_start),
    .ap_done(grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_done),
    .ap_idle(grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_idle),
    .ap_ready(grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_ready),
    .left_clipped_dout(left_clipped_dout),
    .left_clipped_num_data_valid(2'd0),
    .left_clipped_fifo_cap(2'd0),
    .left_clipped_empty_n(left_clipped_empty_n),
    .left_clipped_read(grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_left_clipped_read),
    .right_clipped_dout(right_clipped_dout),
    .right_clipped_num_data_valid(2'd0),
    .right_clipped_fifo_cap(2'd0),
    .right_clipped_empty_n(right_clipped_empty_n),
    .right_clipped_read(grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_right_clipped_read),
    .p_disp_strm_din(grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_p_disp_strm_din),
    .p_disp_strm_num_data_valid(2'd0),
    .p_disp_strm_fifo_cap(2'd0),
    .p_disp_strm_full_n(p_disp_strm_full_n),
    .p_disp_strm_write(grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_p_disp_strm_write),
    .sub57(sub57_reg_240),
    .bound4(bound4_reg_251),
    .state_preFilterCap_load(state_preFilterCap_read_reg_213),
    .tmp_r_3(tmp_r_reg_218),
    .add111(add111_reg_261),
    .bound(tmp_2_reg_246),
    .add103(add103_reg_256),
    .sub233(sub233_reg_266),
    .state_textureThreshold_load(state_textureThreshold_read_reg_208),
    .sub246(sub246_reg_271),
    .state_uniquenessRatio_load(state_uniquenessRatio_read_reg_202),
    .cmp288(cmp288_reg_276)
);

stereolbm_axis_cambm_mul_17ns_20ns_37_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 20 ),
    .dout_WIDTH( 37 ))
mul_17ns_20ns_37_1_1_U504(
    .din0(bound4_fu_166_p0),
    .din1(bound4_fu_166_p1),
    .dout(bound4_fu_166_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_done == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_start_reg <= 1'b1;
        end else if ((grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_ready == 1'b1)) begin
            grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add103_reg_256 <= add103_fu_172_p2;
        add111_reg_261 <= add111_fu_178_p2;
        cmp288_reg_276 <= cmp288_fu_196_p2;
        sub233_reg_266 <= sub233_fu_184_p2;
        sub246_reg_271 <= sub246_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound4_reg_251 <= bound4_fu_166_p2;
        tmp_2_reg_246[19 : 3] <= tmp_2_fu_152_p3[19 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((~((width_c_full_n == 1'b0) | (height_c_full_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (state_uniquenessRatio_empty_n == 1'b0) | (state_textureThreshold_empty_n == 1'b0) | (state_preFilterCap_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_cast_reg_223 <= height_cast_fu_132_p1;
        state_preFilterCap_read_reg_213 <= state_preFilterCap_dout;
        state_textureThreshold_read_reg_208 <= state_textureThreshold_dout;
        state_uniquenessRatio_read_reg_202 <= state_uniquenessRatio_dout;
        sub57_reg_240 <= sub57_fu_146_p2;
        sub_reg_229 <= sub_fu_136_p2;
        tmp_r_reg_218 <= tmp_r_fu_128_p1;
        width_cast_reg_234 <= width_cast_fu_142_p1;
    end
end

always @ (*) begin
    if (((width_c_full_n == 1'b0) | (height_c_full_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (state_uniquenessRatio_empty_n == 1'b0) | (state_textureThreshold_empty_n == 1'b0) | (state_preFilterCap_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_blk_n = height_empty_n;
    end else begin
        height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_c_blk_n = height_c_full_n;
    end else begin
        height_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((width_c_full_n == 1'b0) | (height_c_full_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (state_uniquenessRatio_empty_n == 1'b0) | (state_textureThreshold_empty_n == 1'b0) | (state_preFilterCap_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_c_write = 1'b1;
    end else begin
        height_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((width_c_full_n == 1'b0) | (height_c_full_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (state_uniquenessRatio_empty_n == 1'b0) | (state_textureThreshold_empty_n == 1'b0) | (state_preFilterCap_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_read = 1'b1;
    end else begin
        height_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_done == 1'b1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        left_clipped_read = grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_left_clipped_read;
    end else begin
        left_clipped_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_disp_strm_write = grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_p_disp_strm_write;
    end else begin
        p_disp_strm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        right_clipped_read = grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_right_clipped_read;
    end else begin
        right_clipped_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        state_preFilterCap_blk_n = state_preFilterCap_empty_n;
    end else begin
        state_preFilterCap_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((width_c_full_n == 1'b0) | (height_c_full_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (state_uniquenessRatio_empty_n == 1'b0) | (state_textureThreshold_empty_n == 1'b0) | (state_preFilterCap_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        state_preFilterCap_read = 1'b1;
    end else begin
        state_preFilterCap_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        state_textureThreshold_blk_n = state_textureThreshold_empty_n;
    end else begin
        state_textureThreshold_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((width_c_full_n == 1'b0) | (height_c_full_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (state_uniquenessRatio_empty_n == 1'b0) | (state_textureThreshold_empty_n == 1'b0) | (state_preFilterCap_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        state_textureThreshold_read = 1'b1;
    end else begin
        state_textureThreshold_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        state_uniquenessRatio_blk_n = state_uniquenessRatio_empty_n;
    end else begin
        state_uniquenessRatio_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((width_c_full_n == 1'b0) | (height_c_full_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (state_uniquenessRatio_empty_n == 1'b0) | (state_textureThreshold_empty_n == 1'b0) | (state_preFilterCap_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        state_uniquenessRatio_read = 1'b1;
    end else begin
        state_uniquenessRatio_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_blk_n = width_empty_n;
    end else begin
        width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_c_blk_n = width_c_full_n;
    end else begin
        width_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((width_c_full_n == 1'b0) | (height_c_full_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (state_uniquenessRatio_empty_n == 1'b0) | (state_textureThreshold_empty_n == 1'b0) | (state_preFilterCap_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_c_write = 1'b1;
    end else begin
        width_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((width_c_full_n == 1'b0) | (height_c_full_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (state_uniquenessRatio_empty_n == 1'b0) | (state_textureThreshold_empty_n == 1'b0) | (state_preFilterCap_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_read = 1'b1;
    end else begin
        width_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((width_c_full_n == 1'b0) | (height_c_full_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (state_uniquenessRatio_empty_n == 1'b0) | (state_textureThreshold_empty_n == 1'b0) | (state_preFilterCap_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add103_fu_172_p2 = ($signed(height_cast_reg_223) + $signed(17'd7));

assign add111_fu_178_p2 = ($signed(width_cast_reg_234) + $signed(17'd7));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((width_c_full_n == 1'b0) | (height_c_full_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (state_uniquenessRatio_empty_n == 1'b0) | (state_textureThreshold_empty_n == 1'b0) | (state_preFilterCap_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign bound4_fu_166_p0 = bound4_fu_166_p00;

assign bound4_fu_166_p00 = sub_reg_229;

assign bound4_fu_166_p1 = bound4_fu_166_p10;

assign bound4_fu_166_p10 = tmp_2_fu_152_p3;

assign cmp288_fu_196_p2 = (($signed(state_uniquenessRatio_read_reg_202) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_start = grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_start_reg;

assign height_c_din = height_dout;

assign height_cast_fu_132_p0 = height_dout;

assign height_cast_fu_132_p1 = height_cast_fu_132_p0;

assign p_disp_strm_din = grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_p_disp_strm_din;

assign start_out = real_start;

assign sub233_fu_184_p2 = ($signed(height_cast_reg_223) + $signed(17'd131065));

assign sub246_fu_190_p2 = ($signed(width_cast_reg_234) + $signed(17'd131065));

assign sub57_fu_146_p2 = ($signed(width_cast_fu_142_p1) + $signed(17'd14));

assign sub_fu_136_p2 = ($signed(height_cast_fu_132_p1) + $signed(17'd14));

assign tmp_2_fu_152_p3 = {{sub57_reg_240}, {3'd0}};

assign tmp_r_fu_128_p1 = state_preFilterCap_dout[7:0];

assign width_c_din = width_dout;

assign width_cast_fu_142_p0 = width_dout;

assign width_cast_fu_142_p1 = width_cast_fu_142_p0;

always @ (posedge ap_clk) begin
    tmp_2_reg_246[2:0] <= 3'b000;
end

endmodule //stereolbm_axis_cambm_xFSADBlockMatching
