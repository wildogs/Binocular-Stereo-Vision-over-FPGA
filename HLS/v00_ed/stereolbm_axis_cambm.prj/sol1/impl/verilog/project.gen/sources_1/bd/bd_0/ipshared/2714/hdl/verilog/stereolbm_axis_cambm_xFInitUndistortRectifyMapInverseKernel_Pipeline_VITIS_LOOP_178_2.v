// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module stereolbm_axis_cambm_xFInitUndistortRectifyMapInverseKernel_Pipeline_VITIS_LOOP_178_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        distCoeffs_address0,
        distCoeffs_ce0,
        distCoeffs_q0,
        p_0_0_010316_out,
        p_0_0_010316_out_ap_vld,
        p_0_0_010314_out,
        p_0_0_010314_out_ap_vld,
        p_0_0_010312_out,
        p_0_0_010312_out_ap_vld,
        p_0_0_010310_out,
        p_0_0_010310_out_ap_vld,
        p_0_0_01038_out,
        p_0_0_01038_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] distCoeffs_address0;
output   distCoeffs_ce0;
input  [31:0] distCoeffs_q0;
output  [31:0] p_0_0_010316_out;
output   p_0_0_010316_out_ap_vld;
output  [31:0] p_0_0_010314_out;
output   p_0_0_010314_out_ap_vld;
output  [31:0] p_0_0_010312_out;
output   p_0_0_010312_out_ap_vld;
output  [31:0] p_0_0_010310_out;
output   p_0_0_010310_out_ap_vld;
output  [31:0] p_0_0_01038_out;
output   p_0_0_01038_out_ap_vld;

reg ap_idle;
reg distCoeffs_ce0;
reg p_0_0_010316_out_ap_vld;
reg p_0_0_010314_out_ap_vld;
reg p_0_0_010312_out_ap_vld;
reg p_0_0_010310_out_ap_vld;
reg p_0_0_01038_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln178_fu_122_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [2:0] i_reg_226;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln178_fu_134_p1;
wire    ap_block_pp0_stage0;
reg   [2:0] i_5_fu_42;
wire   [2:0] add_ln178_fu_128_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i;
reg   [31:0] p_0_0_01038_fu_46;
reg   [31:0] p_0_0_010310_fu_50;
reg   [31:0] p_0_0_010312_fu_54;
reg   [31:0] p_0_0_010314_fu_58;
reg   [31:0] p_0_0_010316_fu_62;
wire    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

stereolbm_axis_cambm_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln178_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_5_fu_42 <= add_ln178_fu_128_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_5_fu_42 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_226 <= ap_sig_allocacmp_i;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_226 == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_010310_fu_50 <= distCoeffs_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_226 == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_010312_fu_54 <= distCoeffs_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_226 == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_010314_fu_58 <= distCoeffs_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_reg_226 == 3'd3) & ~(i_reg_226 == 3'd0) & ~(i_reg_226 == 3'd1) & ~(i_reg_226 == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_010316_fu_62 <= distCoeffs_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_226 == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_01038_fu_46 <= distCoeffs_q0;
    end
end

always @ (*) begin
    if (((icmp_ln178_fu_122_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 3'd0;
    end else begin
        ap_sig_allocacmp_i = i_5_fu_42;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        distCoeffs_ce0 = 1'b1;
    end else begin
        distCoeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln178_fu_122_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_010310_out_ap_vld = 1'b1;
    end else begin
        p_0_0_010310_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln178_fu_122_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_010312_out_ap_vld = 1'b1;
    end else begin
        p_0_0_010312_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln178_fu_122_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_010314_out_ap_vld = 1'b1;
    end else begin
        p_0_0_010314_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln178_fu_122_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_010316_out_ap_vld = 1'b1;
    end else begin
        p_0_0_010316_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln178_fu_122_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_01038_out_ap_vld = 1'b1;
    end else begin
        p_0_0_01038_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln178_fu_128_p2 = (ap_sig_allocacmp_i + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign distCoeffs_address0 = zext_ln178_fu_134_p1;

assign icmp_ln178_fu_122_p2 = ((ap_sig_allocacmp_i == 3'd5) ? 1'b1 : 1'b0);

assign p_0_0_010310_out = p_0_0_010310_fu_50;

assign p_0_0_010312_out = p_0_0_010312_fu_54;

assign p_0_0_010314_out = p_0_0_010314_fu_58;

assign p_0_0_010316_out = p_0_0_010316_fu_62;

assign p_0_0_01038_out = p_0_0_01038_fu_46;

assign zext_ln178_fu_134_p1 = ap_sig_allocacmp_i;

endmodule //stereolbm_axis_cambm_xFInitUndistortRectifyMapInverseKernel_Pipeline_VITIS_LOOP_178_2
