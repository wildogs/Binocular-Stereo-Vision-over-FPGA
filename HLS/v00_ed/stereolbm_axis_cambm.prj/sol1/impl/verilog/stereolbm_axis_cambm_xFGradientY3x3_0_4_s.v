// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module stereolbm_axis_cambm_xFGradientY3x3_0_4_s (
        ap_clk,
        ap_rst,
        t0_val,
        t1_val,
        t2_val,
        b0_val,
        b1_val,
        b2_val,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [7:0] t0_val;
input  [7:0] t1_val;
input  [7:0] t2_val;
input  [7:0] b0_val;
input  [7:0] b1_val;
input  [7:0] b2_val;
output  [10:0] ap_return;
input   ap_ce;

reg[10:0] ap_return;

reg   [7:0] b1_val_read_reg_133;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] A00_fu_74_p2;
reg   [8:0] A00_reg_138;
wire   [9:0] add_ln113_fu_98_p2;
reg   [9:0] add_ln113_reg_143;
wire    ap_block_pp0_stage0;
wire   [8:0] M00_fu_54_p3;
wire   [8:0] zext_ln109_1_fu_70_p1;
wire   [8:0] zext_ln109_fu_66_p1;
wire   [8:0] zext_ln110_1_fu_84_p1;
wire   [8:0] zext_ln110_fu_80_p1;
wire   [8:0] S00_fu_88_p2;
wire   [9:0] zext_ln110_2_fu_94_p1;
wire   [9:0] zext_ln107_fu_62_p1;
wire   [8:0] M01_fu_104_p3;
wire   [10:0] zext_ln108_fu_111_p1;
wire   [10:0] zext_ln114_fu_118_p1;
wire   [10:0] out_pix_2_fu_121_p2;
wire   [10:0] zext_ln109_2_fu_115_p1;
wire   [10:0] out_pix_fu_127_p2;
reg    ap_ce_reg;
reg   [10:0] ap_return_int_reg;

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A00_reg_138 <= A00_fu_74_p2;
        add_ln113_reg_143 <= add_ln113_fu_98_p2;
        b1_val_read_reg_133 <= b1_val;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= out_pix_fu_127_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = out_pix_fu_127_p2;
    end else begin
        ap_return = 'bx;
    end
end

assign A00_fu_74_p2 = (zext_ln109_1_fu_70_p1 + zext_ln109_fu_66_p1);

assign M00_fu_54_p3 = {{t1_val}, {1'd0}};

assign M01_fu_104_p3 = {{b1_val_read_reg_133}, {1'd0}};

assign S00_fu_88_p2 = (zext_ln110_1_fu_84_p1 + zext_ln110_fu_80_p1);

assign add_ln113_fu_98_p2 = (zext_ln110_2_fu_94_p1 + zext_ln107_fu_62_p1);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign out_pix_2_fu_121_p2 = (zext_ln108_fu_111_p1 - zext_ln114_fu_118_p1);

assign out_pix_fu_127_p2 = (out_pix_2_fu_121_p2 + zext_ln109_2_fu_115_p1);

assign zext_ln107_fu_62_p1 = M00_fu_54_p3;

assign zext_ln108_fu_111_p1 = M01_fu_104_p3;

assign zext_ln109_1_fu_70_p1 = b2_val;

assign zext_ln109_2_fu_115_p1 = A00_reg_138;

assign zext_ln109_fu_66_p1 = b0_val;

assign zext_ln110_1_fu_84_p1 = t2_val;

assign zext_ln110_2_fu_94_p1 = S00_fu_88_p2;

assign zext_ln110_fu_80_p1 = t0_val;

assign zext_ln114_fu_118_p1 = add_ln113_reg_143;

endmodule //stereolbm_axis_cambm_xFGradientY3x3_0_4_s
