-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stereolbm_axis_cambm_xFInitUndistortRectifyMapInverseKernel_Pipeline_loop_height_loop_width is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mapxRMat_data_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    mapxRMat_data_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    mapxRMat_data_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    mapxRMat_data_full_n : IN STD_LOGIC;
    mapxRMat_data_write : OUT STD_LOGIC;
    mapyRMat_data_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    mapyRMat_data_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    mapyRMat_data_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    mapyRMat_data_full_n : IN STD_LOGIC;
    mapyRMat_data_write : OUT STD_LOGIC;
    mul_ln163 : IN STD_LOGIC_VECTOR (31 downto 0);
    cols : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_010436_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010440_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010434_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010428_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010430_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010424_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010418_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010420_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010442_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln131 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010312_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010314_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln136 : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln136_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln136_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010532_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln137 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010522_reload : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of stereolbm_axis_cambm_xFInitUndistortRectifyMapInverseKernel_Pipeline_loop_height_loop_width is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_200000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv52_10000000000 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000010000000000000000000000000000000000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv17_FFFF : STD_LOGIC_VECTOR (16 downto 0) := "01111111111111111";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv17_1FFE8 : STD_LOGIC_VECTOR (16 downto 0) := "11111111111101000";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln195_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal mapxRMat_data_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mapyRMat_data_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln137_cast_fu_420_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal sext_ln137_cast_reg_2035 : STD_LOGIC_VECTOR (64 downto 0);
    signal sext_ln136_2_cast_fu_424_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal sext_ln136_2_cast_reg_2040 : STD_LOGIC_VECTOR (64 downto 0);
    signal sext_ln136_1_cast_fu_428_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln136_1_cast_reg_2045 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln136_cast_fu_432_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln136_cast_reg_2051 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln131_cast_fu_436_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln131_cast_reg_2057 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln195_fu_502_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln195_reg_2066 : STD_LOGIC_VECTOR (10 downto 0);
    signal jfixed_fu_506_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal jfixed_reg_2071 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln195_fu_531_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln112_fu_537_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln112_reg_2090 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln112_1_reg_2095 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln113_reg_2100 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_344_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln113_1_reg_2105 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln120_reg_2110 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln120_1_reg_2115 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_x_fu_547_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_x_reg_2120 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_y_fu_556_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_y_reg_2125 : STD_LOGIC_VECTOR (31 downto 0);
    signal winv_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal winv_reg_2130 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln122_1_fu_580_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal x_reg_2151 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_2151_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_2151_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_2151_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_2151_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_2151_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_2151_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_2151_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_2151_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_2151_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_2151_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_2157 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln126_fu_609_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_reg_2162 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_reg_2162_pp0_iter8_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_reg_2162_pp0_iter9_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_reg_2162_pp0_iter10_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_reg_2162_pp0_iter11_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_reg_2162_pp0_iter12_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_reg_2162_pp0_iter13_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_reg_2162_pp0_iter14_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_reg_2162_pp0_iter15_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_reg_2162_pp0_iter16_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_reg_2162_pp0_iter17_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_reg_2162_pp0_iter18_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_1_fu_614_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_1_reg_2169 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_1_reg_2169_pp0_iter8_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_1_reg_2169_pp0_iter9_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_1_reg_2169_pp0_iter10_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_1_reg_2169_pp0_iter11_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_1_reg_2169_pp0_iter12_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_1_reg_2169_pp0_iter13_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_1_reg_2169_pp0_iter14_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_1_reg_2169_pp0_iter15_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_1_reg_2169_pp0_iter16_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_1_reg_2169_pp0_iter17_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln126_1_reg_2169_pp0_iter18_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_364_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal x2t_reg_2177 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_368_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal y2t_reg_2182 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_13_reg_2187 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_2187_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_2192 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_2192_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal r2_reg_2197 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln131_1_fu_653_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln131_1_reg_2203 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln131_1_reg_2203_pp0_iter11_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln131_1_reg_2203_pp0_iter12_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln131_1_reg_2203_pp0_iter13_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln131_1_reg_2203_pp0_iter14_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln131_1_reg_2203_pp0_iter15_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal add_ln136_1_fu_671_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln136_1_reg_2210 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln137_fu_688_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln137_reg_2215 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_372_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal mul_ln131_reg_2220 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln_reg_2235 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln136_2_reg_2240 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln136_2_reg_2240_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln136_2_reg_2240_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln136_2_reg_2240_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln136_2_reg_2240_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln136_2_reg_2240_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln136_2_reg_2240_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln136_2_reg_2240_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln136_2_reg_2240_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln137_1_reg_2245 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln137_1_reg_2245_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln137_1_reg_2245_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln137_1_reg_2245_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln137_1_reg_2245_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln137_1_reg_2245_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln137_1_reg_2245_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln137_1_reg_2245_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln137_1_reg_2245_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_376_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal mul_ln131_1_reg_2255 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln131_1_reg_2260 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_380_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal mul_ln131_2_reg_2275 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_2xy_reg_2280 : STD_LOGIC_VECTOR (31 downto 0);
    signal kr_reg_2285 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln136_3_fu_811_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln136_4_fu_816_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln2_reg_2302 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln136_1_reg_2307 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln3_reg_2312 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln137_2_reg_2317 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln136_2_fu_880_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln136_2_reg_2322 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln137_2_fu_905_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln137_2_reg_2327 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_412_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln136_3_reg_2342 : STD_LOGIC_VECTOR (64 downto 0);
    signal grp_fu_416_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln137_3_reg_2347 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln136_3_fu_930_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln136_3_reg_2352 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_286_reg_2357 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln136_4_fu_973_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln136_4_reg_2363 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_289_fu_979_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_289_reg_2368 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_fu_993_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_reg_2374 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_fu_1009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_2381 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_1_fu_1025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_1_reg_2386 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_2_fu_1031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_2_reg_2393 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln137_3_fu_1048_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln137_3_reg_2398 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_291_reg_2403 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln137_4_fu_1091_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln137_4_reg_2409 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_294_fu_1097_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_294_reg_2414 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln137_fu_1111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln137_reg_2420 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_fu_1127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_2427 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_1_fu_1143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_1_reg_2432 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_2_fu_1149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_2_reg_2439 : STD_LOGIC_VECTOR (0 downto 0);
    signal u_fu_1246_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal u_reg_2444 : STD_LOGIC_VECTOR (16 downto 0);
    signal v_fu_1344_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal v_reg_2450 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_296_reg_2456 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_296_reg_2456_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_296_reg_2456_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_296_reg_2456_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln219_fu_1359_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln219_reg_2462 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_300_reg_2467 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_300_reg_2467_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_300_reg_2467_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_300_reg_2467_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln220_fu_1373_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln220_reg_2473 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln219_fu_1379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln219_reg_2478 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln219_reg_2478_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln219_reg_2478_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln219_fu_1384_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln219_reg_2483 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln219_1_fu_1419_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln219_1_reg_2489 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln219_4_fu_1433_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln219_4_reg_2496 : STD_LOGIC_VECTOR (4 downto 0);
    signal bit_select30_i_i_fu_1445_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal bit_select30_i_i_reg_2501 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln219_2_fu_1453_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln219_2_reg_2506 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln219_2_reg_2506_pp0_iter27_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln219_2_reg_2506_pp0_iter28_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln220_fu_1457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln220_reg_2511 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln220_reg_2511_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln220_reg_2511_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln220_fu_1462_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln220_reg_2516 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln220_1_fu_1497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln220_1_reg_2522 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln220_4_fu_1511_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln220_4_reg_2529 : STD_LOGIC_VECTOR (4 downto 0);
    signal bit_select30_i_i1_fu_1523_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal bit_select30_i_i1_reg_2534 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln220_2_fu_1531_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln220_2_reg_2539 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln220_2_reg_2539_pp0_iter27_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln220_2_reg_2539_pp0_iter28_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln_fu_1607_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln_reg_2544 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln219_3_fu_1618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln219_3_reg_2549 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln219_fu_1633_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln219_reg_2554 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln219_fu_1648_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln219_reg_2559 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln1_fu_1726_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln1_reg_2564 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln220_3_fu_1737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln220_3_reg_2569 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln220_fu_1752_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln220_reg_2574 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln220_fu_1767_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln220_reg_2579 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln219_1_reg_2584 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_299_reg_2589 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln220_1_reg_2594 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_303_reg_2599 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln219_3_fu_1881_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln219_3_reg_2604 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln220_3_fu_1932_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln220_3_reg_2609 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_186 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_7_fu_510_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_6_fu_190 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln195_1_fu_494_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_fu_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln195_fu_463_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_332_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_336_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_340_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_344_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_348_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_352_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_356_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_360_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_364_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_368_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_372_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_376_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_380_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_384_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_388_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_396_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_400_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln200_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_475_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln195_fu_486_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln112_fu_543_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_fu_552_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln120_fu_561_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_fu_566_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_356_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_360_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal add_ln128_fu_639_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal shl_ln3_fu_657_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln136_7_fu_664_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln136_8_fu_668_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal shl_ln4_fu_677_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln137_1_fu_684_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal shl_ln2_fu_702_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal add_ln131_fu_709_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_404_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_408_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal shl_ln131_1_fu_748_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal add_ln131_1_fu_755_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal shl_ln_fu_774_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_400_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal add_ln131_2_fu_796_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_384_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_388_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_392_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_396_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln136_5_fu_861_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln136_6_fu_864_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln136_fu_867_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln136_10_fu_873_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln136_11_fu_877_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln137_3_fu_886_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln137_4_fu_889_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln137_1_fu_892_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln137_5_fu_898_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln137_6_fu_902_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal shl_ln136_1_fu_919_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln136_13_fu_926_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_288_fu_961_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln136_3_fu_943_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln136_fu_969_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_287_fu_953_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln136_fu_987_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_999_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_10_fu_1015_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln137_1_fu_1037_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln137_8_fu_1044_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_293_fu_1079_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln137_3_fu_1061_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln137_fu_1087_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_292_fu_1071_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln137_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_1117_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_fu_1133_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_290_fu_1160_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln136_4_fu_1167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_1_fu_1173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln136_fu_1155_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln136_1_fu_1188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_fu_1194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln136_2_fu_1199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln136_1_fu_1178_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_2_fu_1184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_4_fu_1210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_2_fu_1215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln136_3_fu_1221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_3_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_5_fu_1227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_1_fu_1240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln136_2_fu_1232_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_295_fu_1258_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln137_4_fu_1265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln137_1_fu_1271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln137_fu_1253_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln137_1_fu_1286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln137_fu_1292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln137_2_fu_1297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln137_1_fu_1276_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln137_2_fu_1282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln137_4_fu_1308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln137_2_fu_1313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln137_3_fu_1319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln137_3_fu_1302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln137_5_fu_1325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln137_1_fu_1338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln137_2_fu_1330_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_fu_1389_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_fu_1399_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln219_fu_1407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1411_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln219_1_fu_1429_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln219_fu_1425_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln219_1_fu_1439_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_fu_1467_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_fu_1477_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln220_fu_1485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1489_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln220_1_fu_1507_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln220_fu_1503_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln220_1_fu_1517_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln219_fu_1535_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_297_fu_1540_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln219_5_fu_1556_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lshr_ln219_2_fu_1559_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal and_ln219_2_fu_1565_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln219_1_fu_1550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln219_2_fu_1570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_298_fu_1582_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln219_fu_1590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln219_1_fu_1596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln219_fu_1576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln219_fu_1601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln219_2_fu_1624_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln219_fu_1615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln219_1_fu_1629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln219_2_fu_1639_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln219_2_fu_1644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln220_fu_1654_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_301_fu_1659_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln220_5_fu_1675_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lshr_ln220_2_fu_1678_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal and_ln220_2_fu_1684_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln220_1_fu_1669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln220_2_fu_1689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_302_fu_1701_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln220_fu_1709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln220_1_fu_1715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln220_fu_1695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln220_fu_1720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln220_2_fu_1743_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln220_fu_1734_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln220_1_fu_1748_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln220_2_fu_1758_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln220_2_fu_1763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln219_1_fu_1773_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln219_3_fu_1778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln219_3_fu_1781_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln220_1_fu_1805_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln220_3_fu_1810_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln220_3_fu_1813_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln219_3_fu_1847_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln219_2_fu_1840_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln219_4_fu_1852_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln219_4_fu_1837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_1858_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal pi_assign_fu_1865_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_fu_1877_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln220_3_fu_1898_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln220_2_fu_1891_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln220_4_fu_1903_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln220_4_fu_1888_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_1909_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal pi_assign_1_fu_1916_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_1_fu_1928_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_done_int_frp : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal frp_pipeline_valid_U_valid_out : STD_LOGIC_VECTOR (30 downto 0);
    signal frp_pipeline_valid_U_num_valid_datasets : STD_LOGIC_VECTOR (5 downto 0);
    signal pf_mapxRMat_data_U_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal pf_mapxRMat_data_U_data_out_vld : STD_LOGIC;
    signal pf_mapxRMat_data_U_pf_ready : STD_LOGIC;
    signal pf_mapxRMat_data_U_pf_done : STD_LOGIC;
    signal pf_mapyRMat_data_U_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal pf_mapyRMat_data_U_data_out_vld : STD_LOGIC;
    signal pf_mapyRMat_data_U_pf_ready : STD_LOGIC;
    signal pf_mapyRMat_data_U_pf_done : STD_LOGIC;
    signal pf_data_in_last : STD_LOGIC;
    signal ap_condition_frp_pvb_no_fwd_prs : BOOLEAN;
    signal ap_condition_frp_pvb_no_bkwd_prs : BOOLEAN;
    signal ap_condition_frp_pvb_pf_start : BOOLEAN;
    signal ap_frp_vld_in : STD_LOGIC;
    signal frp_pipeline_valid_U_exitcond : STD_LOGIC;
    signal pf_mapxRMat_data_U_data_in_vld : STD_LOGIC;
    signal pf_sync_continue : STD_LOGIC;
    signal pf_all_done : STD_LOGIC := '0';
    signal pf_mapyRMat_data_U_data_in_vld : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component stereolbm_axis_cambm_mul_32s_11ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stereolbm_axis_cambm_mul_32s_32s_52_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component stereolbm_axis_cambm_mul_33s_32s_52_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component stereolbm_axis_cambm_mul_34s_32s_52_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (33 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component stereolbm_axis_cambm_mul_34s_32s_65_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (33 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component stereolbm_axis_cambm_frp_fifoout IS
    generic (
        BlockingType : INTEGER;
        PipeLatency : INTEGER;
        PipelineII : INTEGER;
        DataWidth : INTEGER;
        NumWrites : INTEGER;
        CeilLog2Stages : INTEGER;
        CeilLog2FDepth : INTEGER;
        PfAllDoneEnable : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        valid : IN STD_LOGIC_VECTOR (30 downto 0);
        data_in_vld : IN STD_LOGIC;
        data_out_vld : OUT STD_LOGIC;
        data_in_last : IN STD_LOGIC;
        pf_continue : IN STD_LOGIC;
        pf_all_done : IN STD_LOGIC;
        pf_ready : OUT STD_LOGIC;
        pf_done : OUT STD_LOGIC;
        data_out_read : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        num_valid_datasets : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component stereolbm_axis_cambm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;


    component stereolbm_axis_cambm_frp_pipeline_valid IS
    generic (
        PipelineLatency : INTEGER;
        PipelineII : INTEGER;
        CeilLog2Stages : INTEGER;
        ExitLatency : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        valid_in : IN STD_LOGIC;
        exitcond : IN STD_LOGIC;
        valid_out : OUT STD_LOGIC_VECTOR (30 downto 0);
        num_valid_datasets : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    mul_32s_11ns_32_2_1_U153 : component stereolbm_axis_cambm_mul_32s_11ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 11,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_0_0_010436_reload,
        din1 => grp_fu_332_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_332_p2);

    mul_32s_11ns_32_2_1_U154 : component stereolbm_axis_cambm_mul_32s_11ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 11,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_0_0_010440_reload,
        din1 => grp_fu_336_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_336_p2);

    mul_32s_11ns_32_2_1_U155 : component stereolbm_axis_cambm_mul_32s_11ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 11,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_0_0_010428_reload,
        din1 => grp_fu_340_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_340_p2);

    mul_32s_11ns_32_2_1_U156 : component stereolbm_axis_cambm_mul_32s_11ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 11,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_0_0_010430_reload,
        din1 => grp_fu_344_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_344_p2);

    mul_32s_11ns_32_2_1_U157 : component stereolbm_axis_cambm_mul_32s_11ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 11,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_0_0_010418_reload,
        din1 => grp_fu_348_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_348_p2);

    mul_32s_11ns_32_2_1_U158 : component stereolbm_axis_cambm_mul_32s_11ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 11,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_0_0_010420_reload,
        din1 => grp_fu_352_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_352_p2);

    mul_32s_32s_52_2_1_U159 : component stereolbm_axis_cambm_mul_32s_32s_52_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_x_reg_2120,
        din1 => grp_fu_356_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_356_p2);

    mul_32s_32s_52_2_1_U160 : component stereolbm_axis_cambm_mul_32s_32s_52_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_y_reg_2125,
        din1 => grp_fu_360_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_360_p2);

    mul_32s_32s_52_2_1_U161 : component stereolbm_axis_cambm_mul_32s_32s_52_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_364_p0,
        din1 => grp_fu_364_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_364_p2);

    mul_32s_32s_52_2_1_U162 : component stereolbm_axis_cambm_mul_32s_32s_52_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_368_p0,
        din1 => grp_fu_368_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_368_p2);

    mul_32s_32s_52_2_1_U163 : component stereolbm_axis_cambm_mul_32s_32s_52_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => r2_reg_2197,
        din1 => grp_fu_372_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_372_p2);

    mul_32s_32s_52_2_1_U164 : component stereolbm_axis_cambm_mul_32s_32s_52_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln_reg_2235,
        din1 => grp_fu_376_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_376_p2);

    mul_32s_32s_52_2_1_U165 : component stereolbm_axis_cambm_mul_32s_32s_52_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln131_1_reg_2260,
        din1 => grp_fu_380_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_380_p2);

    mul_32s_32s_52_2_1_U166 : component stereolbm_axis_cambm_mul_32s_32s_52_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_384_p0,
        din1 => grp_fu_384_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_384_p2);

    mul_32s_32s_52_2_1_U167 : component stereolbm_axis_cambm_mul_32s_32s_52_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_388_p0,
        din1 => grp_fu_388_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_388_p2);

    mul_32s_32s_52_2_1_U168 : component stereolbm_axis_cambm_mul_32s_32s_52_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_392_p0,
        din1 => grp_fu_392_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_392_p2);

    mul_32s_32s_52_2_1_U169 : component stereolbm_axis_cambm_mul_32s_32s_52_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_396_p0,
        din1 => grp_fu_396_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_396_p2);

    mul_33s_32s_52_2_1_U170 : component stereolbm_axis_cambm_mul_33s_32s_52_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 33,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => shl_ln_fu_774_p3,
        din1 => grp_fu_400_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_400_p2);

    mul_34s_32s_52_2_1_U171 : component stereolbm_axis_cambm_mul_34s_32s_52_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 34,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln136_1_reg_2210,
        din1 => grp_fu_404_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_404_p2);

    mul_34s_32s_52_2_1_U172 : component stereolbm_axis_cambm_mul_34s_32s_52_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 34,
        din1_WIDTH => 32,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln137_reg_2215,
        din1 => grp_fu_408_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_408_p2);

    mul_34s_32s_65_2_1_U173 : component stereolbm_axis_cambm_mul_34s_32s_65_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 34,
        din1_WIDTH => 32,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln136_2_reg_2322,
        din1 => grp_fu_412_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_412_p2);

    mul_34s_32s_65_2_1_U174 : component stereolbm_axis_cambm_mul_34s_32s_65_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 34,
        din1_WIDTH => 32,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln137_2_reg_2327,
        din1 => grp_fu_416_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_416_p2);

    flow_control_loop_pipe_sequential_init_U : component stereolbm_axis_cambm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => pf_all_done,
        ap_continue_int => ap_continue_int,
        ap_done_int => pf_all_done);

    frp_pipeline_valid_U : component stereolbm_axis_cambm_frp_pipeline_valid
    generic map (
        PipelineLatency => 31,
        PipelineII => 1,
        CeilLog2Stages => 5,
        ExitLatency => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        valid_in => ap_frp_vld_in,
        exitcond => frp_pipeline_valid_U_exitcond,
        valid_out => frp_pipeline_valid_U_valid_out,
        num_valid_datasets => frp_pipeline_valid_U_num_valid_datasets);

    pf_mapxRMat_data_U : component stereolbm_axis_cambm_frp_fifoout
    generic map (
        BlockingType => 1,
        PipeLatency => 31,
        PipelineII => 1,
        DataWidth => 32,
        NumWrites => 1,
        CeilLog2Stages => 5,
        CeilLog2FDepth => 5,
        PfAllDoneEnable => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => select_ln219_3_reg_2604,
        data_out => pf_mapxRMat_data_U_data_out,
        valid => frp_pipeline_valid_U_valid_out,
        data_in_vld => pf_mapxRMat_data_U_data_in_vld,
        data_out_vld => pf_mapxRMat_data_U_data_out_vld,
        data_in_last => ap_done_int_frp,
        pf_continue => pf_sync_continue,
        pf_all_done => pf_all_done,
        pf_ready => pf_mapxRMat_data_U_pf_ready,
        pf_done => pf_mapxRMat_data_U_pf_done,
        data_out_read => mapxRMat_data_full_n,
        ap_start => ap_const_logic_0,
        num_valid_datasets => frp_pipeline_valid_U_num_valid_datasets);

    pf_mapyRMat_data_U : component stereolbm_axis_cambm_frp_fifoout
    generic map (
        BlockingType => 1,
        PipeLatency => 31,
        PipelineII => 1,
        DataWidth => 32,
        NumWrites => 1,
        CeilLog2Stages => 5,
        CeilLog2FDepth => 5,
        PfAllDoneEnable => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => select_ln220_3_reg_2609,
        data_out => pf_mapyRMat_data_U_data_out,
        valid => frp_pipeline_valid_U_valid_out,
        data_in_vld => pf_mapyRMat_data_U_data_in_vld,
        data_out_vld => pf_mapyRMat_data_U_data_out_vld,
        data_in_last => ap_done_int_frp,
        pf_continue => pf_sync_continue,
        pf_all_done => pf_all_done,
        pf_ready => pf_mapyRMat_data_U_pf_ready,
        pf_done => pf_mapyRMat_data_U_pf_done,
        data_out_read => mapyRMat_data_full_n,
        ap_start => ap_const_logic_0,
        num_valid_datasets => frp_pipeline_valid_U_num_valid_datasets);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    pf_all_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                pf_all_done <= ap_const_logic_0;
            else
                pf_all_done <= (pf_mapyRMat_data_U_pf_done and pf_mapxRMat_data_U_pf_done);
            end if;
        end if;
    end process;


    i_6_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_6_fu_190 <= ap_const_lv16_0;
            elsif (((frp_pipeline_valid_U_valid_out(1) = ap_const_logic_1) and ((icmp_ln195_fu_458_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                i_6_fu_190 <= select_ln195_1_fu_494_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_fu_194 <= ap_const_lv32_0;
            elsif (((frp_pipeline_valid_U_valid_out(1) = ap_const_logic_1) and ((icmp_ln195_fu_458_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                indvar_flatten_fu_194 <= add_ln195_fu_463_p2;
            end if; 
        end if;
    end process;

    j_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_fu_186 <= ap_const_lv16_0;
            elsif (((frp_pipeline_valid_U_valid_out(1) = ap_const_logic_1) and ((icmp_ln195_fu_458_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                j_fu_186 <= j_7_fu_510_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln136_1_reg_2210 <= add_ln136_1_fu_671_p2;
                add_ln136_2_reg_2322 <= add_ln136_2_fu_880_p2;
                add_ln136_3_reg_2352 <= add_ln136_3_fu_930_p2;
                add_ln136_4_reg_2363 <= add_ln136_4_fu_973_p2;
                add_ln137_2_reg_2327 <= add_ln137_2_fu_905_p2;
                add_ln137_3_reg_2398 <= add_ln137_3_fu_1048_p2;
                add_ln137_4_reg_2409 <= add_ln137_4_fu_1091_p2;
                add_ln137_reg_2215 <= add_ln137_fu_688_p2;
                and_ln136_reg_2374 <= and_ln136_fu_993_p2;
                and_ln137_reg_2420 <= and_ln137_fu_1111_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                bit_select30_i_i1_reg_2534 <= bit_select30_i_i1_fu_1523_p3;
                bit_select30_i_i_reg_2501 <= bit_select30_i_i_fu_1445_p3;
                icmp_ln136_1_reg_2386 <= icmp_ln136_1_fu_1025_p2;
                icmp_ln136_2_reg_2393 <= icmp_ln136_2_fu_1031_p2;
                icmp_ln136_reg_2381 <= icmp_ln136_fu_1009_p2;
                icmp_ln137_1_reg_2432 <= icmp_ln137_1_fu_1143_p2;
                icmp_ln137_2_reg_2439 <= icmp_ln137_2_fu_1149_p2;
                icmp_ln137_reg_2427 <= icmp_ln137_fu_1127_p2;
                icmp_ln219_reg_2478 <= icmp_ln219_fu_1379_p2;
                icmp_ln219_reg_2478_pp0_iter27_reg <= icmp_ln219_reg_2478;
                icmp_ln219_reg_2478_pp0_iter28_reg <= icmp_ln219_reg_2478_pp0_iter27_reg;
                icmp_ln220_reg_2511 <= icmp_ln220_fu_1457_p2;
                icmp_ln220_reg_2511_pp0_iter27_reg <= icmp_ln220_reg_2511;
                icmp_ln220_reg_2511_pp0_iter28_reg <= icmp_ln220_reg_2511_pp0_iter27_reg;
                kr_reg_2285 <= add_ln131_2_fu_796_p2(51 downto 20);
                mul_ln112_1_reg_2095 <= grp_fu_336_p2;
                mul_ln112_reg_2090 <= grp_fu_332_p2;
                mul_ln113_1_reg_2105 <= grp_fu_344_p2;
                mul_ln113_reg_2100 <= grp_fu_340_p2;
                mul_ln120_1_reg_2115 <= grp_fu_352_p2;
                mul_ln120_reg_2110 <= grp_fu_348_p2;
                mul_ln131_1_reg_2255 <= grp_fu_376_p2;
                mul_ln131_2_reg_2275 <= grp_fu_380_p2;
                mul_ln131_reg_2220 <= grp_fu_372_p2;
                mul_ln136_3_reg_2342 <= grp_fu_412_p2;
                mul_ln137_3_reg_2347 <= grp_fu_416_p2;
                p_2xy_reg_2280 <= grp_fu_400_p2(51 downto 20);
                p_x_reg_2120 <= p_x_fu_547_p2;
                p_y_reg_2125 <= p_y_fu_556_p2;
                r2_reg_2197 <= add_ln128_fu_639_p2(51 downto 20);
                select_ln219_3_reg_2604 <= select_ln219_3_fu_1881_p3;
                select_ln219_reg_2483 <= select_ln219_fu_1384_p3;
                select_ln220_3_reg_2609 <= select_ln220_3_fu_1932_p3;
                select_ln220_reg_2516 <= select_ln220_fu_1462_p3;
                sext_ln126_1_reg_2169 <= sext_ln126_1_fu_614_p1;
                sext_ln126_1_reg_2169_pp0_iter10_reg <= sext_ln126_1_reg_2169_pp0_iter9_reg;
                sext_ln126_1_reg_2169_pp0_iter11_reg <= sext_ln126_1_reg_2169_pp0_iter10_reg;
                sext_ln126_1_reg_2169_pp0_iter12_reg <= sext_ln126_1_reg_2169_pp0_iter11_reg;
                sext_ln126_1_reg_2169_pp0_iter13_reg <= sext_ln126_1_reg_2169_pp0_iter12_reg;
                sext_ln126_1_reg_2169_pp0_iter14_reg <= sext_ln126_1_reg_2169_pp0_iter13_reg;
                sext_ln126_1_reg_2169_pp0_iter15_reg <= sext_ln126_1_reg_2169_pp0_iter14_reg;
                sext_ln126_1_reg_2169_pp0_iter16_reg <= sext_ln126_1_reg_2169_pp0_iter15_reg;
                sext_ln126_1_reg_2169_pp0_iter17_reg <= sext_ln126_1_reg_2169_pp0_iter16_reg;
                sext_ln126_1_reg_2169_pp0_iter18_reg <= sext_ln126_1_reg_2169_pp0_iter17_reg;
                sext_ln126_1_reg_2169_pp0_iter8_reg <= sext_ln126_1_reg_2169;
                sext_ln126_1_reg_2169_pp0_iter9_reg <= sext_ln126_1_reg_2169_pp0_iter8_reg;
                sext_ln126_reg_2162 <= sext_ln126_fu_609_p1;
                sext_ln126_reg_2162_pp0_iter10_reg <= sext_ln126_reg_2162_pp0_iter9_reg;
                sext_ln126_reg_2162_pp0_iter11_reg <= sext_ln126_reg_2162_pp0_iter10_reg;
                sext_ln126_reg_2162_pp0_iter12_reg <= sext_ln126_reg_2162_pp0_iter11_reg;
                sext_ln126_reg_2162_pp0_iter13_reg <= sext_ln126_reg_2162_pp0_iter12_reg;
                sext_ln126_reg_2162_pp0_iter14_reg <= sext_ln126_reg_2162_pp0_iter13_reg;
                sext_ln126_reg_2162_pp0_iter15_reg <= sext_ln126_reg_2162_pp0_iter14_reg;
                sext_ln126_reg_2162_pp0_iter16_reg <= sext_ln126_reg_2162_pp0_iter15_reg;
                sext_ln126_reg_2162_pp0_iter17_reg <= sext_ln126_reg_2162_pp0_iter16_reg;
                sext_ln126_reg_2162_pp0_iter18_reg <= sext_ln126_reg_2162_pp0_iter17_reg;
                sext_ln126_reg_2162_pp0_iter8_reg <= sext_ln126_reg_2162;
                sext_ln126_reg_2162_pp0_iter9_reg <= sext_ln126_reg_2162_pp0_iter8_reg;
                sext_ln131_1_reg_2203 <= sext_ln131_1_fu_653_p1;
                sext_ln131_1_reg_2203_pp0_iter11_reg <= sext_ln131_1_reg_2203;
                sext_ln131_1_reg_2203_pp0_iter12_reg <= sext_ln131_1_reg_2203_pp0_iter11_reg;
                sext_ln131_1_reg_2203_pp0_iter13_reg <= sext_ln131_1_reg_2203_pp0_iter12_reg;
                sext_ln131_1_reg_2203_pp0_iter14_reg <= sext_ln131_1_reg_2203_pp0_iter13_reg;
                sext_ln131_1_reg_2203_pp0_iter15_reg <= sext_ln131_1_reg_2203_pp0_iter14_reg;
                sub_ln219_1_reg_2489 <= sub_ln219_1_fu_1419_p2;
                sub_ln219_4_reg_2496 <= sub_ln219_4_fu_1433_p2;
                sub_ln219_reg_2462 <= sub_ln219_fu_1359_p2;
                sub_ln220_1_reg_2522 <= sub_ln220_1_fu_1497_p2;
                sub_ln220_4_reg_2529 <= sub_ln220_4_fu_1511_p2;
                sub_ln220_reg_2473 <= sub_ln220_fu_1373_p2;
                tmp_13_reg_2187 <= grp_fu_364_p2(51 downto 20);
                tmp_13_reg_2187_pp0_iter9_reg <= tmp_13_reg_2187;
                tmp_14_reg_2192 <= grp_fu_368_p2(51 downto 20);
                tmp_14_reg_2192_pp0_iter9_reg <= tmp_14_reg_2192;
                tmp_286_reg_2357 <= add_ln136_3_fu_930_p2(64 downto 64);
                tmp_289_reg_2368 <= add_ln136_4_fu_973_p2(16 downto 16);
                tmp_291_reg_2403 <= add_ln137_3_fu_1048_p2(64 downto 64);
                tmp_294_reg_2414 <= add_ln137_4_fu_1091_p2(16 downto 16);
                tmp_296_reg_2456 <= u_fu_1246_p3(16 downto 16);
                tmp_296_reg_2456_pp0_iter26_reg <= tmp_296_reg_2456;
                tmp_296_reg_2456_pp0_iter27_reg <= tmp_296_reg_2456_pp0_iter26_reg;
                tmp_296_reg_2456_pp0_iter28_reg <= tmp_296_reg_2456_pp0_iter27_reg;
                tmp_300_reg_2467 <= v_fu_1344_p3(16 downto 16);
                tmp_300_reg_2467_pp0_iter26_reg <= tmp_300_reg_2467;
                tmp_300_reg_2467_pp0_iter27_reg <= tmp_300_reg_2467_pp0_iter26_reg;
                tmp_300_reg_2467_pp0_iter28_reg <= tmp_300_reg_2467_pp0_iter27_reg;
                trunc_ln131_1_reg_2260 <= add_ln131_1_fu_755_p2(51 downto 20);
                trunc_ln136_1_reg_2307 <= grp_fu_388_p2(51 downto 20);
                trunc_ln136_2_reg_2240 <= grp_fu_404_p2(51 downto 20);
                trunc_ln136_2_reg_2240_pp0_iter13_reg <= trunc_ln136_2_reg_2240;
                trunc_ln136_2_reg_2240_pp0_iter14_reg <= trunc_ln136_2_reg_2240_pp0_iter13_reg;
                trunc_ln136_2_reg_2240_pp0_iter15_reg <= trunc_ln136_2_reg_2240_pp0_iter14_reg;
                trunc_ln136_2_reg_2240_pp0_iter16_reg <= trunc_ln136_2_reg_2240_pp0_iter15_reg;
                trunc_ln136_2_reg_2240_pp0_iter17_reg <= trunc_ln136_2_reg_2240_pp0_iter16_reg;
                trunc_ln136_2_reg_2240_pp0_iter18_reg <= trunc_ln136_2_reg_2240_pp0_iter17_reg;
                trunc_ln136_2_reg_2240_pp0_iter19_reg <= trunc_ln136_2_reg_2240_pp0_iter18_reg;
                trunc_ln136_2_reg_2240_pp0_iter20_reg <= trunc_ln136_2_reg_2240_pp0_iter19_reg;
                trunc_ln137_1_reg_2245 <= grp_fu_408_p2(51 downto 20);
                trunc_ln137_1_reg_2245_pp0_iter13_reg <= trunc_ln137_1_reg_2245;
                trunc_ln137_1_reg_2245_pp0_iter14_reg <= trunc_ln137_1_reg_2245_pp0_iter13_reg;
                trunc_ln137_1_reg_2245_pp0_iter15_reg <= trunc_ln137_1_reg_2245_pp0_iter14_reg;
                trunc_ln137_1_reg_2245_pp0_iter16_reg <= trunc_ln137_1_reg_2245_pp0_iter15_reg;
                trunc_ln137_1_reg_2245_pp0_iter17_reg <= trunc_ln137_1_reg_2245_pp0_iter16_reg;
                trunc_ln137_1_reg_2245_pp0_iter18_reg <= trunc_ln137_1_reg_2245_pp0_iter17_reg;
                trunc_ln137_1_reg_2245_pp0_iter19_reg <= trunc_ln137_1_reg_2245_pp0_iter18_reg;
                trunc_ln137_1_reg_2245_pp0_iter20_reg <= trunc_ln137_1_reg_2245_pp0_iter19_reg;
                trunc_ln137_2_reg_2317 <= grp_fu_396_p2(51 downto 20);
                trunc_ln219_2_reg_2506 <= trunc_ln219_2_fu_1453_p1;
                trunc_ln219_2_reg_2506_pp0_iter27_reg <= trunc_ln219_2_reg_2506;
                trunc_ln219_2_reg_2506_pp0_iter28_reg <= trunc_ln219_2_reg_2506_pp0_iter27_reg;
                trunc_ln220_2_reg_2539 <= trunc_ln220_2_fu_1531_p1;
                trunc_ln220_2_reg_2539_pp0_iter27_reg <= trunc_ln220_2_reg_2539;
                trunc_ln220_2_reg_2539_pp0_iter28_reg <= trunc_ln220_2_reg_2539_pp0_iter27_reg;
                trunc_ln2_reg_2302 <= grp_fu_384_p2(51 downto 20);
                trunc_ln3_reg_2312 <= grp_fu_392_p2(51 downto 20);
                trunc_ln_reg_2235 <= add_ln131_fu_709_p2(51 downto 20);
                u_reg_2444 <= u_fu_1246_p3;
                v_reg_2450 <= v_fu_1344_p3;
                winv_reg_2130 <= winv_fu_571_p2;
                x2t_reg_2177 <= grp_fu_364_p2;
                x_reg_2151 <= grp_fu_356_p2(51 downto 20);
                x_reg_2151_pp0_iter10_reg <= x_reg_2151_pp0_iter9_reg;
                x_reg_2151_pp0_iter11_reg <= x_reg_2151_pp0_iter10_reg;
                x_reg_2151_pp0_iter12_reg <= x_reg_2151_pp0_iter11_reg;
                x_reg_2151_pp0_iter13_reg <= x_reg_2151_pp0_iter12_reg;
                x_reg_2151_pp0_iter14_reg <= x_reg_2151_pp0_iter13_reg;
                x_reg_2151_pp0_iter15_reg <= x_reg_2151_pp0_iter14_reg;
                x_reg_2151_pp0_iter16_reg <= x_reg_2151_pp0_iter15_reg;
                x_reg_2151_pp0_iter7_reg <= x_reg_2151;
                x_reg_2151_pp0_iter8_reg <= x_reg_2151_pp0_iter7_reg;
                x_reg_2151_pp0_iter9_reg <= x_reg_2151_pp0_iter8_reg;
                y2t_reg_2182 <= grp_fu_368_p2;
                y_reg_2157 <= grp_fu_360_p2(51 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                sext_ln131_cast_reg_2057 <= sext_ln131_cast_fu_436_p1;
                sext_ln136_1_cast_reg_2045 <= sext_ln136_1_cast_fu_428_p1;
                sext_ln136_2_cast_reg_2040 <= sext_ln136_2_cast_fu_424_p1;
                sext_ln136_cast_reg_2051 <= sext_ln136_cast_fu_432_p1;
                sext_ln137_cast_reg_2035 <= sext_ln137_cast_fu_420_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln219_reg_2478 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln219_3_reg_2549 <= icmp_ln219_3_fu_1618_p2;
                lshr_ln219_reg_2554 <= lshr_ln219_fu_1633_p2;
                    or_ln_reg_2544(0) <= or_ln_fu_1607_p3(0);
                shl_ln219_reg_2559 <= shl_ln219_fu_1648_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln220_reg_2511 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln220_3_reg_2569 <= icmp_ln220_3_fu_1737_p2;
                lshr_ln220_reg_2574 <= lshr_ln220_fu_1752_p2;
                    or_ln1_reg_2564(0) <= or_ln1_fu_1726_p3(0);
                shl_ln220_reg_2579 <= shl_ln220_fu_1767_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln195_fu_458_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                jfixed_reg_2071 <= jfixed_fu_506_p1;
                trunc_ln195_reg_2066 <= trunc_ln195_fu_502_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln219_reg_2478_pp0_iter27_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                lshr_ln219_1_reg_2584 <= add_ln219_3_fu_1781_p2(63 downto 1);
                tmp_299_reg_2589 <= add_ln219_3_fu_1781_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln220_reg_2511_pp0_iter27_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                lshr_ln220_1_reg_2594 <= add_ln220_3_fu_1813_p2(63 downto 1);
                tmp_303_reg_2599 <= add_ln220_3_fu_1813_p2(25 downto 25);
            end if;
        end if;
    end process;
    or_ln_reg_2544(1) <= '0';
    or_ln1_reg_2564(1) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    LD_1_fu_1928_p1 <= pi_assign_1_fu_1916_p5(32 - 1 downto 0);
    LD_fu_1877_p1 <= pi_assign_fu_1865_p5(32 - 1 downto 0);
    add_ln112_fu_543_p2 <= std_logic_vector(unsigned(p_0_0_010434_reload) + unsigned(mul_ln112_1_reg_2095));
    add_ln113_fu_552_p2 <= std_logic_vector(unsigned(p_0_0_010424_reload) + unsigned(mul_ln113_1_reg_2105));
    add_ln128_fu_639_p2 <= std_logic_vector(unsigned(x2t_reg_2177) + unsigned(y2t_reg_2182));
    add_ln131_1_fu_755_p2 <= std_logic_vector(unsigned(mul_ln131_1_reg_2255) + unsigned(shl_ln131_1_fu_748_p3));
    add_ln131_2_fu_796_p2 <= std_logic_vector(unsigned(mul_ln131_2_reg_2275) + unsigned(ap_const_lv52_10000000000));
    add_ln131_fu_709_p2 <= std_logic_vector(unsigned(mul_ln131_reg_2220) + unsigned(shl_ln2_fu_702_p3));
    add_ln136_1_fu_671_p2 <= std_logic_vector(signed(sext_ln136_7_fu_664_p1) + signed(sext_ln136_8_fu_668_p1));
    add_ln136_2_fu_880_p2 <= std_logic_vector(signed(sext_ln136_10_fu_873_p1) + signed(sext_ln136_11_fu_877_p1));
    add_ln136_3_fu_930_p2 <= std_logic_vector(unsigned(mul_ln136_3_reg_2342) + unsigned(sext_ln136_13_fu_926_p1));
    add_ln136_4_fu_973_p2 <= std_logic_vector(unsigned(trunc_ln136_3_fu_943_p4) + unsigned(zext_ln136_fu_969_p1));
    add_ln136_fu_867_p2 <= std_logic_vector(signed(sext_ln136_5_fu_861_p1) + signed(sext_ln136_6_fu_864_p1));
    add_ln137_1_fu_892_p2 <= std_logic_vector(signed(sext_ln137_3_fu_886_p1) + signed(sext_ln137_4_fu_889_p1));
    add_ln137_2_fu_905_p2 <= std_logic_vector(signed(sext_ln137_5_fu_898_p1) + signed(sext_ln137_6_fu_902_p1));
    add_ln137_3_fu_1048_p2 <= std_logic_vector(unsigned(mul_ln137_3_reg_2347) + unsigned(sext_ln137_8_fu_1044_p1));
    add_ln137_4_fu_1091_p2 <= std_logic_vector(unsigned(trunc_ln137_3_fu_1061_p4) + unsigned(zext_ln137_fu_1087_p1));
    add_ln137_fu_688_p2 <= std_logic_vector(signed(sext_ln137_1_fu_684_p1) + signed(sext_ln136_8_fu_668_p1));
    add_ln195_fu_463_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_194) + unsigned(ap_const_lv32_1));
    add_ln219_1_fu_1439_p2 <= std_logic_vector(unsigned(trunc_ln219_fu_1425_p1) + unsigned(ap_const_lv17_1FFE8));
    add_ln219_2_fu_1624_p2 <= std_logic_vector(unsigned(sub_ln219_1_reg_2489) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln219_3_fu_1781_p2 <= std_logic_vector(unsigned(select_ln219_1_fu_1773_p3) + unsigned(zext_ln219_3_fu_1778_p1));
    add_ln219_4_fu_1852_p2 <= std_logic_vector(unsigned(sub_ln219_3_fu_1847_p2) + unsigned(select_ln219_2_fu_1840_p3));
    add_ln219_fu_1535_p2 <= std_logic_vector(unsigned(sub_ln219_1_reg_2489) + unsigned(ap_const_lv32_FFFFFFE8));
    add_ln220_1_fu_1517_p2 <= std_logic_vector(unsigned(trunc_ln220_fu_1503_p1) + unsigned(ap_const_lv17_1FFE8));
    add_ln220_2_fu_1743_p2 <= std_logic_vector(unsigned(sub_ln220_1_reg_2522) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln220_3_fu_1813_p2 <= std_logic_vector(unsigned(select_ln220_1_fu_1805_p3) + unsigned(zext_ln220_3_fu_1810_p1));
    add_ln220_4_fu_1903_p2 <= std_logic_vector(unsigned(sub_ln220_3_fu_1898_p2) + unsigned(select_ln220_2_fu_1891_p3));
    add_ln220_fu_1654_p2 <= std_logic_vector(unsigned(sub_ln220_1_reg_2522) + unsigned(ap_const_lv32_FFFFFFE8));
    and_ln136_1_fu_1173_p2 <= (xor_ln136_4_fu_1167_p2 and icmp_ln136_reg_2381);
    and_ln136_2_fu_1184_p2 <= (icmp_ln136_1_reg_2386 and and_ln136_reg_2374);
    and_ln136_3_fu_1204_p2 <= (xor_ln136_2_fu_1199_p2 and or_ln136_fu_1194_p2);
    and_ln136_4_fu_1210_p2 <= (tmp_289_reg_2368 and select_ln136_1_fu_1178_p3);
    and_ln136_5_fu_1227_p2 <= (xor_ln136_3_fu_1221_p2 and tmp_286_reg_2357);
    and_ln136_fu_993_p2 <= (xor_ln136_fu_987_p2 and tmp_287_fu_953_p3);
    and_ln137_1_fu_1271_p2 <= (xor_ln137_4_fu_1265_p2 and icmp_ln137_reg_2427);
    and_ln137_2_fu_1282_p2 <= (icmp_ln137_1_reg_2432 and and_ln137_reg_2420);
    and_ln137_3_fu_1302_p2 <= (xor_ln137_2_fu_1297_p2 and or_ln137_fu_1292_p2);
    and_ln137_4_fu_1308_p2 <= (tmp_294_reg_2414 and select_ln137_1_fu_1276_p3);
    and_ln137_5_fu_1325_p2 <= (xor_ln137_3_fu_1319_p2 and tmp_291_reg_2403);
    and_ln137_fu_1111_p2 <= (xor_ln137_fu_1105_p2 and tmp_292_fu_1071_p3);
    and_ln219_1_fu_1596_p2 <= (xor_ln219_fu_1590_p2 and bit_select30_i_i_reg_2501);
    and_ln219_2_fu_1565_p2 <= (select_ln219_reg_2483 and lshr_ln219_2_fu_1559_p2);
    and_ln219_fu_1576_p2 <= (icmp_ln219_2_fu_1570_p2 and icmp_ln219_1_fu_1550_p2);
    and_ln220_1_fu_1715_p2 <= (xor_ln220_fu_1709_p2 and bit_select30_i_i1_reg_2534);
    and_ln220_2_fu_1684_p2 <= (select_ln220_reg_2516 and lshr_ln220_2_fu_1678_p2);
    and_ln220_fu_1695_p2 <= (icmp_ln220_2_fu_1689_p2 and icmp_ln220_1_fu_1669_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_block_pp0_stage0 <= ap_const_boolean_0;
    ap_block_pp0_stage0_01001 <= ap_const_boolean_0;
    ap_block_pp0_stage0_11001 <= ap_const_boolean_0;
    ap_block_pp0_stage0_subdone <= ap_const_boolean_0;
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter30 <= (ap_const_logic_1 = ap_const_logic_0);
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_block_pp0_stage0_subdone, icmp_ln195_fu_458_p2, frp_pipeline_valid_U_valid_out)
    begin
        if (((frp_pipeline_valid_U_valid_out(1) = ap_const_logic_1) and ((icmp_ln195_fu_458_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_frp_pvb_no_bkwd_prs_assign_proc : process(pf_mapxRMat_data_U_pf_ready, pf_mapyRMat_data_U_pf_ready)
    begin
                ap_condition_frp_pvb_no_bkwd_prs <= ((pf_mapyRMat_data_U_pf_ready = ap_const_logic_1) and (pf_mapxRMat_data_U_pf_ready = ap_const_logic_1));
    end process;

        ap_condition_frp_pvb_no_fwd_prs <= (ap_const_boolean_1 = ap_const_boolean_1);

    ap_condition_frp_pvb_pf_start_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_start_int)
    begin
                ap_condition_frp_pvb_pf_start <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_1));
    end process;


    ap_done_int_frp_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter29_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter29_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int_frp <= ap_const_logic_1;
        else 
            ap_done_int_frp <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_enable_reg_pp0_iter1_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(1) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(10) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter10 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(11) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter11 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(12) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter12 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(13) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter13 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(14) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter14 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(15) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter15 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(16) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter16 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(17) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter17 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(18) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter18 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(19) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter19 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(2) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter2 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(20) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter20 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(21) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter21 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(22) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter22 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(23) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter23 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(24) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter24 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(25) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter25 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(26) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter26 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(27) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter27 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(28) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter28 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(29) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter29 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(3) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter3 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(30) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter30 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(4) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter4 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(5) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter5 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(6) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter6 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(7) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter7 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(8) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter8 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(9) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter9 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_frp_vld_in_assign_proc : process(ap_condition_frp_pvb_no_fwd_prs, ap_condition_frp_pvb_no_bkwd_prs, ap_condition_frp_pvb_pf_start)
    begin
        if (((ap_const_boolean_1 = ap_condition_frp_pvb_pf_start) and (ap_const_boolean_1 = ap_condition_frp_pvb_no_bkwd_prs) and (ap_const_boolean_1 = ap_condition_frp_pvb_no_fwd_prs))) then 
            ap_frp_vld_in <= ap_const_logic_1;
        else 
            ap_frp_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_block_pp0_stage0_subdone, frp_pipeline_valid_U_valid_out)
    begin
        if (((frp_pipeline_valid_U_valid_out(0) = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bit_select30_i_i1_fu_1523_p3 <= select_ln220_fu_1462_p3(to_integer(unsigned(add_ln220_1_fu_1517_p2)) downto to_integer(unsigned(add_ln220_1_fu_1517_p2))) when (to_integer(unsigned(add_ln220_1_fu_1517_p2)) >= 0 and to_integer(unsigned(add_ln220_1_fu_1517_p2)) <=16) else "-";
    bit_select30_i_i_fu_1445_p3 <= select_ln219_fu_1384_p3(to_integer(unsigned(add_ln219_1_fu_1439_p2)) downto to_integer(unsigned(add_ln219_1_fu_1439_p2))) when (to_integer(unsigned(add_ln219_1_fu_1439_p2)) >= 0 and to_integer(unsigned(add_ln219_1_fu_1439_p2)) <=16) else "-";

    frp_pipeline_valid_U_exitcond_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln195_fu_458_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln195_fu_458_p2 = ap_const_lv1_1))) then 
            frp_pipeline_valid_U_exitcond <= ap_const_logic_1;
        else 
            frp_pipeline_valid_U_exitcond <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_332_p1 <= zext_ln195_fu_531_p1(11 - 1 downto 0);
    grp_fu_336_p1 <= zext_ln112_fu_537_p1(11 - 1 downto 0);
    grp_fu_340_p1 <= zext_ln195_fu_531_p1(11 - 1 downto 0);
    grp_fu_344_p1 <= zext_ln112_fu_537_p1(11 - 1 downto 0);
    grp_fu_348_p1 <= zext_ln195_fu_531_p1(11 - 1 downto 0);
    grp_fu_352_p1 <= zext_ln112_fu_537_p1(11 - 1 downto 0);
    grp_fu_356_p1 <= sext_ln122_1_fu_580_p1(32 - 1 downto 0);
    grp_fu_360_p1 <= sext_ln122_1_fu_580_p1(32 - 1 downto 0);
    grp_fu_364_p0 <= sext_ln126_fu_609_p1(32 - 1 downto 0);
    grp_fu_364_p1 <= sext_ln126_fu_609_p1(32 - 1 downto 0);
    grp_fu_368_p0 <= sext_ln126_1_fu_614_p1(32 - 1 downto 0);
    grp_fu_368_p1 <= sext_ln126_1_fu_614_p1(32 - 1 downto 0);
    grp_fu_372_p1 <= sext_ln131_cast_reg_2057(32 - 1 downto 0);
    grp_fu_376_p1 <= sext_ln131_1_reg_2203_pp0_iter12_reg(32 - 1 downto 0);
    grp_fu_380_p1 <= sext_ln131_1_reg_2203_pp0_iter15_reg(32 - 1 downto 0);
    grp_fu_384_p0 <= sext_ln136_3_fu_811_p1(32 - 1 downto 0);
    grp_fu_384_p1 <= sext_ln126_reg_2162_pp0_iter18_reg(32 - 1 downto 0);
    grp_fu_388_p0 <= sext_ln136_4_fu_816_p1(32 - 1 downto 0);
    grp_fu_388_p1 <= sext_ln136_cast_reg_2051(32 - 1 downto 0);
    grp_fu_392_p0 <= sext_ln136_3_fu_811_p1(32 - 1 downto 0);
    grp_fu_392_p1 <= sext_ln126_1_reg_2169_pp0_iter18_reg(32 - 1 downto 0);
    grp_fu_396_p0 <= sext_ln136_4_fu_816_p1(32 - 1 downto 0);
    grp_fu_396_p1 <= sext_ln136_1_cast_reg_2045(32 - 1 downto 0);
    grp_fu_400_p1 <= sext_ln126_1_reg_2169_pp0_iter16_reg(32 - 1 downto 0);
    grp_fu_404_p1 <= sext_ln136_1_cast_reg_2045(32 - 1 downto 0);
    grp_fu_408_p1 <= sext_ln136_cast_reg_2051(32 - 1 downto 0);
    grp_fu_412_p1 <= sext_ln136_2_cast_reg_2040(32 - 1 downto 0);
    grp_fu_416_p1 <= sext_ln137_cast_reg_2035(32 - 1 downto 0);
    i_fu_475_p2 <= std_logic_vector(unsigned(i_6_fu_190) + unsigned(ap_const_lv16_1));
    icmp_ln136_1_fu_1025_p2 <= "1" when (tmp_10_fu_1015_p4 = ap_const_lv13_1FFF) else "0";
    icmp_ln136_2_fu_1031_p2 <= "1" when (tmp_10_fu_1015_p4 = ap_const_lv13_0) else "0";
    icmp_ln136_fu_1009_p2 <= "1" when (tmp_fu_999_p4 = ap_const_lv12_FFF) else "0";
    icmp_ln137_1_fu_1143_p2 <= "1" when (tmp_12_fu_1133_p4 = ap_const_lv13_1FFF) else "0";
    icmp_ln137_2_fu_1149_p2 <= "1" when (tmp_12_fu_1133_p4 = ap_const_lv13_0) else "0";
    icmp_ln137_fu_1127_p2 <= "1" when (tmp_11_fu_1117_p4 = ap_const_lv12_FFF) else "0";
    icmp_ln195_fu_458_p2 <= "1" when (indvar_flatten_fu_194 = mul_ln163) else "0";
    icmp_ln200_fu_481_p2 <= "1" when (j_fu_186 = cols) else "0";
    icmp_ln219_1_fu_1550_p2 <= "1" when (signed(tmp_297_fu_1540_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln219_2_fu_1570_p2 <= "0" when (and_ln219_2_fu_1565_p2 = ap_const_lv17_0) else "1";
    icmp_ln219_3_fu_1618_p2 <= "1" when (signed(add_ln219_fu_1535_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln219_fu_1379_p2 <= "1" when (u_reg_2444 = ap_const_lv17_0) else "0";
    icmp_ln220_1_fu_1669_p2 <= "1" when (signed(tmp_301_fu_1659_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln220_2_fu_1689_p2 <= "0" when (and_ln220_2_fu_1684_p2 = ap_const_lv17_0) else "1";
    icmp_ln220_3_fu_1737_p2 <= "1" when (signed(add_ln220_fu_1654_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln220_fu_1457_p2 <= "1" when (v_reg_2450 = ap_const_lv17_0) else "0";
    j_7_fu_510_p2 <= std_logic_vector(unsigned(select_ln195_fu_486_p3) + unsigned(ap_const_lv16_1));
    jfixed_fu_506_p1 <= select_ln195_fu_486_p3(11 - 1 downto 0);
    lshr_ln219_2_fu_1559_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv17_1FFFF),to_integer(unsigned('0' & zext_ln219_5_fu_1556_p1(17-1 downto 0)))));
    lshr_ln219_fu_1633_p2 <= std_logic_vector(shift_right(unsigned(zext_ln219_fu_1615_p1),to_integer(unsigned('0' & zext_ln219_1_fu_1629_p1(31-1 downto 0)))));
    lshr_ln220_2_fu_1678_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv17_1FFFF),to_integer(unsigned('0' & zext_ln220_5_fu_1675_p1(17-1 downto 0)))));
    lshr_ln220_fu_1752_p2 <= std_logic_vector(shift_right(unsigned(zext_ln220_fu_1734_p1),to_integer(unsigned('0' & zext_ln220_1_fu_1748_p1(31-1 downto 0)))));
    mapxRMat_data_blk_n <= ap_const_logic_1;
    mapxRMat_data_din <= pf_mapxRMat_data_U_data_out;

    mapxRMat_data_write_assign_proc : process(pf_mapxRMat_data_U_data_out_vld)
    begin
        if ((pf_mapxRMat_data_U_data_out_vld = ap_const_logic_1)) then 
            mapxRMat_data_write <= ap_const_logic_1;
        else 
            mapxRMat_data_write <= ap_const_logic_0;
        end if; 
    end process;

    mapyRMat_data_blk_n <= ap_const_logic_1;
    mapyRMat_data_din <= pf_mapyRMat_data_U_data_out;

    mapyRMat_data_write_assign_proc : process(pf_mapyRMat_data_U_data_out_vld)
    begin
        if ((pf_mapyRMat_data_U_data_out_vld = ap_const_logic_1)) then 
            mapyRMat_data_write <= ap_const_logic_1;
        else 
            mapyRMat_data_write <= ap_const_logic_0;
        end if; 
    end process;

    or_ln136_1_fu_1240_p2 <= (and_ln136_5_fu_1227_p2 or and_ln136_3_fu_1204_p2);
    or_ln136_2_fu_1215_p2 <= (and_ln136_4_fu_1210_p2 or and_ln136_2_fu_1184_p2);
    or_ln136_fu_1194_p2 <= (xor_ln136_1_fu_1188_p2 or tmp_289_reg_2368);
    or_ln137_1_fu_1338_p2 <= (and_ln137_5_fu_1325_p2 or and_ln137_3_fu_1302_p2);
    or_ln137_2_fu_1313_p2 <= (and_ln137_4_fu_1308_p2 or and_ln137_2_fu_1282_p2);
    or_ln137_fu_1292_p2 <= (xor_ln137_1_fu_1286_p2 or tmp_294_reg_2414);
    or_ln1_fu_1726_p3 <= (ap_const_lv1_0 & or_ln220_fu_1720_p2);
    or_ln219_fu_1601_p2 <= (and_ln219_fu_1576_p2 or and_ln219_1_fu_1596_p2);
    or_ln220_fu_1720_p2 <= (and_ln220_fu_1695_p2 or and_ln220_1_fu_1715_p2);
    or_ln_fu_1607_p3 <= (ap_const_lv1_0 & or_ln219_fu_1601_p2);
    p_x_fu_547_p2 <= std_logic_vector(unsigned(add_ln112_fu_543_p2) + unsigned(mul_ln112_reg_2090));
    p_y_fu_556_p2 <= std_logic_vector(unsigned(add_ln113_fu_552_p2) + unsigned(mul_ln113_reg_2100));
    pf_data_in_last <= ap_done_int_frp;

    pf_mapxRMat_data_U_data_in_vld_assign_proc : process(ap_enable_reg_pp0_iter30, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))) then 
            pf_mapxRMat_data_U_data_in_vld <= ap_const_logic_1;
        else 
            pf_mapxRMat_data_U_data_in_vld <= ap_const_logic_0;
        end if; 
    end process;


    pf_mapyRMat_data_U_data_in_vld_assign_proc : process(ap_enable_reg_pp0_iter30, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))) then 
            pf_mapyRMat_data_U_data_in_vld <= ap_const_logic_1;
        else 
            pf_mapyRMat_data_U_data_in_vld <= ap_const_logic_0;
        end if; 
    end process;

    pf_sync_continue <= (pf_all_done and ap_continue_int);
    pi_assign_1_fu_1916_p5 <= (zext_ln220_4_fu_1888_p1(63 downto 32) & tmp_7_fu_1909_p3 & zext_ln220_4_fu_1888_p1(22 downto 0));
    pi_assign_fu_1865_p5 <= (zext_ln219_4_fu_1837_p1(63 downto 32) & tmp_8_fu_1858_p3 & zext_ln219_4_fu_1837_p1(22 downto 0));
    select_ln136_1_fu_1178_p3 <= 
        and_ln136_1_fu_1173_p2 when (and_ln136_reg_2374(0) = '1') else 
        icmp_ln136_1_reg_2386;
    select_ln136_2_fu_1232_p3 <= 
        ap_const_lv17_FFFF when (and_ln136_3_fu_1204_p2(0) = '1') else 
        ap_const_lv17_10000;
    select_ln136_fu_1155_p3 <= 
        icmp_ln136_1_reg_2386 when (and_ln136_reg_2374(0) = '1') else 
        icmp_ln136_2_reg_2393;
    select_ln137_1_fu_1276_p3 <= 
        and_ln137_1_fu_1271_p2 when (and_ln137_reg_2420(0) = '1') else 
        icmp_ln137_1_reg_2432;
    select_ln137_2_fu_1330_p3 <= 
        ap_const_lv17_FFFF when (and_ln137_3_fu_1302_p2(0) = '1') else 
        ap_const_lv17_10000;
    select_ln137_fu_1253_p3 <= 
        icmp_ln137_1_reg_2432 when (and_ln137_reg_2420(0) = '1') else 
        icmp_ln137_2_reg_2439;
    select_ln195_1_fu_494_p3 <= 
        i_fu_475_p2 when (icmp_ln200_fu_481_p2(0) = '1') else 
        i_6_fu_190;
    select_ln195_fu_486_p3 <= 
        ap_const_lv16_0 when (icmp_ln200_fu_481_p2(0) = '1') else 
        j_fu_186;
    select_ln219_1_fu_1773_p3 <= 
        lshr_ln219_reg_2554 when (icmp_ln219_3_reg_2549(0) = '1') else 
        shl_ln219_reg_2559;
    select_ln219_2_fu_1840_p3 <= 
        ap_const_lv8_7F when (tmp_299_reg_2589(0) = '1') else 
        ap_const_lv8_7E;
    select_ln219_3_fu_1881_p3 <= 
        ap_const_lv32_0 when (icmp_ln219_reg_2478_pp0_iter28_reg(0) = '1') else 
        LD_fu_1877_p1;
    select_ln219_fu_1384_p3 <= 
        sub_ln219_reg_2462 when (tmp_296_reg_2456(0) = '1') else 
        u_reg_2444;
    select_ln220_1_fu_1805_p3 <= 
        lshr_ln220_reg_2574 when (icmp_ln220_3_reg_2569(0) = '1') else 
        shl_ln220_reg_2579;
    select_ln220_2_fu_1891_p3 <= 
        ap_const_lv8_7F when (tmp_303_reg_2599(0) = '1') else 
        ap_const_lv8_7E;
    select_ln220_3_fu_1932_p3 <= 
        ap_const_lv32_0 when (icmp_ln220_reg_2511_pp0_iter28_reg(0) = '1') else 
        LD_1_fu_1928_p1;
    select_ln220_fu_1462_p3 <= 
        sub_ln220_reg_2473 when (tmp_300_reg_2467(0) = '1') else 
        v_reg_2450;
        sext_ln122_1_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(winv_reg_2130),52));

        sext_ln126_1_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_reg_2157),52));

        sext_ln126_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_reg_2151),52));

        sext_ln131_1_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r2_reg_2197),52));

        sext_ln131_cast_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln131),52));

        sext_ln136_10_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln136_fu_867_p2),34));

        sext_ln136_11_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln136_2_reg_2240_pp0_iter20_reg),34));

        sext_ln136_13_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln136_1_fu_919_p3),65));

        sext_ln136_1_cast_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln136_1),52));

        sext_ln136_2_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln136_2),65));

        sext_ln136_3_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kr_reg_2285),52));

        sext_ln136_4_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_2xy_reg_2280),52));

        sext_ln136_5_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_reg_2302),33));

        sext_ln136_6_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln136_1_reg_2307),33));

        sext_ln136_7_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln3_fu_657_p3),34));

        sext_ln136_8_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r2_reg_2197),34));

        sext_ln136_cast_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln136),52));

        sext_ln137_1_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln4_fu_677_p3),34));

        sext_ln137_3_fu_886_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_reg_2312),33));

        sext_ln137_4_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln137_1_reg_2245_pp0_iter20_reg),33));

        sext_ln137_5_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln137_1_fu_892_p2),34));

        sext_ln137_6_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln137_2_reg_2317),34));

        sext_ln137_8_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln137_1_fu_1037_p3),65));

        sext_ln137_cast_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln137),65));

        sext_ln219_fu_1407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_1399_p3),32));

        sext_ln220_fu_1485_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_1477_p3),32));

    shl_ln131_1_fu_748_p3 <= (p_0_0_010314_reload & ap_const_lv20_0);
    shl_ln136_1_fu_919_p3 <= (p_0_0_010532_reload & ap_const_lv20_0);
    shl_ln137_1_fu_1037_p3 <= (p_0_0_010522_reload & ap_const_lv20_0);
    shl_ln219_fu_1648_p2 <= std_logic_vector(shift_left(unsigned(zext_ln219_fu_1615_p1),to_integer(unsigned('0' & zext_ln219_2_fu_1644_p1(31-1 downto 0)))));
    shl_ln220_fu_1767_p2 <= std_logic_vector(shift_left(unsigned(zext_ln220_fu_1734_p1),to_integer(unsigned('0' & zext_ln220_2_fu_1763_p1(31-1 downto 0)))));
    shl_ln2_fu_702_p3 <= (p_0_0_010312_reload & ap_const_lv20_0);
    shl_ln3_fu_657_p3 <= (tmp_13_reg_2187_pp0_iter9_reg & ap_const_lv1_0);
    shl_ln4_fu_677_p3 <= (tmp_14_reg_2192_pp0_iter9_reg & ap_const_lv1_0);
    shl_ln_fu_774_p3 <= (x_reg_2151_pp0_iter16_reg & ap_const_lv1_0);
    sub_ln120_fu_561_p2 <= std_logic_vector(unsigned(ap_const_lv32_200000) - unsigned(p_0_0_010442_reload));
    sub_ln219_1_fu_1419_p2 <= std_logic_vector(unsigned(ap_const_lv32_11) - unsigned(tmp_5_fu_1411_p3));
    sub_ln219_2_fu_1639_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln219_1_reg_2489));
    sub_ln219_3_fu_1847_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) - unsigned(trunc_ln219_2_reg_2506_pp0_iter28_reg));
    sub_ln219_4_fu_1433_p2 <= std_logic_vector(unsigned(ap_const_lv5_A) - unsigned(trunc_ln219_1_fu_1429_p1));
    sub_ln219_fu_1359_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(u_fu_1246_p3));
    sub_ln220_1_fu_1497_p2 <= std_logic_vector(unsigned(ap_const_lv32_11) - unsigned(tmp_1_fu_1489_p3));
    sub_ln220_2_fu_1758_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln220_1_reg_2522));
    sub_ln220_3_fu_1898_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) - unsigned(trunc_ln220_2_reg_2539_pp0_iter28_reg));
    sub_ln220_4_fu_1511_p2 <= std_logic_vector(unsigned(ap_const_lv5_A) - unsigned(trunc_ln220_1_fu_1507_p1));
    sub_ln220_fu_1373_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(v_fu_1344_p3));
    tmp_10_fu_1015_p4 <= add_ln136_3_fu_930_p2(64 downto 52);
    tmp_11_fu_1117_p4 <= add_ln137_3_fu_1048_p2(64 downto 53);
    tmp_12_fu_1133_p4 <= add_ln137_3_fu_1048_p2(64 downto 52);
    
    tmp_1_fu_1489_p3_proc : process(sext_ln220_fu_1485_p1)
    begin
        tmp_1_fu_1489_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln220_fu_1485_p1(i) = '1' then
                tmp_1_fu_1489_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_287_fu_953_p3 <= add_ln136_3_fu_930_p2(51 downto 51);
    tmp_288_fu_961_p3 <= add_ln136_3_fu_930_p2(34 downto 34);
    tmp_289_fu_979_p3 <= add_ln136_4_fu_973_p2(16 downto 16);
    tmp_290_fu_1160_p3 <= add_ln136_3_reg_2352(52 downto 52);
    tmp_292_fu_1071_p3 <= add_ln137_3_fu_1048_p2(51 downto 51);
    tmp_293_fu_1079_p3 <= add_ln137_3_fu_1048_p2(34 downto 34);
    tmp_294_fu_1097_p3 <= add_ln137_4_fu_1091_p2(16 downto 16);
    tmp_295_fu_1258_p3 <= add_ln137_3_reg_2398(52 downto 52);
    tmp_297_fu_1540_p4 <= add_ln219_fu_1535_p2(31 downto 1);
    tmp_298_fu_1582_p3 <= add_ln219_fu_1535_p2(31 downto 31);
    tmp_301_fu_1659_p4 <= add_ln220_fu_1654_p2(31 downto 1);
    tmp_302_fu_1701_p3 <= add_ln220_fu_1654_p2(31 downto 31);
    
    tmp_3_fu_1389_p4_proc : process(select_ln219_fu_1384_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable tmp_3_fu_1389_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_10(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := select_ln219_fu_1384_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(ap_const_lv32_10(5-1 downto 0)));
            for tmp_3_fu_1389_p4_i in 0 to 17-1 loop
                v0_cpy(tmp_3_fu_1389_p4_i) := select_ln219_fu_1384_p3(17-1-tmp_3_fu_1389_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(17-1 downto 0)))));
        res_mask := res_mask(17-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_3_fu_1389_p4 <= resvalue(17-1 downto 0);
    end process;

    tmp_4_fu_1399_p3 <= (ap_const_lv1_1 & tmp_3_fu_1389_p4);
    
    tmp_5_fu_1411_p3_proc : process(sext_ln219_fu_1407_p1)
    begin
        tmp_5_fu_1411_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln219_fu_1407_p1(i) = '1' then
                tmp_5_fu_1411_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_7_fu_1909_p3 <= (tmp_300_reg_2467_pp0_iter28_reg & add_ln220_4_fu_1903_p2);
    tmp_8_fu_1858_p3 <= (tmp_296_reg_2456_pp0_iter28_reg & add_ln219_4_fu_1852_p2);
    
    tmp_9_fu_1467_p4_proc : process(select_ln220_fu_1462_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable tmp_9_fu_1467_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_10(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := select_ln220_fu_1462_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(ap_const_lv32_10(5-1 downto 0)));
            for tmp_9_fu_1467_p4_i in 0 to 17-1 loop
                v0_cpy(tmp_9_fu_1467_p4_i) := select_ln220_fu_1462_p3(17-1-tmp_9_fu_1467_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(17-1 downto 0)))));
        res_mask := res_mask(17-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_9_fu_1467_p4 <= resvalue(17-1 downto 0);
    end process;

    tmp_fu_999_p4 <= add_ln136_3_fu_930_p2(64 downto 53);
    tmp_s_fu_1477_p3 <= (ap_const_lv1_1 & tmp_9_fu_1467_p4);
    trunc_ln136_3_fu_943_p4 <= add_ln136_3_fu_930_p2(51 downto 35);
    trunc_ln137_3_fu_1061_p4 <= add_ln137_3_fu_1048_p2(51 downto 35);
    trunc_ln195_fu_502_p1 <= select_ln195_1_fu_494_p3(11 - 1 downto 0);
    trunc_ln219_1_fu_1429_p1 <= sub_ln219_1_fu_1419_p2(5 - 1 downto 0);
    trunc_ln219_2_fu_1453_p1 <= tmp_5_fu_1411_p3(8 - 1 downto 0);
    trunc_ln219_fu_1425_p1 <= sub_ln219_1_fu_1419_p2(17 - 1 downto 0);
    trunc_ln220_1_fu_1507_p1 <= sub_ln220_1_fu_1497_p2(5 - 1 downto 0);
    trunc_ln220_2_fu_1531_p1 <= tmp_1_fu_1489_p3(8 - 1 downto 0);
    trunc_ln220_fu_1503_p1 <= sub_ln220_1_fu_1497_p2(17 - 1 downto 0);
    u_fu_1246_p3 <= 
        select_ln136_2_fu_1232_p3 when (or_ln136_1_fu_1240_p2(0) = '1') else 
        add_ln136_4_reg_2363;
    v_fu_1344_p3 <= 
        select_ln137_2_fu_1330_p3 when (or_ln137_1_fu_1338_p2(0) = '1') else 
        add_ln137_4_reg_2409;
    w_fu_566_p2 <= std_logic_vector(unsigned(sub_ln120_fu_561_p2) - unsigned(mul_ln120_reg_2110));
    winv_fu_571_p2 <= std_logic_vector(unsigned(w_fu_566_p2) - unsigned(mul_ln120_1_reg_2115));
    xor_ln136_1_fu_1188_p2 <= (select_ln136_fu_1155_p3 xor ap_const_lv1_1);
    xor_ln136_2_fu_1199_p2 <= (tmp_286_reg_2357 xor ap_const_lv1_1);
    xor_ln136_3_fu_1221_p2 <= (or_ln136_2_fu_1215_p2 xor ap_const_lv1_1);
    xor_ln136_4_fu_1167_p2 <= (tmp_290_fu_1160_p3 xor ap_const_lv1_1);
    xor_ln136_fu_987_p2 <= (tmp_289_fu_979_p3 xor ap_const_lv1_1);
    xor_ln137_1_fu_1286_p2 <= (select_ln137_fu_1253_p3 xor ap_const_lv1_1);
    xor_ln137_2_fu_1297_p2 <= (tmp_291_reg_2403 xor ap_const_lv1_1);
    xor_ln137_3_fu_1319_p2 <= (or_ln137_2_fu_1313_p2 xor ap_const_lv1_1);
    xor_ln137_4_fu_1265_p2 <= (tmp_295_fu_1258_p3 xor ap_const_lv1_1);
    xor_ln137_fu_1105_p2 <= (tmp_294_fu_1097_p3 xor ap_const_lv1_1);
    xor_ln219_fu_1590_p2 <= (tmp_298_fu_1582_p3 xor ap_const_lv1_1);
    xor_ln220_fu_1709_p2 <= (tmp_302_fu_1701_p3 xor ap_const_lv1_1);
    zext_ln112_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jfixed_reg_2071),32));
    zext_ln136_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_288_fu_961_p3),17));
    zext_ln137_fu_1087_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_293_fu_1079_p3),17));
    zext_ln195_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln195_reg_2066),32));
    zext_ln219_1_fu_1629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln219_2_fu_1624_p2),64));
    zext_ln219_2_fu_1644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln219_2_fu_1639_p2),64));
    zext_ln219_3_fu_1778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_2544),64));
    zext_ln219_4_fu_1837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln219_1_reg_2584),64));
    zext_ln219_5_fu_1556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln219_4_reg_2496),17));
    zext_ln219_fu_1615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln219_reg_2483),64));
    zext_ln220_1_fu_1748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln220_2_fu_1743_p2),64));
    zext_ln220_2_fu_1763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln220_2_fu_1758_p2),64));
    zext_ln220_3_fu_1810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1_reg_2564),64));
    zext_ln220_4_fu_1888_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln220_1_reg_2594),64));
    zext_ln220_5_fu_1675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln220_4_reg_2529),17));
    zext_ln220_fu_1734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln220_reg_2516),64));
end behav;
