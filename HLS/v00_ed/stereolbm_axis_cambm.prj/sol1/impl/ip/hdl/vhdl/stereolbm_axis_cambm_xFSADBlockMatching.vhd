-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stereolbm_axis_cambm_xFSADBlockMatching is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    left_clipped_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    left_clipped_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    left_clipped_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    left_clipped_empty_n : IN STD_LOGIC;
    left_clipped_read : OUT STD_LOGIC;
    right_clipped_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    right_clipped_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    right_clipped_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    right_clipped_empty_n : IN STD_LOGIC;
    right_clipped_read : OUT STD_LOGIC;
    p_disp_strm_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_disp_strm_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    p_disp_strm_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    p_disp_strm_full_n : IN STD_LOGIC;
    p_disp_strm_write : OUT STD_LOGIC;
    state_preFilterCap_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    state_preFilterCap_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    state_preFilterCap_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    state_preFilterCap_empty_n : IN STD_LOGIC;
    state_preFilterCap_read : OUT STD_LOGIC;
    state_textureThreshold_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    state_textureThreshold_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    state_textureThreshold_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    state_textureThreshold_empty_n : IN STD_LOGIC;
    state_textureThreshold_read : OUT STD_LOGIC;
    state_uniquenessRatio_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    state_uniquenessRatio_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    state_uniquenessRatio_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    state_uniquenessRatio_empty_n : IN STD_LOGIC;
    state_uniquenessRatio_read : OUT STD_LOGIC;
    height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    height_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    height_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    height_empty_n : IN STD_LOGIC;
    height_read : OUT STD_LOGIC;
    width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    width_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    width_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    width_empty_n : IN STD_LOGIC;
    width_read : OUT STD_LOGIC;
    height_c_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    height_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    height_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    height_c_full_n : IN STD_LOGIC;
    height_c_write : OUT STD_LOGIC;
    width_c_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    width_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    width_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    width_c_full_n : IN STD_LOGIC;
    width_c_write : OUT STD_LOGIC );
end;


architecture behav of stereolbm_axis_cambm_xFSADBlockMatching is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv17_E : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv17_7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000111";
    constant ap_const_lv17_1FFF9 : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal state_preFilterCap_blk_n : STD_LOGIC;
    signal state_textureThreshold_blk_n : STD_LOGIC;
    signal state_uniquenessRatio_blk_n : STD_LOGIC;
    signal height_blk_n : STD_LOGIC;
    signal width_blk_n : STD_LOGIC;
    signal height_c_blk_n : STD_LOGIC;
    signal width_c_blk_n : STD_LOGIC;
    signal state_uniquenessRatio_read_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal state_textureThreshold_read_reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_preFilterCap_read_reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_r_fu_128_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_r_reg_218 : STD_LOGIC_VECTOR (7 downto 0);
    signal height_cast_fu_132_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal height_cast_reg_223 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_fu_136_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_reg_229 : STD_LOGIC_VECTOR (16 downto 0);
    signal width_cast_fu_142_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal width_cast_reg_234 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub57_fu_146_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub57_reg_240 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_fu_152_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_2_reg_246 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bound4_fu_166_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal bound4_reg_251 : STD_LOGIC_VECTOR (36 downto 0);
    signal add103_fu_172_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add103_reg_256 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add111_fu_178_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add111_reg_261 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub233_fu_184_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub233_reg_266 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub246_fu_190_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub246_reg_271 : STD_LOGIC_VECTOR (16 downto 0);
    signal cmp288_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp288_reg_276 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_start : STD_LOGIC;
    signal grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_done : STD_LOGIC;
    signal grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_idle : STD_LOGIC;
    signal grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_ready : STD_LOGIC;
    signal grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_left_clipped_read : STD_LOGIC;
    signal grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_right_clipped_read : STD_LOGIC;
    signal grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_p_disp_strm_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_p_disp_strm_write : STD_LOGIC;
    signal grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal height_cast_fu_132_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal width_cast_fu_142_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound4_fu_166_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal bound4_fu_166_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal bound4_fu_166_p00 : STD_LOGIC_VECTOR (36 downto 0);
    signal bound4_fu_166_p10 : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component stereolbm_axis_cambm_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        left_clipped_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        left_clipped_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        left_clipped_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        left_clipped_empty_n : IN STD_LOGIC;
        left_clipped_read : OUT STD_LOGIC;
        right_clipped_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        right_clipped_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        right_clipped_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        right_clipped_empty_n : IN STD_LOGIC;
        right_clipped_read : OUT STD_LOGIC;
        p_disp_strm_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_disp_strm_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        p_disp_strm_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        p_disp_strm_full_n : IN STD_LOGIC;
        p_disp_strm_write : OUT STD_LOGIC;
        sub57 : IN STD_LOGIC_VECTOR (16 downto 0);
        bound4 : IN STD_LOGIC_VECTOR (36 downto 0);
        state_preFilterCap_load : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_r_3 : IN STD_LOGIC_VECTOR (7 downto 0);
        add111 : IN STD_LOGIC_VECTOR (16 downto 0);
        bound : IN STD_LOGIC_VECTOR (19 downto 0);
        add103 : IN STD_LOGIC_VECTOR (16 downto 0);
        sub233 : IN STD_LOGIC_VECTOR (16 downto 0);
        state_textureThreshold_load : IN STD_LOGIC_VECTOR (31 downto 0);
        sub246 : IN STD_LOGIC_VECTOR (16 downto 0);
        state_uniquenessRatio_load : IN STD_LOGIC_VECTOR (31 downto 0);
        cmp288 : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component stereolbm_axis_cambm_mul_17ns_20ns_37_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (36 downto 0) );
    end component;



begin
    grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106 : component stereolbm_axis_cambm_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_start,
        ap_done => grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_done,
        ap_idle => grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_idle,
        ap_ready => grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_ready,
        left_clipped_dout => left_clipped_dout,
        left_clipped_num_data_valid => ap_const_lv2_0,
        left_clipped_fifo_cap => ap_const_lv2_0,
        left_clipped_empty_n => left_clipped_empty_n,
        left_clipped_read => grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_left_clipped_read,
        right_clipped_dout => right_clipped_dout,
        right_clipped_num_data_valid => ap_const_lv2_0,
        right_clipped_fifo_cap => ap_const_lv2_0,
        right_clipped_empty_n => right_clipped_empty_n,
        right_clipped_read => grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_right_clipped_read,
        p_disp_strm_din => grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_p_disp_strm_din,
        p_disp_strm_num_data_valid => ap_const_lv2_0,
        p_disp_strm_fifo_cap => ap_const_lv2_0,
        p_disp_strm_full_n => p_disp_strm_full_n,
        p_disp_strm_write => grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_p_disp_strm_write,
        sub57 => sub57_reg_240,
        bound4 => bound4_reg_251,
        state_preFilterCap_load => state_preFilterCap_read_reg_213,
        tmp_r_3 => tmp_r_reg_218,
        add111 => add111_reg_261,
        bound => tmp_2_reg_246,
        add103 => add103_reg_256,
        sub233 => sub233_reg_266,
        state_textureThreshold_load => state_textureThreshold_read_reg_208,
        sub246 => sub246_reg_271,
        state_uniquenessRatio_load => state_uniquenessRatio_read_reg_202,
        cmp288 => cmp288_reg_276);

    mul_17ns_20ns_37_1_1_U504 : component stereolbm_axis_cambm_mul_17ns_20ns_37_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 20,
        dout_WIDTH => 37)
    port map (
        din0 => bound4_fu_166_p0,
        din1 => bound4_fu_166_p1,
        dout => bound4_fu_166_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_ready = ap_const_logic_1)) then 
                    grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add103_reg_256 <= add103_fu_172_p2;
                add111_reg_261 <= add111_fu_178_p2;
                cmp288_reg_276 <= cmp288_fu_196_p2;
                sub233_reg_266 <= sub233_fu_184_p2;
                sub246_reg_271 <= sub246_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bound4_reg_251 <= bound4_fu_166_p2;
                    tmp_2_reg_246(19 downto 3) <= tmp_2_fu_152_p3(19 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((width_c_full_n = ap_const_logic_0) or (height_c_full_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (state_uniquenessRatio_empty_n = ap_const_logic_0) or (state_textureThreshold_empty_n = ap_const_logic_0) or (state_preFilterCap_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                height_cast_reg_223 <= height_cast_fu_132_p1;
                state_preFilterCap_read_reg_213 <= state_preFilterCap_dout;
                state_textureThreshold_read_reg_208 <= state_textureThreshold_dout;
                state_uniquenessRatio_read_reg_202 <= state_uniquenessRatio_dout;
                sub57_reg_240 <= sub57_fu_146_p2;
                sub_reg_229 <= sub_fu_136_p2;
                tmp_r_reg_218 <= tmp_r_fu_128_p1;
                width_cast_reg_234 <= width_cast_fu_142_p1;
            end if;
        end if;
    end process;
    tmp_2_reg_246(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, state_preFilterCap_empty_n, state_textureThreshold_empty_n, state_uniquenessRatio_empty_n, height_empty_n, width_empty_n, height_c_full_n, width_c_full_n, grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((width_c_full_n = ap_const_logic_0) or (height_c_full_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (state_uniquenessRatio_empty_n = ap_const_logic_0) or (state_textureThreshold_empty_n = ap_const_logic_0) or (state_preFilterCap_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add103_fu_172_p2 <= std_logic_vector(signed(height_cast_reg_223) + signed(ap_const_lv17_7));
    add111_fu_178_p2 <= std_logic_vector(signed(width_cast_reg_234) + signed(ap_const_lv17_7));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, state_preFilterCap_empty_n, state_textureThreshold_empty_n, state_uniquenessRatio_empty_n, height_empty_n, width_empty_n, height_c_full_n, width_c_full_n)
    begin
        if (((width_c_full_n = ap_const_logic_0) or (height_c_full_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (state_uniquenessRatio_empty_n = ap_const_logic_0) or (state_textureThreshold_empty_n = ap_const_logic_0) or (state_preFilterCap_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_done)
    begin
        if ((grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, state_preFilterCap_empty_n, state_textureThreshold_empty_n, state_uniquenessRatio_empty_n, height_empty_n, width_empty_n, height_c_full_n, width_c_full_n)
    begin
                ap_block_state1 <= ((width_c_full_n = ap_const_logic_0) or (height_c_full_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (state_uniquenessRatio_empty_n = ap_const_logic_0) or (state_textureThreshold_empty_n = ap_const_logic_0) or (state_preFilterCap_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_done, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound4_fu_166_p0 <= bound4_fu_166_p00(17 - 1 downto 0);
    bound4_fu_166_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_reg_229),37));
    bound4_fu_166_p1 <= bound4_fu_166_p10(20 - 1 downto 0);
    bound4_fu_166_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_152_p3),37));
    cmp288_fu_196_p2 <= "1" when (signed(state_uniquenessRatio_read_reg_202) > signed(ap_const_lv32_0)) else "0";
    grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_start <= grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_start_reg;

    height_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_blk_n <= height_empty_n;
        else 
            height_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    height_c_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, height_c_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_c_blk_n <= height_c_full_n;
        else 
            height_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    height_c_din <= height_dout;

    height_c_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, state_preFilterCap_empty_n, state_textureThreshold_empty_n, state_uniquenessRatio_empty_n, height_empty_n, width_empty_n, height_c_full_n, width_c_full_n)
    begin
        if ((not(((width_c_full_n = ap_const_logic_0) or (height_c_full_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (state_uniquenessRatio_empty_n = ap_const_logic_0) or (state_textureThreshold_empty_n = ap_const_logic_0) or (state_preFilterCap_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_c_write <= ap_const_logic_1;
        else 
            height_c_write <= ap_const_logic_0;
        end if; 
    end process;

    height_cast_fu_132_p0 <= height_dout;
        height_cast_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(height_cast_fu_132_p0),17));


    height_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, state_preFilterCap_empty_n, state_textureThreshold_empty_n, state_uniquenessRatio_empty_n, height_empty_n, width_empty_n, height_c_full_n, width_c_full_n)
    begin
        if ((not(((width_c_full_n = ap_const_logic_0) or (height_c_full_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (state_uniquenessRatio_empty_n = ap_const_logic_0) or (state_textureThreshold_empty_n = ap_const_logic_0) or (state_preFilterCap_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_read <= ap_const_logic_1;
        else 
            height_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_done, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_ap_done = ap_const_logic_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    left_clipped_read_assign_proc : process(grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_left_clipped_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            left_clipped_read <= grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_left_clipped_read;
        else 
            left_clipped_read <= ap_const_logic_0;
        end if; 
    end process;

    p_disp_strm_din <= grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_p_disp_strm_din;

    p_disp_strm_write_assign_proc : process(grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_p_disp_strm_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_disp_strm_write <= grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_p_disp_strm_write;
        else 
            p_disp_strm_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    right_clipped_read_assign_proc : process(grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_right_clipped_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            right_clipped_read <= grp_xFSADBlockMatching_Pipeline_loop_row_loop_mux_loop_col_fu_106_right_clipped_read;
        else 
            right_clipped_read <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    state_preFilterCap_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, state_preFilterCap_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            state_preFilterCap_blk_n <= state_preFilterCap_empty_n;
        else 
            state_preFilterCap_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    state_preFilterCap_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, state_preFilterCap_empty_n, state_textureThreshold_empty_n, state_uniquenessRatio_empty_n, height_empty_n, width_empty_n, height_c_full_n, width_c_full_n)
    begin
        if ((not(((width_c_full_n = ap_const_logic_0) or (height_c_full_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (state_uniquenessRatio_empty_n = ap_const_logic_0) or (state_textureThreshold_empty_n = ap_const_logic_0) or (state_preFilterCap_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            state_preFilterCap_read <= ap_const_logic_1;
        else 
            state_preFilterCap_read <= ap_const_logic_0;
        end if; 
    end process;


    state_textureThreshold_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, state_textureThreshold_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            state_textureThreshold_blk_n <= state_textureThreshold_empty_n;
        else 
            state_textureThreshold_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    state_textureThreshold_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, state_preFilterCap_empty_n, state_textureThreshold_empty_n, state_uniquenessRatio_empty_n, height_empty_n, width_empty_n, height_c_full_n, width_c_full_n)
    begin
        if ((not(((width_c_full_n = ap_const_logic_0) or (height_c_full_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (state_uniquenessRatio_empty_n = ap_const_logic_0) or (state_textureThreshold_empty_n = ap_const_logic_0) or (state_preFilterCap_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            state_textureThreshold_read <= ap_const_logic_1;
        else 
            state_textureThreshold_read <= ap_const_logic_0;
        end if; 
    end process;


    state_uniquenessRatio_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, state_uniquenessRatio_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            state_uniquenessRatio_blk_n <= state_uniquenessRatio_empty_n;
        else 
            state_uniquenessRatio_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    state_uniquenessRatio_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, state_preFilterCap_empty_n, state_textureThreshold_empty_n, state_uniquenessRatio_empty_n, height_empty_n, width_empty_n, height_c_full_n, width_c_full_n)
    begin
        if ((not(((width_c_full_n = ap_const_logic_0) or (height_c_full_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (state_uniquenessRatio_empty_n = ap_const_logic_0) or (state_textureThreshold_empty_n = ap_const_logic_0) or (state_preFilterCap_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            state_uniquenessRatio_read <= ap_const_logic_1;
        else 
            state_uniquenessRatio_read <= ap_const_logic_0;
        end if; 
    end process;

    sub233_fu_184_p2 <= std_logic_vector(signed(height_cast_reg_223) + signed(ap_const_lv17_1FFF9));
    sub246_fu_190_p2 <= std_logic_vector(signed(width_cast_reg_234) + signed(ap_const_lv17_1FFF9));
    sub57_fu_146_p2 <= std_logic_vector(signed(width_cast_fu_142_p1) + signed(ap_const_lv17_E));
    sub_fu_136_p2 <= std_logic_vector(signed(height_cast_fu_132_p1) + signed(ap_const_lv17_E));
    tmp_2_fu_152_p3 <= (sub57_reg_240 & ap_const_lv3_0);
    tmp_r_fu_128_p1 <= state_preFilterCap_dout(8 - 1 downto 0);

    width_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            width_blk_n <= width_empty_n;
        else 
            width_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    width_c_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, width_c_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            width_c_blk_n <= width_c_full_n;
        else 
            width_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    width_c_din <= width_dout;

    width_c_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, state_preFilterCap_empty_n, state_textureThreshold_empty_n, state_uniquenessRatio_empty_n, height_empty_n, width_empty_n, height_c_full_n, width_c_full_n)
    begin
        if ((not(((width_c_full_n = ap_const_logic_0) or (height_c_full_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (state_uniquenessRatio_empty_n = ap_const_logic_0) or (state_textureThreshold_empty_n = ap_const_logic_0) or (state_preFilterCap_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            width_c_write <= ap_const_logic_1;
        else 
            width_c_write <= ap_const_logic_0;
        end if; 
    end process;

    width_cast_fu_142_p0 <= width_dout;
        width_cast_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(width_cast_fu_142_p0),17));


    width_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, state_preFilterCap_empty_n, state_textureThreshold_empty_n, state_uniquenessRatio_empty_n, height_empty_n, width_empty_n, height_c_full_n, width_c_full_n)
    begin
        if ((not(((width_c_full_n = ap_const_logic_0) or (height_c_full_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (state_uniquenessRatio_empty_n = ap_const_logic_0) or (state_textureThreshold_empty_n = ap_const_logic_0) or (state_preFilterCap_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            width_read <= ap_const_logic_1;
        else 
            width_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
