-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stereolbm_axis_cambm_xFInitUndistortRectifyMapInverseKernel_Pipeline_VITIS_LOOP_171_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cameraMatrix_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    cameraMatrix_ce0 : OUT STD_LOGIC;
    cameraMatrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ir_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ir_ce0 : OUT STD_LOGIC;
    ir_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010442_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010442_out_ap_vld : OUT STD_LOGIC;
    p_0_0_010440_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010440_out_ap_vld : OUT STD_LOGIC;
    p_0_0_010538_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010538_out_ap_vld : OUT STD_LOGIC;
    p_0_0_010436_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010436_out_ap_vld : OUT STD_LOGIC;
    p_0_0_010434_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010434_out_ap_vld : OUT STD_LOGIC;
    p_0_0_010532_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010532_out_ap_vld : OUT STD_LOGIC;
    p_0_0_010430_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010430_out_ap_vld : OUT STD_LOGIC;
    p_0_0_010428_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010428_out_ap_vld : OUT STD_LOGIC;
    p_0_0_010526_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010526_out_ap_vld : OUT STD_LOGIC;
    p_0_0_010424_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010424_out_ap_vld : OUT STD_LOGIC;
    p_0_0_010522_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010522_out_ap_vld : OUT STD_LOGIC;
    p_0_0_010420_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010420_out_ap_vld : OUT STD_LOGIC;
    p_0_0_010418_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_0_0_010418_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of stereolbm_axis_cambm_xFInitUndistortRectifyMapInverseKernel_Pipeline_VITIS_LOOP_171_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln171_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_10_reg_474 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln171_fu_261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_68 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln171_fu_255_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_10 : STD_LOGIC_VECTOR (3 downto 0);
    signal iRnewCameraMatrixHLS_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal iRnewCameraMatrixHLS_1_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal cameraMatrixHLS_1_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal iRnewCameraMatrixHLS_2_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal cameraMatrixHLS_2_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal iRnewCameraMatrixHLS_3_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal iRnewCameraMatrixHLS_4_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal cameraMatrixHLS_3_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal iRnewCameraMatrixHLS_5_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal iRnewCameraMatrixHLS_6_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal cameraMatrixHLS_4_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal iRnewCameraMatrixHLS_7_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal iRnewCameraMatrixHLS_8_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component stereolbm_axis_cambm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component stereolbm_axis_cambm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln171_fu_249_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_68 <= add_ln171_fu_255_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_68 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_10_reg_474 = ap_const_lv4_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cameraMatrixHLS_1_fu_80 <= cameraMatrix_q0;
                iRnewCameraMatrixHLS_2_fu_84 <= ir_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_10_reg_474 = ap_const_lv4_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cameraMatrixHLS_2_fu_88 <= cameraMatrix_q0;
                iRnewCameraMatrixHLS_3_fu_92 <= ir_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_10_reg_474 = ap_const_lv4_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cameraMatrixHLS_3_fu_100 <= cameraMatrix_q0;
                iRnewCameraMatrixHLS_5_fu_104 <= ir_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_10_reg_474 = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cameraMatrixHLS_4_fu_112 <= cameraMatrix_q0;
                iRnewCameraMatrixHLS_7_fu_116 <= ir_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_10_reg_474 = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                iRnewCameraMatrixHLS_1_fu_76 <= ir_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_10_reg_474 = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                iRnewCameraMatrixHLS_4_fu_96 <= ir_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_10_reg_474 = ap_const_lv4_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                iRnewCameraMatrixHLS_6_fu_108 <= ir_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_10_reg_474 = ap_const_lv4_0)) and not((i_10_reg_474 = ap_const_lv4_1)) and not((i_10_reg_474 = ap_const_lv4_2)) and not((i_10_reg_474 = ap_const_lv4_3)) and not((i_10_reg_474 = ap_const_lv4_4)) and not((i_10_reg_474 = ap_const_lv4_5)) and not((i_10_reg_474 = ap_const_lv4_6)) and not((i_10_reg_474 = ap_const_lv4_7)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                iRnewCameraMatrixHLS_8_fu_120 <= ir_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_10_reg_474 = ap_const_lv4_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                iRnewCameraMatrixHLS_fu_72 <= ir_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_10_reg_474 <= ap_sig_allocacmp_i_10;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln171_fu_255_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_10) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln171_fu_249_p2)
    begin
        if (((icmp_ln171_fu_249_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_10_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_68, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_10 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_10 <= i_fu_68;
        end if; 
    end process;

    cameraMatrix_address0 <= zext_ln171_fu_261_p1(4 - 1 downto 0);

    cameraMatrix_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cameraMatrix_ce0 <= ap_const_logic_1;
        else 
            cameraMatrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln171_fu_249_p2 <= "1" when (ap_sig_allocacmp_i_10 = ap_const_lv4_9) else "0";
    ir_address0 <= zext_ln171_fu_261_p1(4 - 1 downto 0);

    ir_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ir_ce0 <= ap_const_logic_1;
        else 
            ir_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_0_0_010418_out <= iRnewCameraMatrixHLS_fu_72;

    p_0_0_010418_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln171_fu_249_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln171_fu_249_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_0_0_010418_out_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_010418_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_0_0_010420_out <= iRnewCameraMatrixHLS_1_fu_76;

    p_0_0_010420_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln171_fu_249_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln171_fu_249_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_0_0_010420_out_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_010420_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_0_0_010424_out <= iRnewCameraMatrixHLS_2_fu_84;

    p_0_0_010424_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln171_fu_249_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln171_fu_249_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_0_0_010424_out_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_010424_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_0_0_010428_out <= iRnewCameraMatrixHLS_3_fu_92;

    p_0_0_010428_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln171_fu_249_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln171_fu_249_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_0_0_010428_out_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_010428_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_0_0_010430_out <= iRnewCameraMatrixHLS_4_fu_96;

    p_0_0_010430_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln171_fu_249_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln171_fu_249_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_0_0_010430_out_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_010430_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_0_0_010434_out <= iRnewCameraMatrixHLS_5_fu_104;

    p_0_0_010434_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln171_fu_249_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln171_fu_249_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_0_0_010434_out_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_010434_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_0_0_010436_out <= iRnewCameraMatrixHLS_6_fu_108;

    p_0_0_010436_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln171_fu_249_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln171_fu_249_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_0_0_010436_out_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_010436_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_0_0_010440_out <= iRnewCameraMatrixHLS_7_fu_116;

    p_0_0_010440_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln171_fu_249_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln171_fu_249_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_0_0_010440_out_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_010440_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_0_0_010442_out <= iRnewCameraMatrixHLS_8_fu_120;

    p_0_0_010442_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln171_fu_249_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln171_fu_249_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_0_0_010442_out_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_010442_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_0_0_010522_out <= cameraMatrixHLS_1_fu_80;

    p_0_0_010522_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln171_fu_249_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln171_fu_249_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_0_0_010522_out_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_010522_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_0_0_010526_out <= cameraMatrixHLS_2_fu_88;

    p_0_0_010526_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln171_fu_249_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln171_fu_249_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_0_0_010526_out_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_010526_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_0_0_010532_out <= cameraMatrixHLS_3_fu_100;

    p_0_0_010532_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln171_fu_249_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln171_fu_249_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_0_0_010532_out_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_010532_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_0_0_010538_out <= cameraMatrixHLS_4_fu_112;

    p_0_0_010538_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln171_fu_249_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln171_fu_249_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_0_0_010538_out_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_010538_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln171_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_10),64));
end behav;
