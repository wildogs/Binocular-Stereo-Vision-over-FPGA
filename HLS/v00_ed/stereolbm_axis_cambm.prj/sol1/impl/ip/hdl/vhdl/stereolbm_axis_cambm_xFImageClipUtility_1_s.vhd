-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stereolbm_axis_cambm_xFImageClipUtility_1_s is
port (
    ap_ready : OUT STD_LOGIC;
    i : IN STD_LOGIC_VECTOR (14 downto 0);
    j : IN STD_LOGIC_VECTOR (14 downto 0);
    height : IN STD_LOGIC_VECTOR (15 downto 0);
    width : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of stereolbm_axis_cambm_xFImageClipUtility_1_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv17_1FFFE : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal sext_ln598_1_fu_62_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln602_fu_72_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln598_1_fu_58_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln598_fu_54_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln603_fu_90_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln598_fu_50_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln602_fu_66_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln602_1_fu_78_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln602_2_fu_84_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_96_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln602_1_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln602_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln602_2_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);


begin



    add_ln602_fu_72_p2 <= std_logic_vector(signed(sext_ln598_1_fu_62_p1) + signed(ap_const_lv17_1FFFE));
    add_ln603_fu_90_p2 <= std_logic_vector(signed(sext_ln598_fu_54_p1) + signed(ap_const_lv17_1FFFE));
    ap_ready <= ap_const_logic_1;
    ap_return <= 
        ap_const_lv16_0 when (or_ln602_2_fu_114_p2(0) = '1') else 
        p_read;
    icmp_ln602_1_fu_78_p2 <= "1" when (signed(add_ln602_fu_72_p2) < signed(zext_ln598_1_fu_58_p1)) else "0";
    icmp_ln602_2_fu_84_p2 <= "1" when (j = ap_const_lv15_0) else "0";
    icmp_ln602_fu_66_p2 <= "1" when (i = ap_const_lv15_0) else "0";
    icmp_ln603_fu_96_p2 <= "1" when (signed(add_ln603_fu_90_p2) < signed(zext_ln598_fu_50_p1)) else "0";
    or_ln602_1_fu_108_p2 <= (icmp_ln603_fu_96_p2 or icmp_ln602_2_fu_84_p2);
    or_ln602_2_fu_114_p2 <= (or_ln602_fu_102_p2 or or_ln602_1_fu_108_p2);
    or_ln602_fu_102_p2 <= (icmp_ln602_fu_66_p2 or icmp_ln602_1_fu_78_p2);
        sext_ln598_1_fu_62_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(height),17));

        sext_ln598_fu_54_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(width),17));

    zext_ln598_1_fu_58_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i),17));
    zext_ln598_fu_50_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j),17));
end behav;
