// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module stereolbm_axis_cambm_xFInitUndistortRectifyMapInverseKernel_Pipeline_VITIS_LOOP_171_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cameraMatrix_address0,
        cameraMatrix_ce0,
        cameraMatrix_q0,
        ir_address0,
        ir_ce0,
        ir_q0,
        p_0_0_010442_out,
        p_0_0_010442_out_ap_vld,
        p_0_0_010440_out,
        p_0_0_010440_out_ap_vld,
        p_0_0_010538_out,
        p_0_0_010538_out_ap_vld,
        p_0_0_010436_out,
        p_0_0_010436_out_ap_vld,
        p_0_0_010434_out,
        p_0_0_010434_out_ap_vld,
        p_0_0_010532_out,
        p_0_0_010532_out_ap_vld,
        p_0_0_010430_out,
        p_0_0_010430_out_ap_vld,
        p_0_0_010428_out,
        p_0_0_010428_out_ap_vld,
        p_0_0_010526_out,
        p_0_0_010526_out_ap_vld,
        p_0_0_010424_out,
        p_0_0_010424_out_ap_vld,
        p_0_0_010522_out,
        p_0_0_010522_out_ap_vld,
        p_0_0_010420_out,
        p_0_0_010420_out_ap_vld,
        p_0_0_010418_out,
        p_0_0_010418_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] cameraMatrix_address0;
output   cameraMatrix_ce0;
input  [31:0] cameraMatrix_q0;
output  [3:0] ir_address0;
output   ir_ce0;
input  [31:0] ir_q0;
output  [31:0] p_0_0_010442_out;
output   p_0_0_010442_out_ap_vld;
output  [31:0] p_0_0_010440_out;
output   p_0_0_010440_out_ap_vld;
output  [31:0] p_0_0_010538_out;
output   p_0_0_010538_out_ap_vld;
output  [31:0] p_0_0_010436_out;
output   p_0_0_010436_out_ap_vld;
output  [31:0] p_0_0_010434_out;
output   p_0_0_010434_out_ap_vld;
output  [31:0] p_0_0_010532_out;
output   p_0_0_010532_out_ap_vld;
output  [31:0] p_0_0_010430_out;
output   p_0_0_010430_out_ap_vld;
output  [31:0] p_0_0_010428_out;
output   p_0_0_010428_out_ap_vld;
output  [31:0] p_0_0_010526_out;
output   p_0_0_010526_out_ap_vld;
output  [31:0] p_0_0_010424_out;
output   p_0_0_010424_out_ap_vld;
output  [31:0] p_0_0_010522_out;
output   p_0_0_010522_out_ap_vld;
output  [31:0] p_0_0_010420_out;
output   p_0_0_010420_out_ap_vld;
output  [31:0] p_0_0_010418_out;
output   p_0_0_010418_out_ap_vld;

reg ap_idle;
reg cameraMatrix_ce0;
reg ir_ce0;
reg p_0_0_010442_out_ap_vld;
reg p_0_0_010440_out_ap_vld;
reg p_0_0_010538_out_ap_vld;
reg p_0_0_010436_out_ap_vld;
reg p_0_0_010434_out_ap_vld;
reg p_0_0_010532_out_ap_vld;
reg p_0_0_010430_out_ap_vld;
reg p_0_0_010428_out_ap_vld;
reg p_0_0_010526_out_ap_vld;
reg p_0_0_010424_out_ap_vld;
reg p_0_0_010522_out_ap_vld;
reg p_0_0_010420_out_ap_vld;
reg p_0_0_010418_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln171_fu_249_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [3:0] i_10_reg_474;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln171_fu_261_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] i_fu_68;
wire   [3:0] add_ln171_fu_255_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_10;
reg   [31:0] iRnewCameraMatrixHLS_fu_72;
reg   [31:0] iRnewCameraMatrixHLS_1_fu_76;
reg   [31:0] cameraMatrixHLS_1_fu_80;
reg   [31:0] iRnewCameraMatrixHLS_2_fu_84;
reg   [31:0] cameraMatrixHLS_2_fu_88;
reg   [31:0] iRnewCameraMatrixHLS_3_fu_92;
reg   [31:0] iRnewCameraMatrixHLS_4_fu_96;
reg   [31:0] cameraMatrixHLS_3_fu_100;
reg   [31:0] iRnewCameraMatrixHLS_5_fu_104;
reg   [31:0] iRnewCameraMatrixHLS_6_fu_108;
reg   [31:0] cameraMatrixHLS_4_fu_112;
reg   [31:0] iRnewCameraMatrixHLS_7_fu_116;
reg   [31:0] iRnewCameraMatrixHLS_8_fu_120;
wire    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

stereolbm_axis_cambm_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln171_fu_249_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_68 <= add_ln171_fu_255_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_68 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((i_10_reg_474 == 4'd5) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cameraMatrixHLS_1_fu_80 <= cameraMatrix_q0;
        iRnewCameraMatrixHLS_2_fu_84 <= ir_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((i_10_reg_474 == 4'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cameraMatrixHLS_2_fu_88 <= cameraMatrix_q0;
        iRnewCameraMatrixHLS_3_fu_92 <= ir_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((i_10_reg_474 == 4'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cameraMatrixHLS_3_fu_100 <= cameraMatrix_q0;
        iRnewCameraMatrixHLS_5_fu_104 <= ir_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((i_10_reg_474 == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cameraMatrixHLS_4_fu_112 <= cameraMatrix_q0;
        iRnewCameraMatrixHLS_7_fu_116 <= ir_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((i_10_reg_474 == 4'd6) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iRnewCameraMatrixHLS_1_fu_76 <= ir_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((i_10_reg_474 == 4'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iRnewCameraMatrixHLS_4_fu_96 <= ir_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((i_10_reg_474 == 4'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iRnewCameraMatrixHLS_6_fu_108 <= ir_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_10_reg_474 == 4'd0) & ~(i_10_reg_474 == 4'd1) & ~(i_10_reg_474 == 4'd2) & ~(i_10_reg_474 == 4'd3) & ~(i_10_reg_474 == 4'd4) & ~(i_10_reg_474 == 4'd5) & ~(i_10_reg_474 == 4'd6) & ~(i_10_reg_474 == 4'd7) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iRnewCameraMatrixHLS_8_fu_120 <= ir_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((i_10_reg_474 == 4'd7) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iRnewCameraMatrixHLS_fu_72 <= ir_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_10_reg_474 <= ap_sig_allocacmp_i_10;
    end
end

always @ (*) begin
    if (((icmp_ln171_fu_249_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_10 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_10 = i_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cameraMatrix_ce0 = 1'b1;
    end else begin
        cameraMatrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ir_ce0 = 1'b1;
    end else begin
        ir_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln171_fu_249_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_010418_out_ap_vld = 1'b1;
    end else begin
        p_0_0_010418_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln171_fu_249_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_010420_out_ap_vld = 1'b1;
    end else begin
        p_0_0_010420_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln171_fu_249_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_010424_out_ap_vld = 1'b1;
    end else begin
        p_0_0_010424_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln171_fu_249_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_010428_out_ap_vld = 1'b1;
    end else begin
        p_0_0_010428_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln171_fu_249_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_010430_out_ap_vld = 1'b1;
    end else begin
        p_0_0_010430_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln171_fu_249_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_010434_out_ap_vld = 1'b1;
    end else begin
        p_0_0_010434_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln171_fu_249_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_010436_out_ap_vld = 1'b1;
    end else begin
        p_0_0_010436_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln171_fu_249_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_010440_out_ap_vld = 1'b1;
    end else begin
        p_0_0_010440_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln171_fu_249_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_010442_out_ap_vld = 1'b1;
    end else begin
        p_0_0_010442_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln171_fu_249_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_010522_out_ap_vld = 1'b1;
    end else begin
        p_0_0_010522_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln171_fu_249_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_010526_out_ap_vld = 1'b1;
    end else begin
        p_0_0_010526_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln171_fu_249_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_010532_out_ap_vld = 1'b1;
    end else begin
        p_0_0_010532_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln171_fu_249_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_0_010538_out_ap_vld = 1'b1;
    end else begin
        p_0_0_010538_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln171_fu_255_p2 = (ap_sig_allocacmp_i_10 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign cameraMatrix_address0 = zext_ln171_fu_261_p1;

assign icmp_ln171_fu_249_p2 = ((ap_sig_allocacmp_i_10 == 4'd9) ? 1'b1 : 1'b0);

assign ir_address0 = zext_ln171_fu_261_p1;

assign p_0_0_010418_out = iRnewCameraMatrixHLS_fu_72;

assign p_0_0_010420_out = iRnewCameraMatrixHLS_1_fu_76;

assign p_0_0_010424_out = iRnewCameraMatrixHLS_2_fu_84;

assign p_0_0_010428_out = iRnewCameraMatrixHLS_3_fu_92;

assign p_0_0_010430_out = iRnewCameraMatrixHLS_4_fu_96;

assign p_0_0_010434_out = iRnewCameraMatrixHLS_5_fu_104;

assign p_0_0_010436_out = iRnewCameraMatrixHLS_6_fu_108;

assign p_0_0_010440_out = iRnewCameraMatrixHLS_7_fu_116;

assign p_0_0_010442_out = iRnewCameraMatrixHLS_8_fu_120;

assign p_0_0_010522_out = cameraMatrixHLS_1_fu_80;

assign p_0_0_010526_out = cameraMatrixHLS_2_fu_88;

assign p_0_0_010532_out = cameraMatrixHLS_3_fu_100;

assign p_0_0_010538_out = cameraMatrixHLS_4_fu_112;

assign zext_ln171_fu_261_p1 = ap_sig_allocacmp_i_10;

endmodule //stereolbm_axis_cambm_xFInitUndistortRectifyMapInverseKernel_Pipeline_VITIS_LOOP_171_1
